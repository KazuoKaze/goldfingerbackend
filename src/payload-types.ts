/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    'about-hero-component': AboutHeroComponent;
    'our-founders-component': OurFoundersComponent;
    'testimonials-component': TestimonialsComponent;
    'video-gallery-component': VideoGalleryComponent;
    'confidentiality-statement-component': ConfidentialityStatementComponent;
    'gallery-component': GalleryComponent;
    'non-surgical-gallery-component': NonSurgicalGalleryComponent;
    ChinFillersPage: ChinFillersPage;
    'botox-page': BotoxPage;
    juvedermGallery: JuvedermGallery;
    KybellaGallery: KybellaGallery;
    MicroChannelingGallery: MicroChannelingGallery;
    RestylaneGallery: RestylaneGallery;
    SkinMedicaGallery: SkinMedicaGallery;
    DermanGalleryHero: DermanGalleryHero;
    CheekContourGallery: CheekContourGallery;
    LiquidChinJawGallery: LiquidChinJawGallery;
    LiquidRhinoplastyGallery: LiquidRhinoplastyGallery;
    MarionetteLineGallery: MarionetteLineGallery;
    LiquidFaceliftGallery: LiquidFaceliftGallery;
    WeightLossGallery: WeightLossGallery;
    LashExtensionsGallery: LashExtensionsGallery;
    'surgical-gallery-component': SurgicalGalleryComponent;
    tummyTuckPage: TummyTuckPage;
    MommyMakeoverGallery: MommyMakeoverGallery;
    LiposuctionGallery: LiposuctionGallery;
    BreastAugmentationGallery: BreastAugmentationGallery;
    BreastLiftGallery: BreastLiftGallery;
    'medical-spa-component': MedicalSpaComponent;
    'medical-spa-injectables-component': MedicalSpaInjectablesComponent;
    'botox-page-component': BotoxPageComponent;
    'dysport-page-component': DysportPageComponent;
    'dermal-fillers-page-component': DermalFillersPageComponent;
    'juvederm-page-component': JuvedermPageComponent;
    'juvederm-volux-page-component': JuvedermVoluxPageComponent;
    'restylane-page-component': RestylanePageComponent;
    'restylane-contour-page-component': RestylaneContourPageComponent;
    'cheek-fillers-page-component': CheekFillersPageComponent;
    'lines-wrinkles-page-component': LinesWrinklesPageComponent;
    'lip-fillers-page-component': LipFillersPageComponent;
    'chin-fillers-page-component': ChinFillersPageComponent;
    'hand-rejuvenation-page-component': HandRejuvenationPageComponent;
    'liquid-facelift-page-component': LiquidFaceliftPageComponent;
    'liquid-rhinoplasty-page-component': LiquidRhinoplastyPageComponent;
    'skinvive-page-component': SkinvivePageComponent;
    'spa-services-page-component': SpaServicesPageComponent;
    'lash-extensions-page-component': LashExtensionsPageComponent;
    'mens-services-page-component': MensServicesPageComponent;
    'micro-channeling-page-component': MicroChannelingPageComponent;
    'permanent-makeup-page-component': PermanentMakeupPageComponent;
    'diamondglow-page-component': DiamondglowPageComponent;
    skinMedicaPage: SkinMedicaPage;
    skincareServicesPage: SkincareServicesPage;
    'weightloss-page-component': WeightlossPageComponent;
    'semaglutide-injections-page-component': SemaglutideInjectionsPageComponent;
    'specials-rewards-page-component': SpecialsRewardsPageComponent;
    'specials-page-component': SpecialsPageComponent;
    'alle-rewards-page-component': AlleRewardsPageComponent;
    'aspire-rewards-page-component': AspireRewardsPageComponent;
    'gift-cards-page-component': GiftCardsPageComponent;
    'medical-financing-page-component': MedicalFinancingPageComponent;
    'training-page-component': TrainingPageComponent;
    'program-details-component': ProgramDetailsComponent;
    'comprehensive-program-component': ComprehensiveProgramComponent;
    'foundational-program-component': FoundationalProgramComponent;
    'training-application-simple-component': TrainingApplicationSimpleComponent;
    'plastic-surgery-page-component': PlasticSurgeryPageComponent;
    'breast-page-component': BreastPageComponent;
    'breast-augmentation-page-component': BreastAugmentationPageComponent;
    'breast-lift-page-component': BreastLiftPageComponent;
    'breast-reduction-page-component': BreastReductionPageComponent;
    'breast-revision-page-component': BreastRevisionPageComponent;
    'body-page-component': BodyPageComponent;
    'liposuction-page-component': LiposuctionPageComponent;
    'mommy-makeover-page-component': MommyMakeoverPageComponent;
    'tummy-tuck-page-component': TummyTuckPageComponent;
    blog: Blog;
    locations: Location;
    providers: Provider;
    'clermont-page-component': ClermontPageComponent;
    'clearwater-page-component': ClearwaterPageComponent;
    'downtown-orlando-page-component': DowntownOrlandoPageComponent;
    'downtown-tampa-page-component': DowntownTampaPageComponent;
    'lake-mary-page-component': LakeMaryPageComponent;
    'lake-nona-page-component': LakeNonaPageComponent;
    'longwood-page-component': LongwoodPageComponent;
    'mount-dora-page-component': MountDoraPageComponent;
    'new-smyrna-page-component': NewSmyrnaPageComponent;
    'ocala-location-page-component': OcalaLocationPageComponent;
    'orlando-location-page-component': OrlandoLocationPageComponent;
    'port-orange-location-page-component': PortOrangeLocationPageComponent;
    'sarasota-location-page-component': SarasotaLocationPageComponent;
    'st-petersburg-location-page-component': StPetersburgLocationPageComponent;
    'tampa-location-page-component': TampaLocationPageComponent;
    'villages-location-page-component': VillagesLocationPageComponent;
    'wesley-chapel-location-page-component': WesleyChapelLocationPageComponent;
    'winter-garden-location-page-component': WinterGardenLocationPageComponent;
    'winter-park-location-page-component': WinterParkLocationPageComponent;
    'satellite-locations-page-component': SatelliteLocationsPageComponent;
    'contact-component': ContactComponent;
    'form-submissions': FormSubmission;
    'training-form-submissions': TrainingFormSubmission;
    'training-application': TrainingApplication;
    'special-contact-form-submissions': SpecialContactFormSubmission;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    'about-hero-component': AboutHeroComponentSelect<false> | AboutHeroComponentSelect<true>;
    'our-founders-component': OurFoundersComponentSelect<false> | OurFoundersComponentSelect<true>;
    'testimonials-component': TestimonialsComponentSelect<false> | TestimonialsComponentSelect<true>;
    'video-gallery-component': VideoGalleryComponentSelect<false> | VideoGalleryComponentSelect<true>;
    'confidentiality-statement-component': ConfidentialityStatementComponentSelect<false> | ConfidentialityStatementComponentSelect<true>;
    'gallery-component': GalleryComponentSelect<false> | GalleryComponentSelect<true>;
    'non-surgical-gallery-component': NonSurgicalGalleryComponentSelect<false> | NonSurgicalGalleryComponentSelect<true>;
    ChinFillersPage: ChinFillersPageSelect<false> | ChinFillersPageSelect<true>;
    'botox-page': BotoxPageSelect<false> | BotoxPageSelect<true>;
    juvedermGallery: JuvedermGallerySelect<false> | JuvedermGallerySelect<true>;
    KybellaGallery: KybellaGallerySelect<false> | KybellaGallerySelect<true>;
    MicroChannelingGallery: MicroChannelingGallerySelect<false> | MicroChannelingGallerySelect<true>;
    RestylaneGallery: RestylaneGallerySelect<false> | RestylaneGallerySelect<true>;
    SkinMedicaGallery: SkinMedicaGallerySelect<false> | SkinMedicaGallerySelect<true>;
    DermanGalleryHero: DermanGalleryHeroSelect<false> | DermanGalleryHeroSelect<true>;
    CheekContourGallery: CheekContourGallerySelect<false> | CheekContourGallerySelect<true>;
    LiquidChinJawGallery: LiquidChinJawGallerySelect<false> | LiquidChinJawGallerySelect<true>;
    LiquidRhinoplastyGallery: LiquidRhinoplastyGallerySelect<false> | LiquidRhinoplastyGallerySelect<true>;
    MarionetteLineGallery: MarionetteLineGallerySelect<false> | MarionetteLineGallerySelect<true>;
    LiquidFaceliftGallery: LiquidFaceliftGallerySelect<false> | LiquidFaceliftGallerySelect<true>;
    WeightLossGallery: WeightLossGallerySelect<false> | WeightLossGallerySelect<true>;
    LashExtensionsGallery: LashExtensionsGallerySelect<false> | LashExtensionsGallerySelect<true>;
    'surgical-gallery-component': SurgicalGalleryComponentSelect<false> | SurgicalGalleryComponentSelect<true>;
    tummyTuckPage: TummyTuckPageSelect<false> | TummyTuckPageSelect<true>;
    MommyMakeoverGallery: MommyMakeoverGallerySelect<false> | MommyMakeoverGallerySelect<true>;
    LiposuctionGallery: LiposuctionGallerySelect<false> | LiposuctionGallerySelect<true>;
    BreastAugmentationGallery: BreastAugmentationGallerySelect<false> | BreastAugmentationGallerySelect<true>;
    BreastLiftGallery: BreastLiftGallerySelect<false> | BreastLiftGallerySelect<true>;
    'medical-spa-component': MedicalSpaComponentSelect<false> | MedicalSpaComponentSelect<true>;
    'medical-spa-injectables-component': MedicalSpaInjectablesComponentSelect<false> | MedicalSpaInjectablesComponentSelect<true>;
    'botox-page-component': BotoxPageComponentSelect<false> | BotoxPageComponentSelect<true>;
    'dysport-page-component': DysportPageComponentSelect<false> | DysportPageComponentSelect<true>;
    'dermal-fillers-page-component': DermalFillersPageComponentSelect<false> | DermalFillersPageComponentSelect<true>;
    'juvederm-page-component': JuvedermPageComponentSelect<false> | JuvedermPageComponentSelect<true>;
    'juvederm-volux-page-component': JuvedermVoluxPageComponentSelect<false> | JuvedermVoluxPageComponentSelect<true>;
    'restylane-page-component': RestylanePageComponentSelect<false> | RestylanePageComponentSelect<true>;
    'restylane-contour-page-component': RestylaneContourPageComponentSelect<false> | RestylaneContourPageComponentSelect<true>;
    'cheek-fillers-page-component': CheekFillersPageComponentSelect<false> | CheekFillersPageComponentSelect<true>;
    'lines-wrinkles-page-component': LinesWrinklesPageComponentSelect<false> | LinesWrinklesPageComponentSelect<true>;
    'lip-fillers-page-component': LipFillersPageComponentSelect<false> | LipFillersPageComponentSelect<true>;
    'chin-fillers-page-component': ChinFillersPageComponentSelect<false> | ChinFillersPageComponentSelect<true>;
    'hand-rejuvenation-page-component': HandRejuvenationPageComponentSelect<false> | HandRejuvenationPageComponentSelect<true>;
    'liquid-facelift-page-component': LiquidFaceliftPageComponentSelect<false> | LiquidFaceliftPageComponentSelect<true>;
    'liquid-rhinoplasty-page-component': LiquidRhinoplastyPageComponentSelect<false> | LiquidRhinoplastyPageComponentSelect<true>;
    'skinvive-page-component': SkinvivePageComponentSelect<false> | SkinvivePageComponentSelect<true>;
    'spa-services-page-component': SpaServicesPageComponentSelect<false> | SpaServicesPageComponentSelect<true>;
    'lash-extensions-page-component': LashExtensionsPageComponentSelect<false> | LashExtensionsPageComponentSelect<true>;
    'mens-services-page-component': MensServicesPageComponentSelect<false> | MensServicesPageComponentSelect<true>;
    'micro-channeling-page-component': MicroChannelingPageComponentSelect<false> | MicroChannelingPageComponentSelect<true>;
    'permanent-makeup-page-component': PermanentMakeupPageComponentSelect<false> | PermanentMakeupPageComponentSelect<true>;
    'diamondglow-page-component': DiamondglowPageComponentSelect<false> | DiamondglowPageComponentSelect<true>;
    skinMedicaPage: SkinMedicaPageSelect<false> | SkinMedicaPageSelect<true>;
    skincareServicesPage: SkincareServicesPageSelect<false> | SkincareServicesPageSelect<true>;
    'weightloss-page-component': WeightlossPageComponentSelect<false> | WeightlossPageComponentSelect<true>;
    'semaglutide-injections-page-component': SemaglutideInjectionsPageComponentSelect<false> | SemaglutideInjectionsPageComponentSelect<true>;
    'specials-rewards-page-component': SpecialsRewardsPageComponentSelect<false> | SpecialsRewardsPageComponentSelect<true>;
    'specials-page-component': SpecialsPageComponentSelect<false> | SpecialsPageComponentSelect<true>;
    'alle-rewards-page-component': AlleRewardsPageComponentSelect<false> | AlleRewardsPageComponentSelect<true>;
    'aspire-rewards-page-component': AspireRewardsPageComponentSelect<false> | AspireRewardsPageComponentSelect<true>;
    'gift-cards-page-component': GiftCardsPageComponentSelect<false> | GiftCardsPageComponentSelect<true>;
    'medical-financing-page-component': MedicalFinancingPageComponentSelect<false> | MedicalFinancingPageComponentSelect<true>;
    'training-page-component': TrainingPageComponentSelect<false> | TrainingPageComponentSelect<true>;
    'program-details-component': ProgramDetailsComponentSelect<false> | ProgramDetailsComponentSelect<true>;
    'comprehensive-program-component': ComprehensiveProgramComponentSelect<false> | ComprehensiveProgramComponentSelect<true>;
    'foundational-program-component': FoundationalProgramComponentSelect<false> | FoundationalProgramComponentSelect<true>;
    'training-application-simple-component': TrainingApplicationSimpleComponentSelect<false> | TrainingApplicationSimpleComponentSelect<true>;
    'plastic-surgery-page-component': PlasticSurgeryPageComponentSelect<false> | PlasticSurgeryPageComponentSelect<true>;
    'breast-page-component': BreastPageComponentSelect<false> | BreastPageComponentSelect<true>;
    'breast-augmentation-page-component': BreastAugmentationPageComponentSelect<false> | BreastAugmentationPageComponentSelect<true>;
    'breast-lift-page-component': BreastLiftPageComponentSelect<false> | BreastLiftPageComponentSelect<true>;
    'breast-reduction-page-component': BreastReductionPageComponentSelect<false> | BreastReductionPageComponentSelect<true>;
    'breast-revision-page-component': BreastRevisionPageComponentSelect<false> | BreastRevisionPageComponentSelect<true>;
    'body-page-component': BodyPageComponentSelect<false> | BodyPageComponentSelect<true>;
    'liposuction-page-component': LiposuctionPageComponentSelect<false> | LiposuctionPageComponentSelect<true>;
    'mommy-makeover-page-component': MommyMakeoverPageComponentSelect<false> | MommyMakeoverPageComponentSelect<true>;
    'tummy-tuck-page-component': TummyTuckPageComponentSelect<false> | TummyTuckPageComponentSelect<true>;
    blog: BlogSelect<false> | BlogSelect<true>;
    locations: LocationsSelect<false> | LocationsSelect<true>;
    providers: ProvidersSelect<false> | ProvidersSelect<true>;
    'clermont-page-component': ClermontPageComponentSelect<false> | ClermontPageComponentSelect<true>;
    'clearwater-page-component': ClearwaterPageComponentSelect<false> | ClearwaterPageComponentSelect<true>;
    'downtown-orlando-page-component': DowntownOrlandoPageComponentSelect<false> | DowntownOrlandoPageComponentSelect<true>;
    'downtown-tampa-page-component': DowntownTampaPageComponentSelect<false> | DowntownTampaPageComponentSelect<true>;
    'lake-mary-page-component': LakeMaryPageComponentSelect<false> | LakeMaryPageComponentSelect<true>;
    'lake-nona-page-component': LakeNonaPageComponentSelect<false> | LakeNonaPageComponentSelect<true>;
    'longwood-page-component': LongwoodPageComponentSelect<false> | LongwoodPageComponentSelect<true>;
    'mount-dora-page-component': MountDoraPageComponentSelect<false> | MountDoraPageComponentSelect<true>;
    'new-smyrna-page-component': NewSmyrnaPageComponentSelect<false> | NewSmyrnaPageComponentSelect<true>;
    'ocala-location-page-component': OcalaLocationPageComponentSelect<false> | OcalaLocationPageComponentSelect<true>;
    'orlando-location-page-component': OrlandoLocationPageComponentSelect<false> | OrlandoLocationPageComponentSelect<true>;
    'port-orange-location-page-component': PortOrangeLocationPageComponentSelect<false> | PortOrangeLocationPageComponentSelect<true>;
    'sarasota-location-page-component': SarasotaLocationPageComponentSelect<false> | SarasotaLocationPageComponentSelect<true>;
    'st-petersburg-location-page-component': StPetersburgLocationPageComponentSelect<false> | StPetersburgLocationPageComponentSelect<true>;
    'tampa-location-page-component': TampaLocationPageComponentSelect<false> | TampaLocationPageComponentSelect<true>;
    'villages-location-page-component': VillagesLocationPageComponentSelect<false> | VillagesLocationPageComponentSelect<true>;
    'wesley-chapel-location-page-component': WesleyChapelLocationPageComponentSelect<false> | WesleyChapelLocationPageComponentSelect<true>;
    'winter-garden-location-page-component': WinterGardenLocationPageComponentSelect<false> | WinterGardenLocationPageComponentSelect<true>;
    'winter-park-location-page-component': WinterParkLocationPageComponentSelect<false> | WinterParkLocationPageComponentSelect<true>;
    'satellite-locations-page-component': SatelliteLocationsPageComponentSelect<false> | SatelliteLocationsPageComponentSelect<true>;
    'contact-component': ContactComponentSelect<false> | ContactComponentSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    'training-form-submissions': TrainingFormSubmissionsSelect<false> | TrainingFormSubmissionsSelect<true>;
    'training-application': TrainingApplicationSelect<false> | TrainingApplicationSelect<true>;
    'special-contact-form-submissions': SpecialContactFormSubmissionsSelect<false> | SpecialContactFormSubmissionsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    navbar: Navbar;
    home: Home;
    'provider-locator-component': ProviderLocatorComponent;
  };
  globalsSelect: {
    navbar: NavbarSelect<false> | NavbarSelect<true>;
    home: HomeSelect<false> | HomeSelect<true>;
    'provider-locator-component': ProviderLocatorComponentSelect<false> | ProviderLocatorComponentSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  /**
   * Cloudinary URL
   */
  cloudinary_url?: string | null;
  public_id?: string | null;
  resource_type?: string | null;
  original_filename?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "about-hero-component".
 */
export interface AboutHeroComponent {
  id: string;
  componentName: string;
  heroSection: {
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  indexListSection?: {
    backgroundColor?: string | null;
    textColor?: string | null;
    hoverColor?: string | null;
    /**
     * Drag to reorder navigation items
     */
    items?:
      | {
          label: string;
          url: string;
          title?: string | null;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  pageIndexSection?: {
    backgroundColor?: string | null;
    cardBackgroundColor?: string | null;
    cardTextColor?: string | null;
    cardHoverColor?: string | null;
    /**
     * Drag to reorder cards in the grid
     */
    cards?:
      | {
          title: string;
          url: string;
          titleAttribute?: string | null;
          ariaLabel?: string | null;
          /**
           * Text shown on hover overlay
           */
          labelText?: string | null;
          image: {
            mobile?: (string | null) | Media;
            tablet?: (string | null) | Media;
            desktop?: (string | null) | Media;
            alt: string;
          };
          /**
           * Override global card background color for this specific card
           */
          customBackgroundColor?: string | null;
          /**
           * Override global card text color for this specific card
           */
          customTextColor?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "our-founders-component".
 */
export interface OurFoundersComponent {
  id: string;
  componentTitle: string;
  isActive?: boolean | null;
  order?: number | null;
  heroSection: {
    isActive?: boolean | null;
    order?: number | null;
    className?: string | null;
    styles?: {
      backgroundColor?: string | null;
      paddingTop?: string | null;
      paddingBottom?: string | null;
      marginTop?: string | null;
      marginBottom?: string | null;
    };
    backgroundImage?: {
      show?: boolean | null;
      image?: (string | null) | Media;
      imageUrl?: string | null;
      alt?: string | null;
      width?: number | null;
      height?: number | null;
    };
    breadcrumbs?: {
      show?: boolean | null;
      className?: string | null;
      styles?: {
        textColor?: string | null;
        linkColor?: string | null;
        hoverColor?: string | null;
        fontSize?: string | null;
      };
      items?:
        | {
            order?: number | null;
            text: string;
            link?: string | null;
            ariaLabel?: string | null;
            isActive?: boolean | null;
            id?: string | null;
          }[]
        | null;
    };
    heading: {
      text: string;
      tag?: ('h1' | 'h2' | 'h3') | null;
      styles?: {
        color?: string | null;
        fontSize?: string | null;
        fontWeight?: string | null;
        textAlign?: ('left' | 'center' | 'right') | null;
        marginTop?: string | null;
        marginBottom?: string | null;
      };
    };
    mainImage?: {
      show?: boolean | null;
      image?: (string | null) | Media;
      imageUrl?: string | null;
      alt?: string | null;
      width?: number | null;
      height?: number | null;
      styles?: {
        objectFit?: ('cover' | 'contain' | 'fill' | 'none') | null;
        borderRadius?: string | null;
      };
    };
  };
  introSection: {
    isActive?: boolean | null;
    order?: number | null;
    className?: string | null;
    styles?: {
      backgroundColor?: string | null;
      paddingTop?: string | null;
      paddingBottom?: string | null;
      marginTop?: string | null;
      marginBottom?: string | null;
      textAlign?: ('left' | 'center' | 'right') | null;
    };
    logo?: {
      show?: boolean | null;
      image?: (string | null) | Media;
      imageUrl?: string | null;
      alt?: string | null;
      width?: number | null;
      height?: number | null;
      styles?: {
        marginBottom?: string | null;
      };
    };
    heading: {
      text: string;
      tag?: ('h1' | 'h2' | 'h3') | null;
      styles?: {
        color?: string | null;
        fontSize?: string | null;
        fontWeight?: string | null;
        lineHeight?: string | null;
        marginBottom?: string | null;
      };
    };
    paragraphs?:
      | {
          order?: number | null;
          text: string;
          isActive?: boolean | null;
          id?: string | null;
        }[]
      | null;
    contentStyles?: {
      color?: string | null;
      fontSize?: string | null;
      lineHeight?: string | null;
      maxWidth?: string | null;
      paragraphSpacing?: string | null;
    };
  };
  halfImageSection: {
    isActive?: boolean | null;
    order?: number | null;
    className?: string | null;
    styles?: {
      backgroundColor?: string | null;
      paddingTop?: string | null;
      paddingBottom?: string | null;
      marginTop?: string | null;
      marginBottom?: string | null;
    };
    layout?: ('image-left' | 'image-right') | null;
    imageContainer?: {
      className?: string | null;
      styles?: {
        backgroundColor?: string | null;
        borderRadius?: string | null;
        padding?: string | null;
      };
      image?: (string | null) | Media;
      imageUrl?: string | null;
      alt?: string | null;
      width?: number | null;
      height?: number | null;
      imageStyles?: {
        objectFit?: ('cover' | 'contain' | 'fill' | 'none') | null;
        borderRadius?: string | null;
      };
    };
    contentContainer: {
      className?: string | null;
      styles?: {
        backgroundColor?: string | null;
        padding?: string | null;
        textAlign?: ('left' | 'center' | 'right') | null;
      };
      heading: {
        smallText?: {
          show?: boolean | null;
          text?: string | null;
          className?: string | null;
          styles?: {
            color?: string | null;
            fontSize?: string | null;
            fontWeight?: string | null;
          };
        };
        text: string;
        tag?: ('h1' | 'h2' | 'h3') | null;
        styles?: {
          color?: string | null;
          fontSize?: string | null;
          fontWeight?: string | null;
          lineHeight?: string | null;
          marginBottom?: string | null;
        };
      };
      paragraphs?:
        | {
            order?: number | null;
            text: string;
            isActive?: boolean | null;
            id?: string | null;
          }[]
        | null;
      contentStyles?: {
        color?: string | null;
        fontSize?: string | null;
        lineHeight?: string | null;
        paragraphSpacing?: string | null;
      };
    };
  };
  pageSettings?: {
    containerWidth?: string | null;
    fontFamily?: string | null;
    animations?: {
      enableAnimations?: boolean | null;
      fadeInDuration?: string | null;
    };
  };
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaKeywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonials-component".
 */
export interface TestimonialsComponent {
  id: string;
  componentName: string;
  heroSection: {
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  /**
   * Drag to reorder rating box sections (e.g., Main Locations, Salon Lofts Locations)
   */
  ratingBoxSections?:
    | {
        /**
         * e.g., "Main Locations" or "Salon Lofts Locations"
         */
        sectionTitle: string;
        backgroundColor?: string | null;
        textColor?: string | null;
        /**
         * Number of items to display per row
         */
        itemsPerRow?: number | null;
        /**
         * Drag to reorder location cards
         */
        locations?:
          | {
              /**
               * e.g., "Clearwater", "Lake Mary"
               */
              name: string;
              /**
               * e.g., "Google", "Yelp"
               */
              platform?: string | null;
              /**
               * Optional: Override the display name (e.g., "Google - Clearwater")
               */
              displayName?: string | null;
              /**
               * Rating value (0-5)
               */
              rating: number;
              reviewCount: number;
              /**
               * Full URL to the reviews page
               */
              url: string;
              /**
               * e.g., "Google - Clearwater reviews that open in a new tab"
               */
              ariaLabel?: string | null;
              openInNewTab?: boolean | null;
              /**
               * Override section background color for this card
               */
              backgroundColor?: string | null;
              /**
               * Override section text color for this card
               */
              textColor?: string | null;
              /**
               * Custom star icon color for this card
               */
              starColor?: string | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  reviewsListSection?: {
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * Choose the layout style for reviews
     */
    displayOption?: ('option-1' | 'option-2' | 'option-3') | null;
    /**
     * Drag to reorder reviews
     */
    reviews?:
      | {
          content: string;
          author: string;
          rating: number;
          /**
           * Override section background for this review card
           */
          backgroundColor?: string | null;
          /**
           * Override section text color for this review card
           */
          textColor?: string | null;
          /**
           * Custom star icon color for this review
           */
          starColor?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default color for star ratings
     */
    defaultStarColor?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaKeywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "video-gallery-component".
 */
export interface VideoGalleryComponent {
  id: string;
  componentName: string;
  heroSection: {
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection: {
    /**
     * CSS color value
     */
    backgroundColor?: string | null;
    /**
     * CSS color value
     */
    textColor?: string | null;
    /**
     * CSS padding value (e.g., 0, 20px)
     */
    paddingBottom?: string | null;
    logo?: {
      image?: (string | null) | Media;
      width?: number | null;
      height?: number | null;
      alt?: string | null;
    };
    /**
     * Main intro text content with paragraphs and links
     */
    content: string;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * CSS animation classes (e.g., wow fadeInUp)
     */
    animationClass?: string | null;
  };
  videoGridSection?: {
    /**
     * CSS color value
     */
    backgroundColor?: string | null;
    gridLayout?: {
      /**
       * Number of columns in the grid
       */
      columns?: ('2' | '3' | '4') | null;
      /**
       * Space between grid items (e.g., 20px, 2rem)
       */
      gap?: string | null;
    };
    /**
     * Drag to reorder videos in the grid
     */
    videos?:
      | {
          /**
           * Full YouTube video URL (e.g., https://www.youtube.com/watch?v=...)
           */
          youtubeUrl: string;
          thumbnail?: {
            /**
             * Upload custom thumbnail or leave empty to use YouTube default
             */
            customThumbnail?: (string | null) | Media;
            alt?: string | null;
          };
          /**
           * Title displayed below the video thumbnail
           */
          title: string;
          /**
           * CSS color value for this video title
           */
          titleColor?: string | null;
          /**
           * CSS class or style for hover effect
           */
          thumbnailHoverEffect?: string | null;
          id?: string | null;
        }[]
      | null;
    videoCardStyles?: {
      /**
       * Background color for video cards
       */
      cardBackgroundColor?: string | null;
      /**
       * Border radius for cards (e.g., 8px, 0.5rem)
       */
      cardBorderRadius?: string | null;
      /**
       * CSS box-shadow value
       */
      cardShadow?: string | null;
      /**
       * CSS box-shadow value on hover
       */
      cardHoverShadow?: string | null;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        sectionName: 'hero' | 'intro' | 'videoGrid';
        isVisible?: boolean | null;
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default link color
     */
    linkColor?: string | null;
    /**
     * Link color on hover
     */
    linkHoverColor?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    canonicalUrl?: string | null;
  };
  advancedSettings?: {
    /**
     * Add custom CSS for this component
     */
    customCSS?: string | null;
    /**
     * Add custom JavaScript for this component
     */
    customJS?: string | null;
    /**
     * Custom data attributes for modules (e.g., data-s3-module)
     */
    moduleDataAttributes?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "confidentiality-statement-component".
 */
export interface ConfidentialityStatementComponent {
  id: string;
  componentName: string;
  /**
   * Drag to reorder sections on the page
   */
  sections?:
    | {
        sectionType: 'hero' | 'intro' | 'banner' | 'column';
        /**
         * Unique identifier for this section (optional)
         */
        sectionId?: string | null;
        heroSection?: {
          /**
           * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
           */
          backgroundColor?: string | null;
          backgroundImage?: {
            mobile?: (string | null) | Media;
            tablet?: (string | null) | Media;
            desktop?: (string | null) | Media;
            large?: (string | null) | Media;
            alt?: string | null;
          };
          /**
           * Drag to reorder breadcrumb items
           */
          breadcrumbs?:
            | {
                label: string;
                url: string;
                ariaLabel?: string | null;
                id?: string | null;
              }[]
            | null;
          title: string;
          /**
           * CSS color value
           */
          titleColor?: string | null;
          /**
           * CSS font-size value (e.g., 48px, 3rem)
           */
          titleFontSize?: string | null;
          mediaImage: {
            mobile?: (string | null) | Media;
            tablet?: (string | null) | Media;
            desktop?: (string | null) | Media;
            large?: (string | null) | Media;
            alt: string;
          };
          /**
           * Space-separated CSS classes (e.g., mobile-stack)
           */
          cssClasses?: string | null;
        };
        introSection?: {
          backgroundColor?: string | null;
          textColor?: string | null;
          containerWidth?: ('default' | 'wide' | 'narrow') | null;
          showLogo?: boolean | null;
          logo?: (string | null) | Media;
          logoAlt?: string | null;
          heading: string;
          headingColor?: string | null;
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          /**
           * Space-separated CSS classes (e.g., option-1 viewport)
           */
          cssClasses?: string | null;
        };
        bannerSection?: {
          backgroundColor?: string | null;
          textColor?: string | null;
          theme?: ('light' | 'dark') | null;
          hideDivider?: boolean | null;
          backgroundImage?: {
            mobile?: (string | null) | Media;
            tablet?: (string | null) | Media;
            desktop?: (string | null) | Media;
            large?: (string | null) | Media;
            alt?: string | null;
          };
          heading: string;
          headingColor?: string | null;
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          /**
           * Space-separated CSS classes (e.g., viewport background-1)
           */
          cssClasses?: string | null;
        };
        columnSection?: {
          backgroundColor?: string | null;
          textColor?: string | null;
          containerWidth?: ('default' | 'container' | 'wide') | null;
          /**
           * Drag to reorder columns
           */
          columns?:
            | {
                heading: string;
                headingColor?: string | null;
                content: {
                  root: {
                    type: string;
                    children: {
                      type: any;
                      version: number;
                      [k: string]: unknown;
                    }[];
                    direction: ('ltr' | 'rtl') | null;
                    format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                    indent: number;
                    version: number;
                  };
                  [k: string]: unknown;
                };
                /**
                 * Override section background for this column
                 */
                backgroundColor?: string | null;
                /**
                 * Override section text color for this column
                 */
                textColor?: string | null;
                id?: string | null;
              }[]
            | null;
          /**
           * Space-separated CSS classes (e.g., viewport)
           */
          cssClasses?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Main brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    ogImage?: (string | null) | Media;
    canonicalUrl?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gallery-component".
 */
export interface GalleryComponent {
  id: string;
  componentName: string;
  /**
   * Drag to reorder sections on the page
   */
  sections?:
    | {
        sectionType: 'galleryHero' | 'galleryIndex' | 'ageRestriction';
        /**
         * Unique identifier for this section (optional)
         */
        sectionId?: string | null;
        galleryHeroSection?: {
          /**
           * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
           */
          backgroundColor?: string | null;
          backgroundImage?: {
            mobile?: (string | null) | Media;
            tablet?: (string | null) | Media;
            desktop?: (string | null) | Media;
            large?: (string | null) | Media;
            alt?: string | null;
            width?: number | null;
            height?: number | null;
          };
          title: string;
          /**
           * CSS color value
           */
          titleColor?: string | null;
          /**
           * Drag to reorder breadcrumb items
           */
          breadcrumbs?:
            | {
                label: string;
                url: string;
                ariaLabel?: string | null;
                id?: string | null;
              }[]
            | null;
          /**
           * Space-separated CSS classes (e.g., banner bg)
           */
          cssClasses?: string | null;
        };
        galleryIndexSection?: {
          /**
           * CSS color value
           */
          backgroundColor?: string | null;
          /**
           * CSS color value
           */
          textColor?: string | null;
          containerWidth?: ('container' | 'wide' | 'narrow') | null;
          /**
           * Drag to reorder gallery groups (e.g., Non-Surgical, Surgical)
           */
          groups?:
            | {
                /**
                 * e.g., Non-Surgical, Surgical
                 */
                groupName: string;
                /**
                 * CSS class for this group (e.g., non-surgical, surgical)
                 */
                groupSlug: string;
                /**
                 * Override color for this group heading
                 */
                headingColor?: string | null;
                /**
                 * Background color for this group
                 */
                backgroundColor?: string | null;
                /**
                 * Drag to reorder gallery links within this group
                 */
                links?:
                  | {
                      label: string;
                      url: string;
                      /**
                       * Override link color (optional)
                       */
                      linkColor?: string | null;
                      /**
                       * Link hover color (optional)
                       */
                      hoverColor?: string | null;
                      id?: string | null;
                    }[]
                  | null;
                id?: string | null;
              }[]
            | null;
          /**
           * Space-separated CSS classes
           */
          cssClasses?: string | null;
        };
        ageRestrictionSection?: {
          /**
           * Show age restriction popup when enabled
           */
          enabled?: boolean | null;
          /**
           * Background color of the popup
           */
          backgroundColor?: string | null;
          /**
           * Color of text in the popup
           */
          textColor?: string | null;
          /**
           * Background color of the overlay (e.g., rgba(0,0,0,0.8))
           */
          overlayColor?: string | null;
          heading?: string | null;
          headingColor?: string | null;
          /**
           * The warning message displayed to users
           */
          message: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          buttonText?: string | null;
          buttonBackgroundColor?: string | null;
          buttonTextColor?: string | null;
          buttonHoverColor?: string | null;
          showCloseButton?: boolean | null;
          /**
           * Space-separated CSS classes
           */
          cssClasses?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Main brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default color for all links
     */
    linkColor?: string | null;
    /**
     * Default hover color for all links
     */
    linkHoverColor?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    ogImage?: (string | null) | Media;
    canonicalUrl?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "non-surgical-gallery-component".
 */
export interface NonSurgicalGalleryComponent {
  id: string;
  componentName: string;
  /**
   * Drag to reorder sections on the page
   */
  sections?:
    | {
        sectionType: 'galleryHero' | 'subIndex' | 'ageRestriction';
        /**
         * Unique identifier for this section (optional)
         */
        sectionId?: string | null;
        galleryHeroSection?: {
          /**
           * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
           */
          backgroundColor?: string | null;
          backgroundImage?: {
            mobile?: (string | null) | Media;
            tablet?: (string | null) | Media;
            desktop?: (string | null) | Media;
            large?: (string | null) | Media;
            alt?: string | null;
            width?: number | null;
            height?: number | null;
          };
          title: string;
          /**
           * CSS color value
           */
          titleColor?: string | null;
          /**
           * Drag to reorder breadcrumb items
           */
          breadcrumbs?:
            | {
                label: string;
                url: string;
                ariaLabel?: string | null;
                id?: string | null;
              }[]
            | null;
          /**
           * Space-separated CSS classes (e.g., banner bg)
           */
          cssClasses?: string | null;
        };
        subIndexSection?: {
          /**
           * CSS color value
           */
          backgroundColor?: string | null;
          /**
           * CSS color value
           */
          textColor?: string | null;
          containerWidth?: ('container' | 'wide' | 'narrow') | null;
          /**
           * Drag to reorder category items
           */
          categoryGroups?:
            | {
                /**
                 * Display name for the category (e.g., Lip Fillers)
                 */
                categoryName: string;
                /**
                 * URL-friendly slug and CSS class (e.g., lip-fillers)
                 */
                categorySlug: string;
                /**
                 * Full URL to the category page
                 */
                url: string;
                /**
                 * Override color for this category heading
                 */
                headingColor?: string | null;
                /**
                 * Color for the link
                 */
                linkColor?: string | null;
                /**
                 * Color when hovering over the link
                 */
                linkHoverColor?: string | null;
                /**
                 * Background color for this category group
                 */
                backgroundColor?: string | null;
                /**
                 * Border color for this category group (optional)
                 */
                borderColor?: string | null;
                id?: string | null;
              }[]
            | null;
          /**
           * Space-separated CSS classes (e.g., sub-index)
           */
          cssClasses?: string | null;
        };
        ageRestrictionSection?: {
          /**
           * Show age restriction popup when enabled
           */
          enabled?: boolean | null;
          /**
           * Background color of the popup
           */
          backgroundColor?: string | null;
          /**
           * Color of text in the popup
           */
          textColor?: string | null;
          /**
           * Background color of the overlay (e.g., rgba(0,0,0,0.8))
           */
          overlayColor?: string | null;
          heading?: string | null;
          headingColor?: string | null;
          /**
           * The warning message displayed to users
           */
          message: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          buttonText?: string | null;
          buttonBackgroundColor?: string | null;
          buttonTextColor?: string | null;
          buttonHoverColor?: string | null;
          showCloseButton?: boolean | null;
          /**
           * Space-separated CSS classes
           */
          cssClasses?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Main brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default color for all links
     */
    linkColor?: string | null;
    /**
     * Default hover color for all links
     */
    linkHoverColor?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    ogImage?: (string | null) | Media;
    canonicalUrl?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ChinFillersPage".
 */
export interface ChinFillersPage {
  id: string;
  /**
   * Name to identify this gallery component
   */
  componentName: string;
  /**
   * URL-friendly identifier (e.g., botox)
   */
  slug: string;
  isActive?: boolean | null;
  heroSection: {
    title: string;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for title
     */
    textColor?: string | null;
    backgroundImage?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
    /**
     * Drag to reorder breadcrumb links
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    breadcrumbTextColor?: string | null;
    breadcrumbLinkColor?: string | null;
    breadcrumbHoverColor?: string | null;
  };
  dropdownSection: {
    backgroundColor?: string | null;
    selectedItemLabel: string;
    /**
     * Drag to reorder dropdown items
     */
    dropdownItems?:
      | {
          label: string;
          url: string;
          isActive?: boolean | null;
          id?: string | null;
        }[]
      | null;
    backButton?: {
      label?: string | null;
      url?: string | null;
      iconClass?: string | null;
    };
    textColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
    borderColor?: string | null;
  };
  gallerySection?: {
    backgroundColor?: string | null;
    /**
     * CSS padding value (e.g., 20px 0)
     */
    sectionPadding?: string | null;
    /**
     * Drag to reorder gallery images
     */
    galleryItems?:
      | {
          image: string | Media;
          /**
           * Use this if image is hosted externally instead of upload
           */
          imageUrl?: string | null;
          /**
           * URL to the individual gallery item page (e.g., /gallery/non-surgical/botox/item/...)
           */
          itemUrl: string;
          altText: string;
          /**
           * Optional patient identifier for alt text
           */
          patientId?: string | null;
          imageNumber?: number | null;
          width?: number | null;
          height?: number | null;
          customCss?: string | null;
          id?: string | null;
        }[]
      | null;
    itemBackgroundColor?: string | null;
    itemBorderColor?: string | null;
    itemHoverEffect?: ('none' | 'scale' | 'opacity' | 'shadow') | null;
  };
  paginationSection?: {
    enabled?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    activePageColor?: string | null;
    activePageBackground?: string | null;
    hoverColor?: string | null;
    currentPage?: number | null;
    totalPages?: number | null;
    /**
     * Base URL without page number (e.g., /gallery/non-surgical/botox/)
     */
    baseUrl?: string | null;
    /**
     * Individual page link configuration
     */
    pages?:
      | {
          pageNumber: number;
          url: string;
          isCurrent?: boolean | null;
          hideOnPhone?: boolean | null;
          id?: string | null;
        }[]
      | null;
    nextButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
    prevButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
  };
  globalStyling?: {
    containerBackgroundColor?: string | null;
    /**
     * CSS max-width value (e.g., 1200px)
     */
    containerMaxWidth?: string | null;
    fontFamily?: string | null;
    primaryColor?: string | null;
    secondaryColor?: string | null;
    /**
     * Additional CSS rules to apply
     */
    customCss?: string | null;
  };
  /**
   * Drag to reorder page sections
   */
  sectionOrder?:
    | {
        sectionType: 'hero' | 'dropdown' | 'gallery' | 'pagination';
        enabled?: boolean | null;
        /**
         * Optional HTML ID attribute
         */
        customId?: string | null;
        customClass?: string | null;
        id?: string | null;
      }[]
    | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaKeywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "botox-page".
 */
export interface BotoxPage {
  id: string;
  /**
   * Name to identify this gallery component
   */
  componentName: string;
  /**
   * URL-friendly identifier (e.g., botox)
   */
  slug: string;
  isActive?: boolean | null;
  heroSection: {
    title: string;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for title
     */
    textColor?: string | null;
    backgroundImage?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
    /**
     * Drag to reorder breadcrumb links
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    breadcrumbTextColor?: string | null;
    breadcrumbLinkColor?: string | null;
    breadcrumbHoverColor?: string | null;
  };
  dropdownSection: {
    backgroundColor?: string | null;
    selectedItemLabel: string;
    /**
     * Drag to reorder dropdown items
     */
    dropdownItems?:
      | {
          label: string;
          url: string;
          isActive?: boolean | null;
          id?: string | null;
        }[]
      | null;
    backButton?: {
      label?: string | null;
      url?: string | null;
      iconClass?: string | null;
    };
    textColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
    borderColor?: string | null;
  };
  gallerySection?: {
    backgroundColor?: string | null;
    /**
     * CSS padding value (e.g., 20px 0)
     */
    sectionPadding?: string | null;
    /**
     * Drag to reorder gallery images
     */
    galleryItems?:
      | {
          image: string | Media;
          /**
           * Use this if image is hosted externally instead of upload
           */
          imageUrl?: string | null;
          /**
           * URL to the individual gallery item page (e.g., /gallery/non-surgical/botox/item/...)
           */
          itemUrl: string;
          altText: string;
          /**
           * Optional patient identifier for alt text
           */
          patientId?: string | null;
          imageNumber?: number | null;
          width?: number | null;
          height?: number | null;
          customCss?: string | null;
          id?: string | null;
        }[]
      | null;
    itemBackgroundColor?: string | null;
    itemBorderColor?: string | null;
    itemHoverEffect?: ('none' | 'scale' | 'opacity' | 'shadow') | null;
  };
  paginationSection?: {
    enabled?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    activePageColor?: string | null;
    activePageBackground?: string | null;
    hoverColor?: string | null;
    currentPage?: number | null;
    totalPages?: number | null;
    /**
     * Base URL without page number (e.g., /gallery/non-surgical/botox/)
     */
    baseUrl?: string | null;
    /**
     * Individual page link configuration
     */
    pages?:
      | {
          pageNumber: number;
          url: string;
          isCurrent?: boolean | null;
          hideOnPhone?: boolean | null;
          id?: string | null;
        }[]
      | null;
    nextButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
    prevButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
  };
  globalStyling?: {
    containerBackgroundColor?: string | null;
    /**
     * CSS max-width value (e.g., 1200px)
     */
    containerMaxWidth?: string | null;
    fontFamily?: string | null;
    primaryColor?: string | null;
    secondaryColor?: string | null;
    /**
     * Additional CSS rules to apply
     */
    customCss?: string | null;
  };
  /**
   * Drag to reorder page sections
   */
  sectionOrder?:
    | {
        sectionType: 'hero' | 'dropdown' | 'gallery' | 'pagination';
        enabled?: boolean | null;
        /**
         * Optional HTML ID attribute
         */
        customId?: string | null;
        customClass?: string | null;
        id?: string | null;
      }[]
    | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaKeywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "juvedermGallery".
 */
export interface JuvedermGallery {
  id: string;
  /**
   * Name to identify this gallery component
   */
  componentName: string;
  /**
   * URL-friendly identifier (e.g., botox)
   */
  slug: string;
  isActive?: boolean | null;
  heroSection: {
    title: string;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for title
     */
    textColor?: string | null;
    backgroundImage?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
    /**
     * Drag to reorder breadcrumb links
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    breadcrumbTextColor?: string | null;
    breadcrumbLinkColor?: string | null;
    breadcrumbHoverColor?: string | null;
  };
  dropdownSection: {
    backgroundColor?: string | null;
    selectedItemLabel: string;
    /**
     * Drag to reorder dropdown items
     */
    dropdownItems?:
      | {
          label: string;
          url: string;
          isActive?: boolean | null;
          id?: string | null;
        }[]
      | null;
    backButton?: {
      label?: string | null;
      url?: string | null;
      iconClass?: string | null;
    };
    textColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
    borderColor?: string | null;
  };
  gallerySection?: {
    backgroundColor?: string | null;
    /**
     * CSS padding value (e.g., 20px 0)
     */
    sectionPadding?: string | null;
    /**
     * Drag to reorder gallery images
     */
    galleryItems?:
      | {
          image: string | Media;
          /**
           * Use this if image is hosted externally instead of upload
           */
          imageUrl?: string | null;
          /**
           * URL to the individual gallery item page (e.g., /gallery/non-surgical/botox/item/...)
           */
          itemUrl?: string | null;
          altText: string;
          /**
           * Optional patient identifier for alt text
           */
          patientId?: string | null;
          imageNumber?: number | null;
          width?: number | null;
          height?: number | null;
          customCss?: string | null;
          id?: string | null;
        }[]
      | null;
    itemBackgroundColor?: string | null;
    itemBorderColor?: string | null;
    itemHoverEffect?: ('none' | 'scale' | 'opacity' | 'shadow') | null;
  };
  paginationSection?: {
    enabled?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    activePageColor?: string | null;
    activePageBackground?: string | null;
    hoverColor?: string | null;
    currentPage?: number | null;
    totalPages?: number | null;
    /**
     * Base URL without page number (e.g., /gallery/non-surgical/botox/)
     */
    baseUrl?: string | null;
    /**
     * Individual page link configuration
     */
    pages?:
      | {
          pageNumber: number;
          url: string;
          isCurrent?: boolean | null;
          hideOnPhone?: boolean | null;
          id?: string | null;
        }[]
      | null;
    nextButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
    prevButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
  };
  globalStyling?: {
    containerBackgroundColor?: string | null;
    /**
     * CSS max-width value (e.g., 1200px)
     */
    containerMaxWidth?: string | null;
    fontFamily?: string | null;
    primaryColor?: string | null;
    secondaryColor?: string | null;
    /**
     * Additional CSS rules to apply
     */
    customCss?: string | null;
  };
  /**
   * Drag to reorder page sections
   */
  sectionOrder?:
    | {
        sectionType: 'hero' | 'dropdown' | 'gallery' | 'pagination';
        enabled?: boolean | null;
        /**
         * Optional HTML ID attribute
         */
        customId?: string | null;
        customClass?: string | null;
        id?: string | null;
      }[]
    | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaKeywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "KybellaGallery".
 */
export interface KybellaGallery {
  id: string;
  /**
   * Name to identify this gallery component
   */
  componentName: string;
  /**
   * URL-friendly identifier (e.g., botox)
   */
  slug: string;
  isActive?: boolean | null;
  heroSection: {
    title: string;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for title
     */
    textColor?: string | null;
    backgroundImage?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
    /**
     * Drag to reorder breadcrumb links
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    breadcrumbTextColor?: string | null;
    breadcrumbLinkColor?: string | null;
    breadcrumbHoverColor?: string | null;
  };
  dropdownSection: {
    backgroundColor?: string | null;
    selectedItemLabel: string;
    /**
     * Drag to reorder dropdown items
     */
    dropdownItems?:
      | {
          label: string;
          url: string;
          isActive?: boolean | null;
          id?: string | null;
        }[]
      | null;
    backButton?: {
      label?: string | null;
      url?: string | null;
      iconClass?: string | null;
    };
    textColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
    borderColor?: string | null;
  };
  gallerySection?: {
    backgroundColor?: string | null;
    /**
     * CSS padding value (e.g., 20px 0)
     */
    sectionPadding?: string | null;
    /**
     * Drag to reorder gallery images
     */
    galleryItems?:
      | {
          image: string | Media;
          /**
           * Use this if image is hosted externally instead of upload
           */
          imageUrl?: string | null;
          /**
           * URL to the individual gallery item page (e.g., /gallery/non-surgical/botox/item/...)
           */
          itemUrl?: string | null;
          altText: string;
          /**
           * Optional patient identifier for alt text
           */
          patientId?: string | null;
          imageNumber?: number | null;
          width?: number | null;
          height?: number | null;
          customCss?: string | null;
          id?: string | null;
        }[]
      | null;
    itemBackgroundColor?: string | null;
    itemBorderColor?: string | null;
    itemHoverEffect?: ('none' | 'scale' | 'opacity' | 'shadow') | null;
  };
  paginationSection?: {
    enabled?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    activePageColor?: string | null;
    activePageBackground?: string | null;
    hoverColor?: string | null;
    currentPage?: number | null;
    totalPages?: number | null;
    /**
     * Base URL without page number (e.g., /gallery/non-surgical/botox/)
     */
    baseUrl?: string | null;
    /**
     * Individual page link configuration
     */
    pages?:
      | {
          pageNumber: number;
          url: string;
          isCurrent?: boolean | null;
          hideOnPhone?: boolean | null;
          id?: string | null;
        }[]
      | null;
    nextButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
    prevButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
  };
  globalStyling?: {
    containerBackgroundColor?: string | null;
    /**
     * CSS max-width value (e.g., 1200px)
     */
    containerMaxWidth?: string | null;
    fontFamily?: string | null;
    primaryColor?: string | null;
    secondaryColor?: string | null;
    /**
     * Additional CSS rules to apply
     */
    customCss?: string | null;
  };
  /**
   * Drag to reorder page sections
   */
  sectionOrder?:
    | {
        sectionType: 'hero' | 'dropdown' | 'gallery' | 'pagination';
        enabled?: boolean | null;
        /**
         * Optional HTML ID attribute
         */
        customId?: string | null;
        customClass?: string | null;
        id?: string | null;
      }[]
    | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaKeywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MicroChannelingGallery".
 */
export interface MicroChannelingGallery {
  id: string;
  /**
   * Name to identify this gallery component
   */
  componentName: string;
  /**
   * URL-friendly identifier (e.g., botox)
   */
  slug: string;
  isActive?: boolean | null;
  heroSection: {
    title: string;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for title
     */
    textColor?: string | null;
    backgroundImage?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
    /**
     * Drag to reorder breadcrumb links
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    breadcrumbTextColor?: string | null;
    breadcrumbLinkColor?: string | null;
    breadcrumbHoverColor?: string | null;
  };
  dropdownSection: {
    backgroundColor?: string | null;
    selectedItemLabel: string;
    /**
     * Drag to reorder dropdown items
     */
    dropdownItems?:
      | {
          label: string;
          url: string;
          isActive?: boolean | null;
          id?: string | null;
        }[]
      | null;
    backButton?: {
      label?: string | null;
      url?: string | null;
      iconClass?: string | null;
    };
    textColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
    borderColor?: string | null;
  };
  gallerySection?: {
    backgroundColor?: string | null;
    /**
     * CSS padding value (e.g., 20px 0)
     */
    sectionPadding?: string | null;
    /**
     * Drag to reorder gallery images
     */
    galleryItems?:
      | {
          image: string | Media;
          /**
           * Use this if image is hosted externally instead of upload
           */
          imageUrl?: string | null;
          /**
           * URL to the individual gallery item page (e.g., /gallery/non-surgical/botox/item/...)
           */
          itemUrl?: string | null;
          altText: string;
          /**
           * Optional patient identifier for alt text
           */
          patientId?: string | null;
          imageNumber?: number | null;
          width?: number | null;
          height?: number | null;
          customCss?: string | null;
          id?: string | null;
        }[]
      | null;
    itemBackgroundColor?: string | null;
    itemBorderColor?: string | null;
    itemHoverEffect?: ('none' | 'scale' | 'opacity' | 'shadow') | null;
  };
  paginationSection?: {
    enabled?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    activePageColor?: string | null;
    activePageBackground?: string | null;
    hoverColor?: string | null;
    currentPage?: number | null;
    totalPages?: number | null;
    /**
     * Base URL without page number (e.g., /gallery/non-surgical/botox/)
     */
    baseUrl?: string | null;
    /**
     * Individual page link configuration
     */
    pages?:
      | {
          pageNumber: number;
          url: string;
          isCurrent?: boolean | null;
          hideOnPhone?: boolean | null;
          id?: string | null;
        }[]
      | null;
    nextButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
    prevButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
  };
  globalStyling?: {
    containerBackgroundColor?: string | null;
    /**
     * CSS max-width value (e.g., 1200px)
     */
    containerMaxWidth?: string | null;
    fontFamily?: string | null;
    primaryColor?: string | null;
    secondaryColor?: string | null;
    /**
     * Additional CSS rules to apply
     */
    customCss?: string | null;
  };
  /**
   * Drag to reorder page sections
   */
  sectionOrder?:
    | {
        sectionType: 'hero' | 'dropdown' | 'gallery' | 'pagination';
        enabled?: boolean | null;
        /**
         * Optional HTML ID attribute
         */
        customId?: string | null;
        customClass?: string | null;
        id?: string | null;
      }[]
    | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaKeywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "RestylaneGallery".
 */
export interface RestylaneGallery {
  id: string;
  /**
   * Name to identify this gallery component
   */
  componentName: string;
  /**
   * URL-friendly identifier (e.g., botox)
   */
  slug: string;
  isActive?: boolean | null;
  heroSection: {
    title: string;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for title
     */
    textColor?: string | null;
    backgroundImage?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
    /**
     * Drag to reorder breadcrumb links
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    breadcrumbTextColor?: string | null;
    breadcrumbLinkColor?: string | null;
    breadcrumbHoverColor?: string | null;
  };
  dropdownSection: {
    backgroundColor?: string | null;
    selectedItemLabel: string;
    /**
     * Drag to reorder dropdown items
     */
    dropdownItems?:
      | {
          label: string;
          url: string;
          isActive?: boolean | null;
          id?: string | null;
        }[]
      | null;
    backButton?: {
      label?: string | null;
      url?: string | null;
      iconClass?: string | null;
    };
    textColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
    borderColor?: string | null;
  };
  gallerySection?: {
    backgroundColor?: string | null;
    /**
     * CSS padding value (e.g., 20px 0)
     */
    sectionPadding?: string | null;
    /**
     * Drag to reorder gallery images
     */
    galleryItems?:
      | {
          image: string | Media;
          /**
           * Use this if image is hosted externally instead of upload
           */
          imageUrl?: string | null;
          /**
           * URL to the individual gallery item page (e.g., /gallery/non-surgical/botox/item/...)
           */
          itemUrl?: string | null;
          altText: string;
          /**
           * Optional patient identifier for alt text
           */
          patientId?: string | null;
          imageNumber?: number | null;
          width?: number | null;
          height?: number | null;
          customCss?: string | null;
          id?: string | null;
        }[]
      | null;
    itemBackgroundColor?: string | null;
    itemBorderColor?: string | null;
    itemHoverEffect?: ('none' | 'scale' | 'opacity' | 'shadow') | null;
  };
  paginationSection?: {
    enabled?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    activePageColor?: string | null;
    activePageBackground?: string | null;
    hoverColor?: string | null;
    currentPage?: number | null;
    totalPages?: number | null;
    /**
     * Base URL without page number (e.g., /gallery/non-surgical/botox/)
     */
    baseUrl?: string | null;
    /**
     * Individual page link configuration
     */
    pages?:
      | {
          pageNumber: number;
          url: string;
          isCurrent?: boolean | null;
          hideOnPhone?: boolean | null;
          id?: string | null;
        }[]
      | null;
    nextButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
    prevButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
  };
  globalStyling?: {
    containerBackgroundColor?: string | null;
    /**
     * CSS max-width value (e.g., 1200px)
     */
    containerMaxWidth?: string | null;
    fontFamily?: string | null;
    primaryColor?: string | null;
    secondaryColor?: string | null;
    /**
     * Additional CSS rules to apply
     */
    customCss?: string | null;
  };
  /**
   * Drag to reorder page sections
   */
  sectionOrder?:
    | {
        sectionType: 'hero' | 'dropdown' | 'gallery' | 'pagination';
        enabled?: boolean | null;
        /**
         * Optional HTML ID attribute
         */
        customId?: string | null;
        customClass?: string | null;
        id?: string | null;
      }[]
    | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaKeywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SkinMedicaGallery".
 */
export interface SkinMedicaGallery {
  id: string;
  /**
   * Name to identify this gallery component
   */
  componentName: string;
  /**
   * URL-friendly identifier (e.g., botox)
   */
  slug: string;
  isActive?: boolean | null;
  heroSection: {
    title: string;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for title
     */
    textColor?: string | null;
    backgroundImage?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
    /**
     * Drag to reorder breadcrumb links
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    breadcrumbTextColor?: string | null;
    breadcrumbLinkColor?: string | null;
    breadcrumbHoverColor?: string | null;
  };
  dropdownSection: {
    backgroundColor?: string | null;
    selectedItemLabel: string;
    /**
     * Drag to reorder dropdown items
     */
    dropdownItems?:
      | {
          label: string;
          url: string;
          isActive?: boolean | null;
          id?: string | null;
        }[]
      | null;
    backButton?: {
      label?: string | null;
      url?: string | null;
      iconClass?: string | null;
    };
    textColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
    borderColor?: string | null;
  };
  gallerySection?: {
    backgroundColor?: string | null;
    /**
     * CSS padding value (e.g., 20px 0)
     */
    sectionPadding?: string | null;
    /**
     * Drag to reorder gallery images
     */
    galleryItems?:
      | {
          image: string | Media;
          /**
           * Use this if image is hosted externally instead of upload
           */
          imageUrl?: string | null;
          /**
           * URL to the individual gallery item page (e.g., /gallery/non-surgical/botox/item/...)
           */
          itemUrl?: string | null;
          altText: string;
          /**
           * Optional patient identifier for alt text
           */
          patientId?: string | null;
          imageNumber?: number | null;
          width?: number | null;
          height?: number | null;
          customCss?: string | null;
          id?: string | null;
        }[]
      | null;
    itemBackgroundColor?: string | null;
    itemBorderColor?: string | null;
    itemHoverEffect?: ('none' | 'scale' | 'opacity' | 'shadow') | null;
  };
  paginationSection?: {
    enabled?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    activePageColor?: string | null;
    activePageBackground?: string | null;
    hoverColor?: string | null;
    currentPage?: number | null;
    totalPages?: number | null;
    /**
     * Base URL without page number (e.g., /gallery/non-surgical/botox/)
     */
    baseUrl?: string | null;
    /**
     * Individual page link configuration
     */
    pages?:
      | {
          pageNumber: number;
          url: string;
          isCurrent?: boolean | null;
          hideOnPhone?: boolean | null;
          id?: string | null;
        }[]
      | null;
    nextButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
    prevButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
  };
  globalStyling?: {
    containerBackgroundColor?: string | null;
    /**
     * CSS max-width value (e.g., 1200px)
     */
    containerMaxWidth?: string | null;
    fontFamily?: string | null;
    primaryColor?: string | null;
    secondaryColor?: string | null;
    /**
     * Additional CSS rules to apply
     */
    customCss?: string | null;
  };
  /**
   * Drag to reorder page sections
   */
  sectionOrder?:
    | {
        sectionType: 'hero' | 'dropdown' | 'gallery' | 'pagination';
        enabled?: boolean | null;
        /**
         * Optional HTML ID attribute
         */
        customId?: string | null;
        customClass?: string | null;
        id?: string | null;
      }[]
    | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaKeywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DermanGalleryHero".
 */
export interface DermanGalleryHero {
  id: string;
  /**
   * Name to identify this gallery component
   */
  componentName: string;
  /**
   * URL-friendly identifier (e.g., botox)
   */
  slug: string;
  isActive?: boolean | null;
  heroSection: {
    title: string;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for title
     */
    textColor?: string | null;
    backgroundImage?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
    /**
     * Drag to reorder breadcrumb links
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    breadcrumbTextColor?: string | null;
    breadcrumbLinkColor?: string | null;
    breadcrumbHoverColor?: string | null;
  };
  dropdownSection: {
    backgroundColor?: string | null;
    selectedItemLabel: string;
    /**
     * Drag to reorder dropdown items
     */
    dropdownItems?:
      | {
          label: string;
          url: string;
          isActive?: boolean | null;
          id?: string | null;
        }[]
      | null;
    backButton?: {
      label?: string | null;
      url?: string | null;
      iconClass?: string | null;
    };
    textColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
    borderColor?: string | null;
  };
  gallerySection?: {
    backgroundColor?: string | null;
    /**
     * CSS padding value (e.g., 20px 0)
     */
    sectionPadding?: string | null;
    /**
     * Drag to reorder gallery images
     */
    galleryItems?:
      | {
          image: string | Media;
          /**
           * Use this if image is hosted externally instead of upload
           */
          imageUrl?: string | null;
          /**
           * URL to the individual gallery item page (e.g., /gallery/non-surgical/botox/item/...)
           */
          itemUrl?: string | null;
          altText: string;
          /**
           * Optional patient identifier for alt text
           */
          patientId?: string | null;
          imageNumber?: number | null;
          width?: number | null;
          height?: number | null;
          customCss?: string | null;
          id?: string | null;
        }[]
      | null;
    itemBackgroundColor?: string | null;
    itemBorderColor?: string | null;
    itemHoverEffect?: ('none' | 'scale' | 'opacity' | 'shadow') | null;
  };
  paginationSection?: {
    enabled?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    activePageColor?: string | null;
    activePageBackground?: string | null;
    hoverColor?: string | null;
    currentPage?: number | null;
    totalPages?: number | null;
    /**
     * Base URL without page number (e.g., /gallery/non-surgical/botox/)
     */
    baseUrl?: string | null;
    /**
     * Individual page link configuration
     */
    pages?:
      | {
          pageNumber: number;
          url: string;
          isCurrent?: boolean | null;
          hideOnPhone?: boolean | null;
          id?: string | null;
        }[]
      | null;
    nextButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
    prevButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
  };
  globalStyling?: {
    containerBackgroundColor?: string | null;
    /**
     * CSS max-width value (e.g., 1200px)
     */
    containerMaxWidth?: string | null;
    fontFamily?: string | null;
    primaryColor?: string | null;
    secondaryColor?: string | null;
    /**
     * Additional CSS rules to apply
     */
    customCss?: string | null;
  };
  /**
   * Drag to reorder page sections
   */
  sectionOrder?:
    | {
        sectionType: 'hero' | 'dropdown' | 'gallery' | 'pagination';
        enabled?: boolean | null;
        /**
         * Optional HTML ID attribute
         */
        customId?: string | null;
        customClass?: string | null;
        id?: string | null;
      }[]
    | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaKeywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CheekContourGallery".
 */
export interface CheekContourGallery {
  id: string;
  /**
   * Name to identify this gallery component
   */
  componentName: string;
  /**
   * URL-friendly identifier (e.g., botox)
   */
  slug: string;
  isActive?: boolean | null;
  heroSection: {
    title: string;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for title
     */
    textColor?: string | null;
    backgroundImage?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
    /**
     * Drag to reorder breadcrumb links
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    breadcrumbTextColor?: string | null;
    breadcrumbLinkColor?: string | null;
    breadcrumbHoverColor?: string | null;
  };
  dropdownSection: {
    backgroundColor?: string | null;
    selectedItemLabel: string;
    /**
     * Drag to reorder dropdown items
     */
    dropdownItems?:
      | {
          label: string;
          url: string;
          isActive?: boolean | null;
          id?: string | null;
        }[]
      | null;
    backButton?: {
      label?: string | null;
      url?: string | null;
      iconClass?: string | null;
    };
    textColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
    borderColor?: string | null;
  };
  gallerySection?: {
    backgroundColor?: string | null;
    /**
     * CSS padding value (e.g., 20px 0)
     */
    sectionPadding?: string | null;
    /**
     * Drag to reorder gallery images
     */
    galleryItems?:
      | {
          image: string | Media;
          /**
           * Use this if image is hosted externally instead of upload
           */
          imageUrl?: string | null;
          /**
           * URL to the individual gallery item page (e.g., /gallery/non-surgical/botox/item/...)
           */
          itemUrl?: string | null;
          altText: string;
          /**
           * Optional patient identifier for alt text
           */
          patientId?: string | null;
          imageNumber?: number | null;
          width?: number | null;
          height?: number | null;
          customCss?: string | null;
          id?: string | null;
        }[]
      | null;
    itemBackgroundColor?: string | null;
    itemBorderColor?: string | null;
    itemHoverEffect?: ('none' | 'scale' | 'opacity' | 'shadow') | null;
  };
  paginationSection?: {
    enabled?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    activePageColor?: string | null;
    activePageBackground?: string | null;
    hoverColor?: string | null;
    currentPage?: number | null;
    totalPages?: number | null;
    /**
     * Base URL without page number (e.g., /gallery/non-surgical/botox/)
     */
    baseUrl?: string | null;
    /**
     * Individual page link configuration
     */
    pages?:
      | {
          pageNumber: number;
          url: string;
          isCurrent?: boolean | null;
          hideOnPhone?: boolean | null;
          id?: string | null;
        }[]
      | null;
    nextButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
    prevButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
  };
  globalStyling?: {
    containerBackgroundColor?: string | null;
    /**
     * CSS max-width value (e.g., 1200px)
     */
    containerMaxWidth?: string | null;
    fontFamily?: string | null;
    primaryColor?: string | null;
    secondaryColor?: string | null;
    /**
     * Additional CSS rules to apply
     */
    customCss?: string | null;
  };
  /**
   * Drag to reorder page sections
   */
  sectionOrder?:
    | {
        sectionType: 'hero' | 'dropdown' | 'gallery' | 'pagination';
        enabled?: boolean | null;
        /**
         * Optional HTML ID attribute
         */
        customId?: string | null;
        customClass?: string | null;
        id?: string | null;
      }[]
    | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaKeywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LiquidChinJawGallery".
 */
export interface LiquidChinJawGallery {
  id: string;
  /**
   * Name to identify this gallery component
   */
  componentName: string;
  /**
   * URL-friendly identifier (e.g., botox)
   */
  slug: string;
  isActive?: boolean | null;
  heroSection: {
    title: string;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for title
     */
    textColor?: string | null;
    backgroundImage?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
    /**
     * Drag to reorder breadcrumb links
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    breadcrumbTextColor?: string | null;
    breadcrumbLinkColor?: string | null;
    breadcrumbHoverColor?: string | null;
  };
  dropdownSection: {
    backgroundColor?: string | null;
    selectedItemLabel: string;
    /**
     * Drag to reorder dropdown items
     */
    dropdownItems?:
      | {
          label: string;
          url: string;
          isActive?: boolean | null;
          id?: string | null;
        }[]
      | null;
    backButton?: {
      label?: string | null;
      url?: string | null;
      iconClass?: string | null;
    };
    textColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
    borderColor?: string | null;
  };
  gallerySection?: {
    backgroundColor?: string | null;
    /**
     * CSS padding value (e.g., 20px 0)
     */
    sectionPadding?: string | null;
    /**
     * Drag to reorder gallery images
     */
    galleryItems?:
      | {
          image: string | Media;
          /**
           * Use this if image is hosted externally instead of upload
           */
          imageUrl?: string | null;
          /**
           * URL to the individual gallery item page (e.g., /gallery/non-surgical/botox/item/...)
           */
          itemUrl?: string | null;
          altText: string;
          /**
           * Optional patient identifier for alt text
           */
          patientId?: string | null;
          imageNumber?: number | null;
          width?: number | null;
          height?: number | null;
          customCss?: string | null;
          id?: string | null;
        }[]
      | null;
    itemBackgroundColor?: string | null;
    itemBorderColor?: string | null;
    itemHoverEffect?: ('none' | 'scale' | 'opacity' | 'shadow') | null;
  };
  paginationSection?: {
    enabled?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    activePageColor?: string | null;
    activePageBackground?: string | null;
    hoverColor?: string | null;
    currentPage?: number | null;
    totalPages?: number | null;
    /**
     * Base URL without page number (e.g., /gallery/non-surgical/botox/)
     */
    baseUrl?: string | null;
    /**
     * Individual page link configuration
     */
    pages?:
      | {
          pageNumber: number;
          url: string;
          isCurrent?: boolean | null;
          hideOnPhone?: boolean | null;
          id?: string | null;
        }[]
      | null;
    nextButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
    prevButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
  };
  globalStyling?: {
    containerBackgroundColor?: string | null;
    /**
     * CSS max-width value (e.g., 1200px)
     */
    containerMaxWidth?: string | null;
    fontFamily?: string | null;
    primaryColor?: string | null;
    secondaryColor?: string | null;
    /**
     * Additional CSS rules to apply
     */
    customCss?: string | null;
  };
  /**
   * Drag to reorder page sections
   */
  sectionOrder?:
    | {
        sectionType: 'hero' | 'dropdown' | 'gallery' | 'pagination';
        enabled?: boolean | null;
        /**
         * Optional HTML ID attribute
         */
        customId?: string | null;
        customClass?: string | null;
        id?: string | null;
      }[]
    | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaKeywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LiquidRhinoplastyGallery".
 */
export interface LiquidRhinoplastyGallery {
  id: string;
  /**
   * Name to identify this gallery component
   */
  componentName: string;
  /**
   * URL-friendly identifier (e.g., botox)
   */
  slug: string;
  isActive?: boolean | null;
  heroSection: {
    title: string;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for title
     */
    textColor?: string | null;
    backgroundImage?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
    /**
     * Drag to reorder breadcrumb links
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    breadcrumbTextColor?: string | null;
    breadcrumbLinkColor?: string | null;
    breadcrumbHoverColor?: string | null;
  };
  dropdownSection: {
    backgroundColor?: string | null;
    selectedItemLabel: string;
    /**
     * Drag to reorder dropdown items
     */
    dropdownItems?:
      | {
          label: string;
          url: string;
          isActive?: boolean | null;
          id?: string | null;
        }[]
      | null;
    backButton?: {
      label?: string | null;
      url?: string | null;
      iconClass?: string | null;
    };
    textColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
    borderColor?: string | null;
  };
  gallerySection?: {
    backgroundColor?: string | null;
    /**
     * CSS padding value (e.g., 20px 0)
     */
    sectionPadding?: string | null;
    /**
     * Drag to reorder gallery images
     */
    galleryItems?:
      | {
          image: string | Media;
          /**
           * Use this if image is hosted externally instead of upload
           */
          imageUrl?: string | null;
          /**
           * URL to the individual gallery item page (e.g., /gallery/non-surgical/botox/item/...)
           */
          itemUrl?: string | null;
          altText: string;
          /**
           * Optional patient identifier for alt text
           */
          patientId?: string | null;
          imageNumber?: number | null;
          width?: number | null;
          height?: number | null;
          customCss?: string | null;
          id?: string | null;
        }[]
      | null;
    itemBackgroundColor?: string | null;
    itemBorderColor?: string | null;
    itemHoverEffect?: ('none' | 'scale' | 'opacity' | 'shadow') | null;
  };
  paginationSection?: {
    enabled?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    activePageColor?: string | null;
    activePageBackground?: string | null;
    hoverColor?: string | null;
    currentPage?: number | null;
    totalPages?: number | null;
    /**
     * Base URL without page number (e.g., /gallery/non-surgical/botox/)
     */
    baseUrl?: string | null;
    /**
     * Individual page link configuration
     */
    pages?:
      | {
          pageNumber: number;
          url: string;
          isCurrent?: boolean | null;
          hideOnPhone?: boolean | null;
          id?: string | null;
        }[]
      | null;
    nextButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
    prevButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
  };
  globalStyling?: {
    containerBackgroundColor?: string | null;
    /**
     * CSS max-width value (e.g., 1200px)
     */
    containerMaxWidth?: string | null;
    fontFamily?: string | null;
    primaryColor?: string | null;
    secondaryColor?: string | null;
    /**
     * Additional CSS rules to apply
     */
    customCss?: string | null;
  };
  /**
   * Drag to reorder page sections
   */
  sectionOrder?:
    | {
        sectionType: 'hero' | 'dropdown' | 'gallery' | 'pagination';
        enabled?: boolean | null;
        /**
         * Optional HTML ID attribute
         */
        customId?: string | null;
        customClass?: string | null;
        id?: string | null;
      }[]
    | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaKeywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MarionetteLineGallery".
 */
export interface MarionetteLineGallery {
  id: string;
  /**
   * Name to identify this gallery component
   */
  componentName: string;
  /**
   * URL-friendly identifier (e.g., botox)
   */
  slug: string;
  isActive?: boolean | null;
  heroSection: {
    title: string;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for title
     */
    textColor?: string | null;
    backgroundImage?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
    /**
     * Drag to reorder breadcrumb links
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    breadcrumbTextColor?: string | null;
    breadcrumbLinkColor?: string | null;
    breadcrumbHoverColor?: string | null;
  };
  dropdownSection: {
    backgroundColor?: string | null;
    selectedItemLabel: string;
    /**
     * Drag to reorder dropdown items
     */
    dropdownItems?:
      | {
          label: string;
          url: string;
          isActive?: boolean | null;
          id?: string | null;
        }[]
      | null;
    backButton?: {
      label?: string | null;
      url?: string | null;
      iconClass?: string | null;
    };
    textColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
    borderColor?: string | null;
  };
  gallerySection?: {
    backgroundColor?: string | null;
    /**
     * CSS padding value (e.g., 20px 0)
     */
    sectionPadding?: string | null;
    /**
     * Drag to reorder gallery images
     */
    galleryItems?:
      | {
          image: string | Media;
          /**
           * Use this if image is hosted externally instead of upload
           */
          imageUrl?: string | null;
          /**
           * URL to the individual gallery item page (e.g., /gallery/non-surgical/botox/item/...)
           */
          itemUrl?: string | null;
          altText: string;
          /**
           * Optional patient identifier for alt text
           */
          patientId?: string | null;
          imageNumber?: number | null;
          width?: number | null;
          height?: number | null;
          customCss?: string | null;
          id?: string | null;
        }[]
      | null;
    itemBackgroundColor?: string | null;
    itemBorderColor?: string | null;
    itemHoverEffect?: ('none' | 'scale' | 'opacity' | 'shadow') | null;
  };
  paginationSection?: {
    enabled?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    activePageColor?: string | null;
    activePageBackground?: string | null;
    hoverColor?: string | null;
    currentPage?: number | null;
    totalPages?: number | null;
    /**
     * Base URL without page number (e.g., /gallery/non-surgical/botox/)
     */
    baseUrl?: string | null;
    /**
     * Individual page link configuration
     */
    pages?:
      | {
          pageNumber: number;
          url: string;
          isCurrent?: boolean | null;
          hideOnPhone?: boolean | null;
          id?: string | null;
        }[]
      | null;
    nextButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
    prevButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
  };
  globalStyling?: {
    containerBackgroundColor?: string | null;
    /**
     * CSS max-width value (e.g., 1200px)
     */
    containerMaxWidth?: string | null;
    fontFamily?: string | null;
    primaryColor?: string | null;
    secondaryColor?: string | null;
    /**
     * Additional CSS rules to apply
     */
    customCss?: string | null;
  };
  /**
   * Drag to reorder page sections
   */
  sectionOrder?:
    | {
        sectionType: 'hero' | 'dropdown' | 'gallery' | 'pagination';
        enabled?: boolean | null;
        /**
         * Optional HTML ID attribute
         */
        customId?: string | null;
        customClass?: string | null;
        id?: string | null;
      }[]
    | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaKeywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LiquidFaceliftGallery".
 */
export interface LiquidFaceliftGallery {
  id: string;
  /**
   * Name to identify this gallery component
   */
  componentName: string;
  /**
   * URL-friendly identifier (e.g., botox)
   */
  slug: string;
  isActive?: boolean | null;
  heroSection: {
    title: string;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for title
     */
    textColor?: string | null;
    backgroundImage?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
    /**
     * Drag to reorder breadcrumb links
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    breadcrumbTextColor?: string | null;
    breadcrumbLinkColor?: string | null;
    breadcrumbHoverColor?: string | null;
  };
  dropdownSection: {
    backgroundColor?: string | null;
    selectedItemLabel: string;
    /**
     * Drag to reorder dropdown items
     */
    dropdownItems?:
      | {
          label: string;
          url: string;
          isActive?: boolean | null;
          id?: string | null;
        }[]
      | null;
    backButton?: {
      label?: string | null;
      url?: string | null;
      iconClass?: string | null;
    };
    textColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
    borderColor?: string | null;
  };
  gallerySection?: {
    backgroundColor?: string | null;
    /**
     * CSS padding value (e.g., 20px 0)
     */
    sectionPadding?: string | null;
    /**
     * Drag to reorder gallery images
     */
    galleryItems?:
      | {
          image: string | Media;
          /**
           * Use this if image is hosted externally instead of upload
           */
          imageUrl?: string | null;
          /**
           * URL to the individual gallery item page (e.g., /gallery/non-surgical/botox/item/...)
           */
          itemUrl?: string | null;
          altText: string;
          /**
           * Optional patient identifier for alt text
           */
          patientId?: string | null;
          imageNumber?: number | null;
          width?: number | null;
          height?: number | null;
          customCss?: string | null;
          id?: string | null;
        }[]
      | null;
    itemBackgroundColor?: string | null;
    itemBorderColor?: string | null;
    itemHoverEffect?: ('none' | 'scale' | 'opacity' | 'shadow') | null;
  };
  paginationSection?: {
    enabled?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    activePageColor?: string | null;
    activePageBackground?: string | null;
    hoverColor?: string | null;
    currentPage?: number | null;
    totalPages?: number | null;
    /**
     * Base URL without page number (e.g., /gallery/non-surgical/botox/)
     */
    baseUrl?: string | null;
    /**
     * Individual page link configuration
     */
    pages?:
      | {
          pageNumber: number;
          url: string;
          isCurrent?: boolean | null;
          hideOnPhone?: boolean | null;
          id?: string | null;
        }[]
      | null;
    nextButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
    prevButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
  };
  globalStyling?: {
    containerBackgroundColor?: string | null;
    /**
     * CSS max-width value (e.g., 1200px)
     */
    containerMaxWidth?: string | null;
    fontFamily?: string | null;
    primaryColor?: string | null;
    secondaryColor?: string | null;
    /**
     * Additional CSS rules to apply
     */
    customCss?: string | null;
  };
  /**
   * Drag to reorder page sections
   */
  sectionOrder?:
    | {
        sectionType: 'hero' | 'dropdown' | 'gallery' | 'pagination';
        enabled?: boolean | null;
        /**
         * Optional HTML ID attribute
         */
        customId?: string | null;
        customClass?: string | null;
        id?: string | null;
      }[]
    | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaKeywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "WeightLossGallery".
 */
export interface WeightLossGallery {
  id: string;
  /**
   * Name to identify this gallery component
   */
  componentName: string;
  /**
   * URL-friendly identifier (e.g., botox)
   */
  slug: string;
  isActive?: boolean | null;
  heroSection: {
    title: string;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for title
     */
    textColor?: string | null;
    backgroundImage?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
    /**
     * Drag to reorder breadcrumb links
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    breadcrumbTextColor?: string | null;
    breadcrumbLinkColor?: string | null;
    breadcrumbHoverColor?: string | null;
  };
  dropdownSection: {
    backgroundColor?: string | null;
    selectedItemLabel: string;
    /**
     * Drag to reorder dropdown items
     */
    dropdownItems?:
      | {
          label: string;
          url: string;
          isActive?: boolean | null;
          id?: string | null;
        }[]
      | null;
    backButton?: {
      label?: string | null;
      url?: string | null;
      iconClass?: string | null;
    };
    textColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
    borderColor?: string | null;
  };
  gallerySection?: {
    backgroundColor?: string | null;
    /**
     * CSS padding value (e.g., 20px 0)
     */
    sectionPadding?: string | null;
    /**
     * Drag to reorder gallery images
     */
    galleryItems?:
      | {
          image: string | Media;
          /**
           * Use this if image is hosted externally instead of upload
           */
          imageUrl?: string | null;
          /**
           * URL to the individual gallery item page (e.g., /gallery/non-surgical/botox/item/...)
           */
          itemUrl?: string | null;
          altText: string;
          /**
           * Optional patient identifier for alt text
           */
          patientId?: string | null;
          imageNumber?: number | null;
          width?: number | null;
          height?: number | null;
          customCss?: string | null;
          id?: string | null;
        }[]
      | null;
    itemBackgroundColor?: string | null;
    itemBorderColor?: string | null;
    itemHoverEffect?: ('none' | 'scale' | 'opacity' | 'shadow') | null;
  };
  paginationSection?: {
    enabled?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    activePageColor?: string | null;
    activePageBackground?: string | null;
    hoverColor?: string | null;
    currentPage?: number | null;
    totalPages?: number | null;
    /**
     * Base URL without page number (e.g., /gallery/non-surgical/botox/)
     */
    baseUrl?: string | null;
    /**
     * Individual page link configuration
     */
    pages?:
      | {
          pageNumber: number;
          url: string;
          isCurrent?: boolean | null;
          hideOnPhone?: boolean | null;
          id?: string | null;
        }[]
      | null;
    nextButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
    prevButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
  };
  globalStyling?: {
    containerBackgroundColor?: string | null;
    /**
     * CSS max-width value (e.g., 1200px)
     */
    containerMaxWidth?: string | null;
    fontFamily?: string | null;
    primaryColor?: string | null;
    secondaryColor?: string | null;
    /**
     * Additional CSS rules to apply
     */
    customCss?: string | null;
  };
  /**
   * Drag to reorder page sections
   */
  sectionOrder?:
    | {
        sectionType: 'hero' | 'dropdown' | 'gallery' | 'pagination';
        enabled?: boolean | null;
        /**
         * Optional HTML ID attribute
         */
        customId?: string | null;
        customClass?: string | null;
        id?: string | null;
      }[]
    | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaKeywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LashExtensionsGallery".
 */
export interface LashExtensionsGallery {
  id: string;
  /**
   * Name to identify this gallery component
   */
  componentName: string;
  /**
   * URL-friendly identifier (e.g., botox)
   */
  slug: string;
  isActive?: boolean | null;
  heroSection: {
    title: string;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for title
     */
    textColor?: string | null;
    backgroundImage?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
    /**
     * Drag to reorder breadcrumb links
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    breadcrumbTextColor?: string | null;
    breadcrumbLinkColor?: string | null;
    breadcrumbHoverColor?: string | null;
  };
  dropdownSection: {
    backgroundColor?: string | null;
    selectedItemLabel: string;
    /**
     * Drag to reorder dropdown items
     */
    dropdownItems?:
      | {
          label: string;
          url: string;
          isActive?: boolean | null;
          id?: string | null;
        }[]
      | null;
    backButton?: {
      label?: string | null;
      url?: string | null;
      iconClass?: string | null;
    };
    textColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
    borderColor?: string | null;
  };
  gallerySection?: {
    backgroundColor?: string | null;
    /**
     * CSS padding value (e.g., 20px 0)
     */
    sectionPadding?: string | null;
    /**
     * Drag to reorder gallery images
     */
    galleryItems?:
      | {
          image: string | Media;
          /**
           * Use this if image is hosted externally instead of upload
           */
          imageUrl?: string | null;
          /**
           * URL to the individual gallery item page (e.g., /gallery/non-surgical/botox/item/...)
           */
          itemUrl?: string | null;
          altText: string;
          /**
           * Optional patient identifier for alt text
           */
          patientId?: string | null;
          imageNumber?: number | null;
          width?: number | null;
          height?: number | null;
          customCss?: string | null;
          id?: string | null;
        }[]
      | null;
    itemBackgroundColor?: string | null;
    itemBorderColor?: string | null;
    itemHoverEffect?: ('none' | 'scale' | 'opacity' | 'shadow') | null;
  };
  paginationSection?: {
    enabled?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    activePageColor?: string | null;
    activePageBackground?: string | null;
    hoverColor?: string | null;
    currentPage?: number | null;
    totalPages?: number | null;
    /**
     * Base URL without page number (e.g., /gallery/non-surgical/botox/)
     */
    baseUrl?: string | null;
    /**
     * Individual page link configuration
     */
    pages?:
      | {
          pageNumber: number;
          url: string;
          isCurrent?: boolean | null;
          hideOnPhone?: boolean | null;
          id?: string | null;
        }[]
      | null;
    nextButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
    prevButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
  };
  globalStyling?: {
    containerBackgroundColor?: string | null;
    /**
     * CSS max-width value (e.g., 1200px)
     */
    containerMaxWidth?: string | null;
    fontFamily?: string | null;
    primaryColor?: string | null;
    secondaryColor?: string | null;
    /**
     * Additional CSS rules to apply
     */
    customCss?: string | null;
  };
  /**
   * Drag to reorder page sections
   */
  sectionOrder?:
    | {
        sectionType: 'hero' | 'dropdown' | 'gallery' | 'pagination';
        enabled?: boolean | null;
        /**
         * Optional HTML ID attribute
         */
        customId?: string | null;
        customClass?: string | null;
        id?: string | null;
      }[]
    | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaKeywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "surgical-gallery-component".
 */
export interface SurgicalGalleryComponent {
  id: string;
  componentName: string;
  /**
   * Drag to reorder sections on the page
   */
  sections?:
    | {
        sectionType: 'galleryHero' | 'galleryIndex' | 'ageRestriction';
        /**
         * Unique identifier for this section (optional)
         */
        sectionId?: string | null;
        galleryHeroSection?: {
          /**
           * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
           */
          backgroundColor?: string | null;
          backgroundImage?: {
            mobile?: (string | null) | Media;
            tablet?: (string | null) | Media;
            desktop?: (string | null) | Media;
            large?: (string | null) | Media;
            alt?: string | null;
            width?: number | null;
            height?: number | null;
          };
          title: string;
          /**
           * CSS color value
           */
          titleColor?: string | null;
          /**
           * Drag to reorder breadcrumb items
           */
          breadcrumbs?:
            | {
                label: string;
                url: string;
                ariaLabel?: string | null;
                id?: string | null;
              }[]
            | null;
          /**
           * Space-separated CSS classes (e.g., banner bg)
           */
          cssClasses?: string | null;
        };
        galleryIndexSection?: {
          /**
           * CSS color value
           */
          backgroundColor?: string | null;
          /**
           * CSS color value
           */
          textColor?: string | null;
          containerWidth?: ('container' | 'wide' | 'narrow') | null;
          /**
           * Drag to reorder category items
           */
          categoryGroups?:
            | {
                /**
                 * Display name for the category (e.g., Tummy Tuck)
                 */
                categoryName: string;
                /**
                 * URL-friendly slug and CSS class (e.g., tummy-tuck)
                 */
                categorySlug: string;
                /**
                 * Full URL to the category page
                 */
                url: string;
                /**
                 * Override color for this category heading
                 */
                headingColor?: string | null;
                /**
                 * Color for the link
                 */
                linkColor?: string | null;
                /**
                 * Color when hovering over the link
                 */
                linkHoverColor?: string | null;
                /**
                 * Background color for this category group
                 */
                backgroundColor?: string | null;
                /**
                 * Border color for this category group (optional)
                 */
                borderColor?: string | null;
                /**
                 * CSS padding value (e.g., 20px, 1rem 2rem)
                 */
                padding?: string | null;
                /**
                 * CSS margin value (e.g., 20px, 1rem 2rem)
                 */
                margin?: string | null;
                id?: string | null;
              }[]
            | null;
          /**
           * Space-separated CSS classes (e.g., sub-index)
           */
          cssClasses?: string | null;
        };
        ageRestrictionSection?: {
          /**
           * Show age restriction popup when enabled
           */
          enabled?: boolean | null;
          /**
           * Start with popup hidden (controlled by JS)
           */
          isHidden?: boolean | null;
          /**
           * Background color of the popup
           */
          popupBackgroundColor?: string | null;
          /**
           * Color of text in the popup
           */
          popupTextColor?: string | null;
          /**
           * Border color of the popup (optional)
           */
          popupBorderColor?: string | null;
          /**
           * Border radius (e.g., 8px, 1rem)
           */
          popupBorderRadius?: string | null;
          /**
           * Padding inside the popup (e.g., 40px, 2rem)
           */
          popupPadding?: string | null;
          /**
           * Background color of the overlay (e.g., rgba(0,0,0,0.8))
           */
          overlayBackgroundColor?: string | null;
          heading?: string | null;
          /**
           * Color for the heading text
           */
          headingColor?: string | null;
          /**
           * Font size for heading (e.g., 24px, 1.5rem)
           */
          headingFontSize?: string | null;
          /**
           * The warning message displayed to users
           */
          message: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          /**
           * Font size for message (e.g., 16px, 1rem)
           */
          messageFontSize?: string | null;
          buttonText?: string | null;
          buttonBackgroundColor?: string | null;
          buttonTextColor?: string | null;
          buttonHoverBackgroundColor?: string | null;
          buttonHoverTextColor?: string | null;
          buttonBorderColor?: string | null;
          /**
           * Border radius for button (e.g., 4px, 0.5rem)
           */
          buttonBorderRadius?: string | null;
          /**
           * Padding inside button (e.g., 10px 20px)
           */
          buttonPadding?: string | null;
          showCloseButton?: boolean | null;
          /**
           * Color of the close button (X)
           */
          closeButtonColor?: string | null;
          closeButtonHoverColor?: string | null;
          /**
           * Size of close button (e.g., 30px, 2rem)
           */
          closeButtonSize?: string | null;
          /**
           * Space-separated CSS classes
           */
          cssClasses?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Main brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default color for all links
     */
    linkColor?: string | null;
    /**
     * Default hover color for all links
     */
    linkHoverColor?: string | null;
    /**
     * Default font size for h2 headings (e.g., 32px, 2rem)
     */
    headingFontSize?: string | null;
    /**
     * Default font size for body text (e.g., 16px, 1rem)
     */
    bodyFontSize?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    ogImage?: (string | null) | Media;
    canonicalUrl?: string | null;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tummyTuckPage".
 */
export interface TummyTuckPage {
  id: string;
  /**
   * Name to identify this gallery component
   */
  componentName: string;
  /**
   * URL-friendly identifier (e.g., tummy-tuck)
   */
  slug: string;
  isActive?: boolean | null;
  heroSection: {
    title: string;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for title
     */
    textColor?: string | null;
    backgroundImage?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
    /**
     * Drag to reorder breadcrumb links
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    breadcrumbTextColor?: string | null;
    breadcrumbLinkColor?: string | null;
    breadcrumbHoverColor?: string | null;
  };
  dropdownSection: {
    backgroundColor?: string | null;
    selectedItemLabel: string;
    /**
     * Drag to reorder dropdown items
     */
    dropdownItems?:
      | {
          label: string;
          url: string;
          isActive?: boolean | null;
          id?: string | null;
        }[]
      | null;
    backButton?: {
      label?: string | null;
      url?: string | null;
      iconClass?: string | null;
    };
    textColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
    borderColor?: string | null;
  };
  gallerySection?: {
    backgroundColor?: string | null;
    /**
     * CSS padding value (e.g., 20px 0)
     */
    sectionPadding?: string | null;
    /**
     * Drag to reorder gallery items. Each item contains before and after images.
     */
    galleryItems?:
      | {
          /**
           * URL to the individual gallery item page (e.g., /gallery/surgical/tummy-tuck/item/175151533/)
           */
          itemUrl?: string | null;
          /**
           * Patient identifier (e.g., 175151533)
           */
          patientId?: string | null;
          beforeImage: {
            image: string | Media;
            /**
             * Use this if image is hosted externally instead of upload
             */
            imageUrl?: string | null;
            /**
             * e.g., "Tummy Tuck Before & After Gallery - Patient 175151533 - Image 1"
             */
            altText: string;
            width?: number | null;
            height?: number | null;
          };
          afterImage: {
            image: string | Media;
            /**
             * Use this if image is hosted externally instead of upload
             */
            imageUrl?: string | null;
            /**
             * e.g., "Tummy Tuck Before & After Gallery - Patient 175151533 - Image 2"
             */
            altText: string;
            width?: number | null;
            height?: number | null;
          };
          customCss?: string | null;
          id?: string | null;
        }[]
      | null;
    itemBackgroundColor?: string | null;
    itemBorderColor?: string | null;
    itemHoverEffect?: ('none' | 'scale' | 'opacity' | 'shadow') | null;
  };
  paginationSection?: {
    enabled?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    activePageColor?: string | null;
    activePageBackground?: string | null;
    hoverColor?: string | null;
    currentPage?: number | null;
    totalPages?: number | null;
    /**
     * Base URL without page number (e.g., /gallery/surgical/tummy-tuck/)
     */
    baseUrl?: string | null;
    /**
     * Individual page link configuration
     */
    pages?:
      | {
          pageNumber: number;
          url: string;
          isCurrent?: boolean | null;
          hideOnPhone?: boolean | null;
          id?: string | null;
        }[]
      | null;
    nextButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
    prevButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
  };
  globalStyling?: {
    containerBackgroundColor?: string | null;
    /**
     * CSS max-width value (e.g., 1200px)
     */
    containerMaxWidth?: string | null;
    fontFamily?: string | null;
    primaryColor?: string | null;
    secondaryColor?: string | null;
    /**
     * Additional CSS rules to apply
     */
    customCss?: string | null;
  };
  /**
   * Drag to reorder page sections
   */
  sectionOrder?:
    | {
        sectionType: 'hero' | 'dropdown' | 'gallery' | 'pagination';
        enabled?: boolean | null;
        /**
         * Optional HTML ID attribute
         */
        customId?: string | null;
        customClass?: string | null;
        id?: string | null;
      }[]
    | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaKeywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MommyMakeoverGallery".
 */
export interface MommyMakeoverGallery {
  id: string;
  /**
   * Name to identify this gallery component
   */
  componentName: string;
  /**
   * URL-friendly identifier (e.g., tummy-tuck)
   */
  slug: string;
  isActive?: boolean | null;
  heroSection: {
    title: string;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for title
     */
    textColor?: string | null;
    backgroundImage?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
    /**
     * Drag to reorder breadcrumb links
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    breadcrumbTextColor?: string | null;
    breadcrumbLinkColor?: string | null;
    breadcrumbHoverColor?: string | null;
  };
  dropdownSection: {
    backgroundColor?: string | null;
    selectedItemLabel: string;
    /**
     * Drag to reorder dropdown items
     */
    dropdownItems?:
      | {
          label: string;
          url: string;
          isActive?: boolean | null;
          id?: string | null;
        }[]
      | null;
    backButton?: {
      label?: string | null;
      url?: string | null;
      iconClass?: string | null;
    };
    textColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
    borderColor?: string | null;
  };
  gallerySection?: {
    backgroundColor?: string | null;
    /**
     * CSS padding value (e.g., 20px 0)
     */
    sectionPadding?: string | null;
    /**
     * Drag to reorder gallery items. Each item contains before and after images.
     */
    galleryItems?:
      | {
          /**
           * URL to the individual gallery item page (e.g., /gallery/surgical/tummy-tuck/item/175151533/)
           */
          itemUrl?: string | null;
          /**
           * Patient identifier (e.g., 175151533)
           */
          patientId?: string | null;
          beforeImage: {
            image: string | Media;
            /**
             * Use this if image is hosted externally instead of upload
             */
            imageUrl?: string | null;
            /**
             * e.g., "Tummy Tuck Before & After Gallery - Patient 175151533 - Image 1"
             */
            altText: string;
            width?: number | null;
            height?: number | null;
          };
          afterImage: {
            image: string | Media;
            /**
             * Use this if image is hosted externally instead of upload
             */
            imageUrl?: string | null;
            /**
             * e.g., "Tummy Tuck Before & After Gallery - Patient 175151533 - Image 2"
             */
            altText: string;
            width?: number | null;
            height?: number | null;
          };
          customCss?: string | null;
          id?: string | null;
        }[]
      | null;
    itemBackgroundColor?: string | null;
    itemBorderColor?: string | null;
    itemHoverEffect?: ('none' | 'scale' | 'opacity' | 'shadow') | null;
  };
  paginationSection?: {
    enabled?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    activePageColor?: string | null;
    activePageBackground?: string | null;
    hoverColor?: string | null;
    currentPage?: number | null;
    totalPages?: number | null;
    /**
     * Base URL without page number (e.g., /gallery/surgical/tummy-tuck/)
     */
    baseUrl?: string | null;
    /**
     * Individual page link configuration
     */
    pages?:
      | {
          pageNumber: number;
          url: string;
          isCurrent?: boolean | null;
          hideOnPhone?: boolean | null;
          id?: string | null;
        }[]
      | null;
    nextButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
    prevButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
  };
  globalStyling?: {
    containerBackgroundColor?: string | null;
    /**
     * CSS max-width value (e.g., 1200px)
     */
    containerMaxWidth?: string | null;
    fontFamily?: string | null;
    primaryColor?: string | null;
    secondaryColor?: string | null;
    /**
     * Additional CSS rules to apply
     */
    customCss?: string | null;
  };
  /**
   * Drag to reorder page sections
   */
  sectionOrder?:
    | {
        sectionType: 'hero' | 'dropdown' | 'gallery' | 'pagination';
        enabled?: boolean | null;
        /**
         * Optional HTML ID attribute
         */
        customId?: string | null;
        customClass?: string | null;
        id?: string | null;
      }[]
    | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaKeywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LiposuctionGallery".
 */
export interface LiposuctionGallery {
  id: string;
  /**
   * Name to identify this gallery component
   */
  componentName: string;
  /**
   * URL-friendly identifier (e.g., tummy-tuck)
   */
  slug: string;
  isActive?: boolean | null;
  heroSection: {
    title: string;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for title
     */
    textColor?: string | null;
    backgroundImage?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
    /**
     * Drag to reorder breadcrumb links
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    breadcrumbTextColor?: string | null;
    breadcrumbLinkColor?: string | null;
    breadcrumbHoverColor?: string | null;
  };
  dropdownSection: {
    backgroundColor?: string | null;
    selectedItemLabel: string;
    /**
     * Drag to reorder dropdown items
     */
    dropdownItems?:
      | {
          label: string;
          url: string;
          isActive?: boolean | null;
          id?: string | null;
        }[]
      | null;
    backButton?: {
      label?: string | null;
      url?: string | null;
      iconClass?: string | null;
    };
    textColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
    borderColor?: string | null;
  };
  gallerySection?: {
    backgroundColor?: string | null;
    /**
     * CSS padding value (e.g., 20px 0)
     */
    sectionPadding?: string | null;
    /**
     * Drag to reorder gallery items. Each item contains before and after images.
     */
    galleryItems?:
      | {
          /**
           * URL to the individual gallery item page (e.g., /gallery/surgical/tummy-tuck/item/175151533/)
           */
          itemUrl?: string | null;
          /**
           * Patient identifier (e.g., 175151533)
           */
          patientId?: string | null;
          beforeImage: {
            image: string | Media;
            /**
             * Use this if image is hosted externally instead of upload
             */
            imageUrl?: string | null;
            /**
             * e.g., "Tummy Tuck Before & After Gallery - Patient 175151533 - Image 1"
             */
            altText: string;
            width?: number | null;
            height?: number | null;
          };
          afterImage: {
            image: string | Media;
            /**
             * Use this if image is hosted externally instead of upload
             */
            imageUrl?: string | null;
            /**
             * e.g., "Tummy Tuck Before & After Gallery - Patient 175151533 - Image 2"
             */
            altText: string;
            width?: number | null;
            height?: number | null;
          };
          customCss?: string | null;
          id?: string | null;
        }[]
      | null;
    itemBackgroundColor?: string | null;
    itemBorderColor?: string | null;
    itemHoverEffect?: ('none' | 'scale' | 'opacity' | 'shadow') | null;
  };
  paginationSection?: {
    enabled?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    activePageColor?: string | null;
    activePageBackground?: string | null;
    hoverColor?: string | null;
    currentPage?: number | null;
    totalPages?: number | null;
    /**
     * Base URL without page number (e.g., /gallery/surgical/tummy-tuck/)
     */
    baseUrl?: string | null;
    /**
     * Individual page link configuration
     */
    pages?:
      | {
          pageNumber: number;
          url: string;
          isCurrent?: boolean | null;
          hideOnPhone?: boolean | null;
          id?: string | null;
        }[]
      | null;
    nextButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
    prevButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
  };
  globalStyling?: {
    containerBackgroundColor?: string | null;
    /**
     * CSS max-width value (e.g., 1200px)
     */
    containerMaxWidth?: string | null;
    fontFamily?: string | null;
    primaryColor?: string | null;
    secondaryColor?: string | null;
    /**
     * Additional CSS rules to apply
     */
    customCss?: string | null;
  };
  /**
   * Drag to reorder page sections
   */
  sectionOrder?:
    | {
        sectionType: 'hero' | 'dropdown' | 'gallery' | 'pagination';
        enabled?: boolean | null;
        /**
         * Optional HTML ID attribute
         */
        customId?: string | null;
        customClass?: string | null;
        id?: string | null;
      }[]
    | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaKeywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BreastAugmentationGallery".
 */
export interface BreastAugmentationGallery {
  id: string;
  /**
   * Name to identify this gallery component
   */
  componentName: string;
  /**
   * URL-friendly identifier (e.g., tummy-tuck)
   */
  slug: string;
  isActive?: boolean | null;
  heroSection: {
    title: string;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for title
     */
    textColor?: string | null;
    backgroundImage?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
    /**
     * Drag to reorder breadcrumb links
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    breadcrumbTextColor?: string | null;
    breadcrumbLinkColor?: string | null;
    breadcrumbHoverColor?: string | null;
  };
  dropdownSection: {
    backgroundColor?: string | null;
    selectedItemLabel: string;
    /**
     * Drag to reorder dropdown items
     */
    dropdownItems?:
      | {
          label: string;
          url: string;
          isActive?: boolean | null;
          id?: string | null;
        }[]
      | null;
    backButton?: {
      label?: string | null;
      url?: string | null;
      iconClass?: string | null;
    };
    textColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
    borderColor?: string | null;
  };
  gallerySection?: {
    backgroundColor?: string | null;
    /**
     * CSS padding value (e.g., 20px 0)
     */
    sectionPadding?: string | null;
    /**
     * Drag to reorder gallery items. Each item contains before and after images.
     */
    galleryItems?:
      | {
          /**
           * URL to the individual gallery item page (e.g., /gallery/surgical/tummy-tuck/item/175151533/)
           */
          itemUrl?: string | null;
          /**
           * Patient identifier (e.g., 175151533)
           */
          patientId?: string | null;
          beforeImage: {
            image: string | Media;
            /**
             * Use this if image is hosted externally instead of upload
             */
            imageUrl?: string | null;
            /**
             * e.g., "Tummy Tuck Before & After Gallery - Patient 175151533 - Image 1"
             */
            altText: string;
            width?: number | null;
            height?: number | null;
          };
          afterImage: {
            image: string | Media;
            /**
             * Use this if image is hosted externally instead of upload
             */
            imageUrl?: string | null;
            /**
             * e.g., "Tummy Tuck Before & After Gallery - Patient 175151533 - Image 2"
             */
            altText: string;
            width?: number | null;
            height?: number | null;
          };
          customCss?: string | null;
          id?: string | null;
        }[]
      | null;
    itemBackgroundColor?: string | null;
    itemBorderColor?: string | null;
    itemHoverEffect?: ('none' | 'scale' | 'opacity' | 'shadow') | null;
  };
  paginationSection?: {
    enabled?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    activePageColor?: string | null;
    activePageBackground?: string | null;
    hoverColor?: string | null;
    currentPage?: number | null;
    totalPages?: number | null;
    /**
     * Base URL without page number (e.g., /gallery/surgical/tummy-tuck/)
     */
    baseUrl?: string | null;
    /**
     * Individual page link configuration
     */
    pages?:
      | {
          pageNumber: number;
          url: string;
          isCurrent?: boolean | null;
          hideOnPhone?: boolean | null;
          id?: string | null;
        }[]
      | null;
    nextButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
    prevButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
  };
  globalStyling?: {
    containerBackgroundColor?: string | null;
    /**
     * CSS max-width value (e.g., 1200px)
     */
    containerMaxWidth?: string | null;
    fontFamily?: string | null;
    primaryColor?: string | null;
    secondaryColor?: string | null;
    /**
     * Additional CSS rules to apply
     */
    customCss?: string | null;
  };
  /**
   * Drag to reorder page sections
   */
  sectionOrder?:
    | {
        sectionType: 'hero' | 'dropdown' | 'gallery' | 'pagination';
        enabled?: boolean | null;
        /**
         * Optional HTML ID attribute
         */
        customId?: string | null;
        customClass?: string | null;
        id?: string | null;
      }[]
    | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaKeywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BreastLiftGallery".
 */
export interface BreastLiftGallery {
  id: string;
  /**
   * Name to identify this gallery component
   */
  componentName: string;
  /**
   * URL-friendly identifier (e.g., tummy-tuck)
   */
  slug: string;
  isActive?: boolean | null;
  heroSection: {
    title: string;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for title
     */
    textColor?: string | null;
    backgroundImage?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
    /**
     * Drag to reorder breadcrumb links
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    breadcrumbTextColor?: string | null;
    breadcrumbLinkColor?: string | null;
    breadcrumbHoverColor?: string | null;
  };
  dropdownSection: {
    backgroundColor?: string | null;
    selectedItemLabel: string;
    /**
     * Drag to reorder dropdown items
     */
    dropdownItems?:
      | {
          label: string;
          url: string;
          isActive?: boolean | null;
          id?: string | null;
        }[]
      | null;
    backButton?: {
      label?: string | null;
      url?: string | null;
      iconClass?: string | null;
    };
    textColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
    borderColor?: string | null;
  };
  gallerySection?: {
    backgroundColor?: string | null;
    /**
     * CSS padding value (e.g., 20px 0)
     */
    sectionPadding?: string | null;
    /**
     * Drag to reorder gallery items. Each item contains before and after images.
     */
    galleryItems?:
      | {
          /**
           * URL to the individual gallery item page (e.g., /gallery/surgical/tummy-tuck/item/175151533/)
           */
          itemUrl?: string | null;
          /**
           * Patient identifier (e.g., 175151533)
           */
          patientId?: string | null;
          beforeImage: {
            image: string | Media;
            /**
             * Use this if image is hosted externally instead of upload
             */
            imageUrl?: string | null;
            /**
             * e.g., "Tummy Tuck Before & After Gallery - Patient 175151533 - Image 1"
             */
            altText: string;
            width?: number | null;
            height?: number | null;
          };
          afterImage: {
            image: string | Media;
            /**
             * Use this if image is hosted externally instead of upload
             */
            imageUrl?: string | null;
            /**
             * e.g., "Tummy Tuck Before & After Gallery - Patient 175151533 - Image 2"
             */
            altText: string;
            width?: number | null;
            height?: number | null;
          };
          customCss?: string | null;
          id?: string | null;
        }[]
      | null;
    itemBackgroundColor?: string | null;
    itemBorderColor?: string | null;
    itemHoverEffect?: ('none' | 'scale' | 'opacity' | 'shadow') | null;
  };
  paginationSection?: {
    enabled?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    activePageColor?: string | null;
    activePageBackground?: string | null;
    hoverColor?: string | null;
    currentPage?: number | null;
    totalPages?: number | null;
    /**
     * Base URL without page number (e.g., /gallery/surgical/tummy-tuck/)
     */
    baseUrl?: string | null;
    /**
     * Individual page link configuration
     */
    pages?:
      | {
          pageNumber: number;
          url: string;
          isCurrent?: boolean | null;
          hideOnPhone?: boolean | null;
          id?: string | null;
        }[]
      | null;
    nextButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
    prevButton?: {
      label?: string | null;
      url?: string | null;
      enabled?: boolean | null;
    };
  };
  globalStyling?: {
    containerBackgroundColor?: string | null;
    /**
     * CSS max-width value (e.g., 1200px)
     */
    containerMaxWidth?: string | null;
    fontFamily?: string | null;
    primaryColor?: string | null;
    secondaryColor?: string | null;
    /**
     * Additional CSS rules to apply
     */
    customCss?: string | null;
  };
  /**
   * Drag to reorder page sections
   */
  sectionOrder?:
    | {
        sectionType: 'hero' | 'dropdown' | 'gallery' | 'pagination';
        enabled?: boolean | null;
        /**
         * Optional HTML ID attribute
         */
        customId?: string | null;
        customClass?: string | null;
        id?: string | null;
      }[]
    | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaKeywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "medical-spa-component".
 */
export interface MedicalSpaComponent {
  id: string;
  componentName: string;
  heroSection: {
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  indexListSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    hoverColor?: string | null;
    /**
     * Drag to reorder navigation items
     */
    items?:
      | {
          label: string;
          url: string;
          title?: string | null;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  introSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: string;
    subheading?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    headingColor?: string | null;
  };
  bannerSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          title: string;
          content: string;
          id?: string | null;
        }[]
      | null;
  };
  boxGridSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          linkText?: string | null;
          linkUrl?: string | null;
          content: string;
          customBackgroundColor?: string | null;
          customTextColor?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  columnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: string;
    headingLink?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  bannerSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    subheading?: string | null;
    headingLink?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  pageIndexSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    cardBackgroundColor?: string | null;
    cardTextColor?: string | null;
    cardHoverColor?: string | null;
    /**
     * Drag to reorder cards in the grid
     */
    cards?:
      | {
          title: string;
          url: string;
          titleAttribute?: string | null;
          ariaLabel?: string | null;
          /**
           * Text shown on hover overlay
           */
          labelText?: string | null;
          image: {
            mobile?: (string | null) | Media;
            tablet?: (string | null) | Media;
            desktop?: (string | null) | Media;
            alt: string;
          };
          /**
           * Override global card background color for this specific card
           */
          customBackgroundColor?: string | null;
          /**
           * Override global card text color for this specific card
           */
          customTextColor?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section: 'hero' | 'indexList' | 'intro' | 'banner1' | 'boxGrid' | 'column' | 'banner2' | 'pageIndex';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "medical-spa-injectables-component".
 */
export interface MedicalSpaInjectablesComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  indexStaticSection?: {
    show?: boolean | null;
    /**
     * CSS color value for section background
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for inner container
     */
    containerBackgroundColor?: string | null;
    /**
     * Default background color for all cards
     */
    cardBackgroundColor?: string | null;
    /**
     * Default text color for all cards
     */
    cardTextColor?: string | null;
    /**
     * Background color when hovering over cards
     */
    cardHoverColor?: string | null;
    /**
     * Background color for hover overlay (e.g., rgba(0,0,0,0.7))
     */
    overlayBackgroundColor?: string | null;
    /**
     * Text color for overlay content
     */
    overlayTextColor?: string | null;
    /**
     * Drag to reorder cards in the grid
     */
    cards?:
      | {
          title: string;
          url: string;
          /**
           * Text shown in hover overlay
           */
          overlayLabel?: string | null;
          image: {
            mobile?: (string | null) | Media;
            tablet?: (string | null) | Media;
            desktop?: (string | null) | Media;
            large?: (string | null) | Media;
            alt: string;
          };
          /**
           * Override global card background color for this specific card
           */
          customBackgroundColor?: string | null;
          /**
           * Override global card text color for this specific card
           */
          customTextColor?: string | null;
          /**
           * Override global hover color for this specific card
           */
          customHoverColor?: string | null;
          /**
           * Override global overlay background for this card
           */
          customOverlayBackgroundColor?: string | null;
          /**
           * Override global overlay text color for this card
           */
          customOverlayTextColor?: string | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Choose grid layout for cards
     */
    gridLayout?: ('2' | '3' | '4' | 'auto') | null;
    /**
     * Gap between cards (e.g., 20px, 1.5rem)
     */
    cardSpacing?: string | null;
    /**
     * Border radius for cards (e.g., 8px, 0.5rem)
     */
    cardBorderRadius?: string | null;
    /**
     * Box shadow for cards (e.g., 0 2px 8px rgba(0,0,0,0.1))
     */
    cardShadow?: string | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section: 'hero' | 'indexStatic';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    cardHoverAnimation?: ('none' | 'scale' | 'lift' | 'fade' | 'zoom') | null;
    /**
     * Duration for animations (e.g., 0.3s, 300ms)
     */
    transitionDuration?: string | null;
    /**
     * CSS easing function (e.g., ease, ease-in-out, cubic-bezier)
     */
    transitionEasing?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
  };
  accessibilitySettings?: {
    ariaLabels?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "botox-page-component".
 */
export interface BotoxPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: string;
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  columnSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  bannerSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
  };
  videoSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    heading: string;
    headingColor?: string | null;
    /**
     * YouTube or Vimeo video URL
     */
    videoUrl: string;
    thumbnailImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt?: string | null;
    };
    linkText?: string | null;
    ariaLabel?: string | null;
  };
  halfImageSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    imagePosition?: ('left' | 'right') | null;
    verticalAlignment?: ('top' | 'center' | 'bottom') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  bannerSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  columnSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    headingAlignment?: ('left' | 'center' | 'right') | null;
    /**
     * Drag to reorder columns
     */
    columns?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          bulletPoints?:
            | {
                text: string;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
  };
  ctaGeneralSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingLink?: string | null;
    headingColor?: string | null;
    ctaButton: {
      text: string;
      url: string;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
  };
  columnSection3: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  bannerSection3: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  columnSection4: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    /**
     * Drag to reorder location links
     */
    locations?:
      | {
          label: string;
          url: string;
          id?: string | null;
        }[]
      | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  faqSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    sidebarBackgroundColor?: string | null;
    heading: string;
    headingColor?: string | null;
    subheading?: string | null;
    /**
     * Drag to reorder FAQ questions
     */
    questions?:
      | {
          question: string;
          answer: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
    questionColor?: string | null;
    answerColor?: string | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'intro'
          | 'columnSection1'
          | 'bannerSection1'
          | 'videoSection'
          | 'halfImageSection'
          | 'bannerSection2'
          | 'columnSection2'
          | 'ctaGeneralSection'
          | 'columnSection3'
          | 'bannerSection3'
          | 'columnSection4'
          | 'faqSection';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
    /**
     * Default font size for h2 headings
     */
    headingFontSize?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "dysport-page-component".
 */
export interface DysportPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    /**
     * Additional CSS classes (e.g., mobile-stack)
     */
    customClasses?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      buttonClasses?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    customClasses?: string | null;
    /**
     * CSS padding value (e.g., pb-0)
     */
    paddingBottom?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    logoWidth?: number | null;
    logoHeight?: number | null;
    heading: string;
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  columnSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    customClasses?: string | null;
    /**
     * CSS margin value (e.g., mb-30)
     */
    marginBottom?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  halfImageSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    backgroundColorClass?: string | null;
    textColor?: string | null;
    customClasses?: string | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    imagePosition?: ('left' | 'right') | null;
    verticalAlignment?: ('top' | 'center' | 'bottom') | null;
    heading: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  twoColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    customClasses?: string | null;
    heading: string;
    headingColor?: string | null;
    leftColumn: {
      content: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      };
      animationClass?: string | null;
    };
    rightColumn: {
      content: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      };
      animationClass?: string | null;
    };
  };
  ctaGeneralSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    backgroundColorClass?: string | null;
    textColor?: string | null;
    customClasses?: string | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    heading: string;
    headingLink?: string | null;
    headingColor?: string | null;
    ctaButton: {
      text: string;
      url: string;
      buttonClasses?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
  };
  boxGridSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    customClasses?: string | null;
    headingBefore: string;
    headingColor?: string | null;
    contentBefore?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          animationClass?: string | null;
          backgroundColor?: string | null;
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
    contentAfter?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'intro'
          | 'columnSection1'
          | 'halfImageSection'
          | 'twoColumnSection'
          | 'ctaGeneralSection'
          | 'boxGridSection';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
    /**
     * Default font size for h2 headings
     */
    headingFontSize?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    h3FontSize?: string | null;
    h3Color?: string | null;
    h3FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "dermal-fillers-page-component".
 */
export interface DermalFillersPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    /**
     * Additional CSS classes (e.g., mobile-stack)
     */
    customClasses?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      buttonClasses?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    customClasses?: string | null;
    /**
     * CSS padding value (e.g., pb-0)
     */
    paddingBottom?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    logoWidth?: number | null;
    logoHeight?: number | null;
    heading: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  bannerSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    backgroundColorClass?: string | null;
    textColor?: string | null;
    customClasses?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    useColumnsLayout?: boolean | null;
    leftColumn?: {
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
    };
    rightColumn?: {
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
    };
  };
  columnSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    customClasses?: string | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    useVerticalAlign?: boolean | null;
    useTwoColumns?: boolean | null;
    leftColumn?: {
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
    };
    rightColumn?: {
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
    };
  };
  halfImageSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    backgroundColorClass?: string | null;
    textColor?: string | null;
    customClasses?: string | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    imagePosition?: ('left' | 'right') | null;
    verticalAlignment?: ('top' | 'center' | 'bottom') | null;
    copyPadded?: boolean | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder treatment area links
     */
    treatmentAreaLinks?:
      | {
          label: string;
          url: string;
          id?: string | null;
        }[]
      | null;
    /**
     * Drag to reorder filler products
     */
    fillersList?:
      | {
          name: string;
          id?: string | null;
        }[]
      | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  boxGridSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    customClasses?: string | null;
    headingBefore: string;
    headingColor?: string | null;
    contentBefore?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          animationClass?: string | null;
          backgroundColor?: string | null;
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
    contentAfter?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  columnSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    customClasses?: string | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  bannerSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    backgroundColorClass?: string | null;
    textColor?: string | null;
    customClasses?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  faqSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    sidebarBackgroundColor?: string | null;
    heading: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    headingColor?: string | null;
    /**
     * Drag to reorder FAQ questions
     */
    questions?:
      | {
          question: string;
          answer: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
    questionColor?: string | null;
    answerColor?: string | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'intro'
          | 'bannerSection1'
          | 'columnSection1'
          | 'halfImageSection'
          | 'boxGridSection'
          | 'columnSection2'
          | 'bannerSection2'
          | 'faqSection';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
    /**
     * Default font size for h2 headings
     */
    headingFontSize?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    h3FontSize?: string | null;
    h3Color?: string | null;
    h3FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
  };
  listStyles?: {
    useColumnsLayout?: boolean | null;
    /**
     * Number of columns for list items
     */
    columnCount?: number | null;
    bulletColor?: string | null;
    /**
     * Space between list items
     */
    listItemSpacing?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "juvederm-page-component".
 */
export interface JuvedermPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: string;
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  columnSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  bannerSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    subheading?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
  };
  boxGridSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    contentBefore?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          title: string;
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          backgroundColor?: string | null;
          titleColor?: string | null;
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
    contentAfter?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    gridColumns?: ('2' | '3' | '4' | '5') | null;
  };
  halfImageSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    imagePosition?: ('left' | 'right') | null;
    verticalAlignment?: ('top' | 'center' | 'bottom') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    bulletPoints?:
      | {
          text: string;
          id?: string | null;
        }[]
      | null;
    'after content'?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  twoColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    leftColumn: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    leftColumnColor?: string | null;
    rightColumn: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    rightColumnColor?: string | null;
    verticalAlign?: boolean | null;
  };
  columnSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    bulletPoints?:
      | {
          text: string;
          id?: string | null;
        }[]
      | null;
    'after content'?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      target?: ('_self' | '_blank') | null;
      backgroundColor?: string | null;
      textColor?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  ctaGeneralSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingLink?: string | null;
    headingColor?: string | null;
    ctaButton: {
      text: string;
      url: string;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
  };
  faqSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    sidebarBackgroundColor?: string | null;
    heading: string;
    headingColor?: string | null;
    subheading?: string | null;
    /**
     * Drag to reorder FAQ questions
     */
    questions?:
      | {
          question: string;
          answer: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
    questionColor?: string | null;
    answerColor?: string | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'intro'
          | 'columnSection1'
          | 'bannerSection1'
          | 'boxGridSection'
          | 'halfImageSection'
          | 'twoColumnSection'
          | 'columnSection2'
          | 'ctaGeneralSection'
          | 'faqSection';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
    /**
     * Default font size for h2 headings
     */
    headingFontSize?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    h3FontSize?: string | null;
    h3Color?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "juvederm-volux-page-component".
 */
export interface JuvedermVoluxPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: string;
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  bannerSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    headingAlignment?: ('left' | 'center' | 'right') | null;
    columnLayout?: ('single' | 'two') | null;
    /**
     * Add content columns for two-column layout
     */
    columns?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
  };
  columnSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    headingAlignment?: ('left' | 'center' | 'right') | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
    closingContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * CSS margin-top value (e.g., 30px, 2rem)
     */
    marginTop?: string | null;
    /**
     * CSS margin-bottom value (e.g., 30px, 2rem)
     */
    marginBottom?: string | null;
  };
  ctaGeneralSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingLink?: string | null;
    headingColor?: string | null;
    ctaButton: {
      text: string;
      url: string;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
    /**
     * CSS margin-top value (e.g., 0, 30px)
     */
    marginTop?: string | null;
    /**
     * CSS margin-bottom value (e.g., 0, 30px)
     */
    marginBottom?: string | null;
  };
  halfImageSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    imagePosition?: ('left' | 'right') | null;
    verticalAlignment?: ('top' | 'center' | 'bottom') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
    /**
     * CSS margin-top value for desktop (e.g., 60px)
     */
    marginTop?: string | null;
    /**
     * CSS margin-top value for tablet (e.g., 40px)
     */
    marginTopTablet?: string | null;
    /**
     * CSS padding-top value (e.g., 20px)
     */
    paddingTop?: string | null;
  };
  columnSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    /**
     * CSS margin-top value
     */
    marginTop?: string | null;
    /**
     * CSS margin-bottom value
     */
    marginBottom?: string | null;
  };
  bannerSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    columnLayout?: ('single' | 'two') | null;
    /**
     * Add content columns for two-column layout
     */
    columns?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
  };
  twoColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    leftColumn: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    leftColumnColor?: string | null;
    rightColumn: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    rightColumnColor?: string | null;
    verticalAlign?: boolean | null;
    /**
     * CSS margin-top value
     */
    marginTop?: string | null;
    /**
     * CSS margin-bottom value
     */
    marginBottom?: string | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'intro'
          | 'bannerSection1'
          | 'columnSection1'
          | 'ctaGeneralSection'
          | 'halfImageSection'
          | 'columnSection2'
          | 'bannerSection2'
          | 'twoColumnSection';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
    /**
     * Default font size for h2 headings
     */
    headingFontSize?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "restylane-page-component".
 */
export interface RestylanePageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: string;
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  halfImageSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    imagePosition?: ('left' | 'right') | null;
    verticalAlignment?: ('top' | 'center' | 'bottom') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  bannerSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingAlignment?: ('left' | 'center' | 'right') | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
  };
  boxGridSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    subheading?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          title: string;
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          bulletPoints?:
            | {
                text: string;
                id?: string | null;
              }[]
            | null;
          backgroundColor?: string | null;
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
    layoutStyle?: ('default' | 'wide' | 'narrow') | null;
  };
  columnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder location columns
     */
    locationColumns?:
      | {
          locations?:
            | {
                name: string;
                url?: string | null;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  bannerSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingAlignment?: ('left' | 'center' | 'right') | null;
    /**
     * Drag to reorder columns
     */
    contentColumns?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          bulletPoints?:
            | {
                text: string;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'intro'
          | 'halfImageSection'
          | 'bannerSection1'
          | 'boxGridSection'
          | 'columnSection'
          | 'bannerSection2';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
    /**
     * Default font size for h2 headings
     */
    headingFontSize?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    h3FontSize?: string | null;
    h3Color?: string | null;
    h3FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "restylane-contour-page-component".
 */
export interface RestylaneContourPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerWidth?: ('container' | 'wide' | 'full') | null;
    layout?: ('option-1' | 'option-2' | 'option-3') | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    logoWidth?: string | null;
    logoHeight?: string | null;
    heading: string;
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  bannerSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    theme?: ('light' | 'dark') | null;
    hideDivider?: boolean | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingAlignment?: ('left' | 'center' | 'right') | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          text: string;
          id?: string | null;
        }[]
      | null;
    bottomContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    columnLayout?: boolean | null;
  };
  boxGridSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerWidth?: ('container' | 'wide' | 'wider' | 'full') | null;
    layoutOption?: ('option-1' | 'option-2') | null;
    heading: string;
    headingColor?: string | null;
    subheading?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          title: string;
          titleColor?: string | null;
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          backgroundColor?: string | null;
          textColor?: string | null;
          borderColor?: string | null;
          hoverBackgroundColor?: string | null;
          id?: string | null;
        }[]
      | null;
    layoutStyle?: ('default' | 'seven-boxes' | 'wide' | 'narrow') | null;
    backgroundStyle?: ('no-bg' | 'light-bg' | 'dark-bg') | null;
  };
  ctaGeneralSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerWidth?: ('container' | 'thin' | 'wide') | null;
    /**
     * CSS margin-top value (e.g., 0, 20px, 2rem)
     */
    marginTop?: string | null;
    /**
     * CSS margin-bottom value
     */
    marginBottom?: string | null;
    heading: string;
    headingUrl?: string | null;
    headingColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      style?: ('primary' | 'white' | 'outline') | null;
      backgroundColor?: string | null;
      textColor?: string | null;
    };
    mediaImage?: {
      show?: boolean | null;
      mobile?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt?: string | null;
    };
  };
  faqSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerWidth?: ('container' | 'wide') | null;
    mainTitle?: string | null;
    subtitle?: string | null;
    titleColor?: string | null;
    /**
     * Drag to reorder questions
     */
    questions?:
      | {
          question: string;
          answer: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          questionColor?: string | null;
          answerColor?: string | null;
          id?: string | null;
        }[]
      | null;
    sidebarBackgroundColor?: string | null;
    questionListBackgroundColor?: string | null;
  };
  halfImageSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerWidth?: ('container' | 'wide') | null;
    imagePosition?: ('left' | 'right') | null;
    verticalAlignment?: ('top-aligned' | 'center-aligned' | 'bottom-aligned') | null;
    /**
     * CSS margin-top value
     */
    marginTop?: string | null;
    marginBottom?: string | null;
    contentPadding?: ('default' | 'padded' | 'padded2') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      openInNewTab?: boolean | null;
      style?: ('primary' | 'secondary' | 'outline') | null;
    };
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
      width?: string | null;
      height?: string | null;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'intro'
          | 'bannerSection1'
          | 'boxGridSection'
          | 'ctaGeneralSection'
          | 'faqSection'
          | 'halfImageSection';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
    /**
     * Default font size for h2 headings
     */
    headingFontSize?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    h3FontSize?: string | null;
    h3Color?: string | null;
    h3FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
    /**
     * Enable scroll-based animations using WOW.js
     */
    wowEnabled?: boolean | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
    /**
     * Stack sections vertically on mobile devices
     */
    mobileStackEnabled?: boolean | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cheek-fillers-page-component".
 */
export interface CheekFillersPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: string;
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  beforeAfterSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder patient before/after images
     */
    patients?:
      | {
          image?: {
            mobile?: (string | null) | Media;
            desktop?: (string | null) | Media;
            alt?: string | null;
          };
          linkUrl?: string | null;
          id?: string | null;
        }[]
      | null;
    galleryButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
  };
  bannerSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  boxGridSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          headingColor?: string | null;
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          backgroundColor?: string | null;
          id?: string | null;
        }[]
      | null;
    columnLayout?: ('1' | '2' | '3' | '4') | null;
  };
  bannerSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    headingAlignment?: ('left' | 'center' | 'right') | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
  };
  twoColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    subheading?: string | null;
    subheadingColor?: string | null;
    leftColumn: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    rightColumn: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  halfImageSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    imagePosition?: ('left' | 'right') | null;
    verticalAlignment?: ('top' | 'center' | 'bottom') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'intro'
          | 'beforeAfter'
          | 'bannerSection1'
          | 'boxGrid'
          | 'bannerSection2'
          | 'twoColumn'
          | 'halfImage';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
    /**
     * Default font size for h2 headings
     */
    headingFontSize?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    h3FontSize?: string | null;
    h3Color?: string | null;
    h3FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lines-wrinkles-page-component".
 */
export interface LinesWrinklesPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: string;
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  halfImageSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    imagePosition?: ('left' | 'right') | null;
    verticalAlignment?: ('top' | 'center' | 'bottom') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  beforeAfterSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    /**
     * Drag to reorder patient before/after images
     */
    patients?:
      | {
          image?: {
            mobile?: (string | null) | Media;
            tablet?: (string | null) | Media;
            desktop?: (string | null) | Media;
            alt?: string | null;
          };
          linkUrl?: string | null;
          id?: string | null;
        }[]
      | null;
    galleryButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
  };
  bannerSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    subheading?: string | null;
    subheadingColor?: string | null;
    headingAlignment?: ('left' | 'center' | 'right') | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
    closingContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  boxGridSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    headingBefore?: string | null;
    headingBeforeColor?: string | null;
    contentBefore?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          headingColor?: string | null;
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          backgroundColor?: string | null;
          id?: string | null;
        }[]
      | null;
    columnLayout?: ('1' | '2' | '3' | '4') | null;
  };
  bannerSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    headingAlignment?: ('left' | 'center' | 'right') | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentAlignment?: ('left' | 'center' | 'right') | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
  };
  boxGridSection2?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    headingBefore?: string | null;
    headingBeforeColor?: string | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          headingColor?: string | null;
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          backgroundColor?: string | null;
          id?: string | null;
        }[]
      | null;
    columnLayout?: ('1' | '2' | '3' | '4') | null;
    widerBoxes?: boolean | null;
  };
  columnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'intro'
          | 'halfImageSection1'
          | 'beforeAfter'
          | 'bannerSection1'
          | 'boxGridSection1'
          | 'bannerSection2'
          | 'boxGridSection2'
          | 'columnSection';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
    /**
     * Default font size for h2 headings
     */
    headingFontSize?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    h3FontSize?: string | null;
    h3Color?: string | null;
    h3FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lip-fillers-page-component".
 */
export interface LipFillersPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: string;
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  bannerSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    hideDivider?: boolean | null;
    darkTheme?: boolean | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    smallHeading?: string | null;
    headingAlignment?: ('left' | 'center' | 'right') | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    columnLayout?: ('single' | 'two' | 'three') | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
  };
  columnSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: string;
    smallHeading?: string | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  ctaGeneralSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    thinStyle?: boolean | null;
    heading: string;
    headingLink?: string | null;
    headingColor?: string | null;
    ctaButton: {
      text: string;
      url: string;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
  };
  ctaBeforeAfterSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    title: string;
    smallTitle?: string | null;
    /**
     * Drag to reorder gallery items
     */
    patients?:
      | {
          url: string;
          image?: {
            mobile?: (string | null) | Media;
            tablet?: (string | null) | Media;
            desktop?: (string | null) | Media;
            alt?: string | null;
          };
          id?: string | null;
        }[]
      | null;
    viewMoreLink?: {
      text?: string | null;
      url?: string | null;
      ariaLabel?: string | null;
    };
    /**
     * Number of items to display in the slider
     */
    sliderItemsToShow?: number | null;
  };
  columnSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
    columnLayout?: boolean | null;
  };
  halfImageSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    imagePosition?: ('left' | 'right') | null;
    verticalAlignment?: ('top' | 'center' | 'bottom') | null;
    heading: string;
    smallHeading?: string | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  faqSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    sidebarBackgroundColor?: string | null;
    heading: string;
    headingColor?: string | null;
    subheading?: string | null;
    /**
     * Drag to reorder FAQ questions
     */
    questions?:
      | {
          question: string;
          answer: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
    questionColor?: string | null;
    answerColor?: string | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'intro'
          | 'bannerSection1'
          | 'columnSection1'
          | 'ctaGeneralSection'
          | 'ctaBeforeAfterSection'
          | 'columnSection2'
          | 'halfImageSection'
          | 'faqSection';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
    /**
     * Default font size for h2 headings
     */
    headingFontSize?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "chin-fillers-page-component".
 */
export interface ChinFillersPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * CSS padding value (e.g., 0, 20px, 2rem)
     */
    paddingBottom?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: string;
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  columnSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * CSS margin value (e.g., 0, 30px, 2rem)
     */
    marginTop?: string | null;
    /**
     * CSS margin value (e.g., 30px, 2rem)
     */
    marginBottom?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  bannerSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    hideDivider?: boolean | null;
    darkTheme?: boolean | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    columnLayout?: ('single' | 'two' | 'three') | null;
    /**
     * Drag to reorder columns
     */
    columns?:
      | {
          heading?: string | null;
          /**
           * Text that appears on new line on desktop
           */
          headingBreakDesktop?: string | null;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          bulletPoints?:
            | {
                text: string;
                id?: string | null;
              }[]
            | null;
          bulletColumnLayout?: boolean | null;
          id?: string | null;
        }[]
      | null;
  };
  ctaBeforeAfterSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    title: string;
    smallTitle?: string | null;
    /**
     * Drag to reorder gallery items
     */
    patients?:
      | {
          url: string;
          image?: {
            mobile?: (string | null) | Media;
            tablet?: (string | null) | Media;
            desktop?: (string | null) | Media;
            alt?: string | null;
          };
          id?: string | null;
        }[]
      | null;
    viewMoreLink?: {
      text?: string | null;
      url?: string | null;
      ariaLabel?: string | null;
    };
    /**
     * Number of items to display in the slider
     */
    sliderItemsToShow?: number | null;
  };
  columnSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * CSS margin value (e.g., 30px, 2rem)
     */
    marginTop?: string | null;
    /**
     * CSS margin value (e.g., 30px, 2rem)
     */
    marginBottom?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
    columnLayout?: boolean | null;
  };
  bannerSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    hideDivider?: boolean | null;
    darkTheme?: boolean | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingAlignment?: ('left' | 'center' | 'right') | null;
    columnLayout?: ('single' | 'two' | 'three') | null;
    /**
     * Drag to reorder columns
     */
    columns?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
  };
  columnSection3: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * CSS margin value (e.g., 30px, 2rem)
     */
    marginTop?: string | null;
    /**
     * CSS margin value (e.g., 30px, 2rem)
     */
    marginBottom?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          text: string;
          id?: string | null;
        }[]
      | null;
  };
  halfImageSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    imagePosition?: ('left' | 'right') | null;
    verticalAlignment?: ('top' | 'center' | 'bottom') | null;
    contentPadded?: boolean | null;
    /**
     * CSS margin value (e.g., 0, 30px, 2rem)
     */
    marginTop?: string | null;
    /**
     * CSS margin value (e.g., 0, 30px, 2rem)
     */
    marginBottom?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  columnSection4: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * CSS margin value (e.g., 30px, 2rem)
     */
    marginTop?: string | null;
    /**
     * CSS margin value (e.g., 0, 30px, 2rem)
     */
    marginBottom?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'intro'
          | 'columnSection1'
          | 'bannerSection1'
          | 'ctaBeforeAfterSection'
          | 'columnSection2'
          | 'bannerSection2'
          | 'columnSection3'
          | 'halfImageSection'
          | 'columnSection4';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
    /**
     * Default font size for h2 headings
     */
    headingFontSize?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "hand-rejuvenation-page-component".
 */
export interface HandRejuvenationPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: string;
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  bannerSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    hideDivider?: boolean | null;
  };
  columnSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          text: string;
          id?: string | null;
        }[]
      | null;
    /**
     * Numeric value (e.g., 30 for mt-30)
     */
    marginTop?: string | null;
    /**
     * Numeric value (e.g., 30 for mb-30)
     */
    marginBottom?: string | null;
  };
  halfImageSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    imagePosition?: ('left' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
    marginTop?: string | null;
    marginBottom?: string | null;
  };
  boxGridSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          title: string;
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
    gridLayout?: ('default' | 'wider') | null;
    /**
     * Numeric value (e.g., 20 for pt-20)
     */
    paddingTop?: string | null;
  };
  columnSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
    paddingTop?: string | null;
    marginBottom?: string | null;
  };
  bannerSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          text: string;
          id?: string | null;
        }[]
      | null;
    hideDivider?: boolean | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'intro'
          | 'bannerSection1'
          | 'columnSection1'
          | 'halfImageSection'
          | 'boxGridSection'
          | 'columnSection2'
          | 'bannerSection2';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
    /**
     * Default font size for h2 headings
     */
    headingFontSize?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    h3FontSize?: string | null;
    h3Color?: string | null;
    h3FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "liquid-facelift-page-component".
 */
export interface LiquidFaceliftPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: string;
    headingColor?: string | null;
    /**
     * Text that appears smaller in the heading (e.g., "Lift, firm, and enhance –")
     */
    headingSmallText?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  halfImageSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    imagePosition?: ('left' | 'right') | null;
    verticalAlignment?: ('top' | 'center' | 'bottom') | null;
    heading: string;
    headingColor?: string | null;
    /**
     * Text that appears on a new line in the heading (e.g., "Natural-Looking Results")
     */
    headingBlockText?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
    marginTop?: string | null;
    marginBottom?: string | null;
  };
  columnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder facial areas
     */
    facialAreas?:
      | {
          /**
           * e.g., "1 and 2", "3", "4", etc.
           */
          areaNumber: string;
          description: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
    marginTop?: string | null;
    paddingBottom?: string | null;
  };
  ctaBeforeAfterSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    /**
     * Drag to reorder patient images
     */
    patients?:
      | {
          url: string;
          image?: {
            mobile?: (string | null) | Media;
            tablet?: (string | null) | Media;
            desktop?: (string | null) | Media;
            alt?: string | null;
          };
          id?: string | null;
        }[]
      | null;
    /**
     * Number of items to show in the slider
     */
    sliderItemsCount?: string | null;
    viewGalleryButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      title?: string | null;
      ariaLabel?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
    };
    marginTop?: string | null;
    marginBottom?: string | null;
  };
  ctaGeneralSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingLink?: string | null;
    headingColor?: string | null;
    ctaButton: {
      text: string;
      url: string;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
    layoutStyle?: ('thin' | 'regular' | 'wide') | null;
    marginTop?: string | null;
    marginBottom?: string | null;
  };
  boxGridSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    /**
     * Text that appears on a new line in the heading (e.g., "a non-surgical facelift?")
     */
    headingBlockText?: string | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          title: string;
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
    gridLayout?: ('default' | 'wider') | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'intro'
          | 'halfImageSection'
          | 'columnSection'
          | 'ctaBeforeAfterSection'
          | 'ctaGeneralSection'
          | 'boxGridSection';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
    /**
     * Default font size for h2 headings
     */
    headingFontSize?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    h3FontSize?: string | null;
    h3Color?: string | null;
    h3FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
    /**
     * Font size for small text elements (e.g., within headings)
     */
    smallTextSize?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    whiteButtonBackground?: string | null;
    whiteButtonTextColor?: string | null;
    whiteButtonHoverBackground?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for fade in up animations
     */
    fadeInUpDuration?: string | null;
    /**
     * Duration for fade in left animations
     */
    fadeInLeftDuration?: string | null;
    /**
     * Duration for fade in right animations
     */
    fadeInRightDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "liquid-rhinoplasty-page-component".
 */
export interface LiquidRhinoplastyPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: string;
    headingColor?: string | null;
    smallText?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  halfImageSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    imagePosition?: ('left' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  ctaBeforeAfterSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    subheading?: string | null;
    /**
     * Add before/after images
     */
    patients?:
      | {
          image: string | Media;
          alt: string;
          link?: string | null;
          id?: string | null;
        }[]
      | null;
    ctaButton?: {
      text?: string | null;
      url?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      ariaLabel?: string | null;
    };
  };
  bannerSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    theme?: ('light' | 'dark') | null;
    hideDivider?: boolean | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
  };
  ctaGeneralSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingLink?: string | null;
    headingColor?: string | null;
    smallText?: string | null;
    ctaButton: {
      text: string;
      url: string;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  boxGridSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    gridLayout?: ('default' | 'wider') | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    subheading?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          backgroundColor?: string | null;
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section: 'hero' | 'intro' | 'halfImage' | 'ctaBeforeAfter' | 'banner' | 'ctaGeneral' | 'boxGrid';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
    /**
     * Default font size for h2 headings
     */
    headingFontSize?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    h3FontSize?: string | null;
    h3Color?: string | null;
    h3FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 0.5s, 1s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "skinvive-page-component".
 */
export interface SkinvivePageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    /**
     * Main description text in hero section
     */
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * CSS padding value (e.g., 0, 20px)
     */
    paddingBottom?: string | null;
    width?: ('default' | 'wide') | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: string;
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  columnSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    /**
     * CSS margin value (e.g., 30px, 2rem)
     */
    marginBottom?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  bannerSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    theme?: ('light' | 'dark') | null;
    hideDivider?: boolean | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          text: string;
          id?: string | null;
        }[]
      | null;
  };
  halfImageSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    imagePosition?: ('left' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  boxGridSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    theme?: ('light' | 'dark') | null;
    gridLayout?: ('default' | 'wider' | 'three-boxes') | null;
    hasBackground?: boolean | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading?: string | null;
    headingColor?: string | null;
    subheading?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          backgroundColor?: string | null;
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  officeSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    imagePosition?: ('left' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section: 'hero' | 'intro' | 'columnSection1' | 'banner' | 'halfImage' | 'boxGrid' | 'office';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
    /**
     * Default font size for h2 headings
     */
    headingFontSize?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    h3FontSize?: string | null;
    h3Color?: string | null;
    h3FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 0.5s, 1s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "spa-services-page-component".
 */
export interface SpaServicesPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  servicesSection?: {
    show?: boolean | null;
    /**
     * CSS color value
     */
    backgroundColor?: string | null;
    /**
     * CSS class for the container
     */
    containerClass?: string | null;
    /**
     * Drag to reorder service items
     */
    serviceItems?:
      | {
          title: string;
          url: string;
          /**
           * Text shown on hover over the image
           */
          overlayText?: string | null;
          image: {
            mobile?: (string | null) | Media;
            tablet?: (string | null) | Media;
            desktop?: (string | null) | Media;
            large?: (string | null) | Media;
            alt: string;
          };
          /**
           * Background color for the image container
           */
          imageBackgroundColor?: string | null;
          /**
           * Color of the overlay text
           */
          overlayColor?: string | null;
          /**
           * Background color of the overlay
           */
          overlayBackgroundColor?: string | null;
          /**
           * Color of the service title text
           */
          titleColor?: string | null;
          /**
           * Color of the title on hover
           */
          titleHoverColor?: string | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Number of service items per row
     */
    itemsPerRow?: ('1' | '2' | '3' | '4' | '6') | null;
    /**
     * Space between items (e.g., 20px, 2rem)
     */
    itemSpacing?: string | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section: 'hero' | 'services';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
    /**
     * Default font size for h2 headings
     */
    headingFontSize?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 0.3s, 500ms)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for hover animations
     */
    hoverTransitionDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
  };
  layoutSettings?: {
    heroAlignment?: ('left' | 'center' | 'right') | null;
    /**
     * Gap between service items (e.g., 30px, 2rem)
     */
    servicesGridGap?: string | null;
    /**
     * Border radius for service items (e.g., 8px, 0.5rem)
     */
    serviceItemBorderRadius?: string | null;
    /**
     * CSS box-shadow value
     */
    serviceItemShadow?: string | null;
    /**
     * CSS box-shadow value on hover
     */
    serviceItemHoverShadow?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    mobileItemsPerRow?: ('1' | '2') | null;
    tabletItemsPerRow?: ('1' | '2' | '3') | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
  };
  hoverEffects?: {
    enableHoverEffects?: boolean | null;
    /**
     * Scale value on hover (e.g., 1.05, 1.1)
     */
    imageHoverScale?: string | null;
    /**
     * Opacity value on hover (e.g., 0.8, 0.9)
     */
    imageHoverOpacity?: string | null;
    /**
     * Opacity of overlay on hover (e.g., 0.9, 1)
     */
    overlayHoverOpacity?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lash-extensions-page-component".
 */
export interface LashExtensionsPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
      width?: string | null;
      height?: string | null;
    };
  };
  introSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerWidth?: ('container' | 'wide' | 'full') | null;
    layout?: ('option-1' | 'option-2' | 'option-3') | null;
    showViewport?: boolean | null;
    animationType?: ('fadeInUp' | 'fadeIn' | 'fadeInLeft' | 'fadeInRight') | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    logoWidth?: string | null;
    logoHeight?: string | null;
    heading: string;
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  bannerSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    theme?: ('light' | 'dark') | null;
    hideDivider?: boolean | null;
    backgroundStyle?: ('background-1' | 'background-2' | 'background-3' | 'background-navy') | null;
    showViewport?: boolean | null;
    animationType?: ('fadeInUp' | 'fadeIn' | 'fadeInLeft' | 'fadeInRight') | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingAlignment?: ('left' | 'center' | 'right') | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    columnLayout?: boolean | null;
    bottomContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  benefitsSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerWidth?: ('container' | 'wide') | null;
    showViewport?: boolean | null;
    /**
     * CSS class for margin top (e.g., mt-30, mt-0)
     */
    marginTop?: string | null;
    /**
     * CSS class for margin/padding bottom
     */
    marginBottom?: string | null;
    heading: string;
    headingColor?: string | null;
    introText?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder benefits
     */
    benefits?:
      | {
          title: string;
          description: string;
          titleColor?: string | null;
          descriptionColor?: string | null;
          id?: string | null;
        }[]
      | null;
    useColumnLayout?: boolean | null;
  };
  halfImageSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerWidth?: ('container' | 'wide') | null;
    imagePosition?: ('left' | 'right') | null;
    verticalAlignment?: ('top-aligned' | 'center-aligned' | 'bottom-aligned') | null;
    showViewport?: boolean | null;
    animationType?: ('fadeInUp' | 'fadeIn' | 'fadeInLeft' | 'fadeInRight') | null;
    backgroundStyle?: ('' | 'background-navy' | 'background-1' | 'background-2') | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    contentPadding?: ('default' | 'padded' | 'padded2') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      style?: ('primary' | 'secondary' | 'white' | 'outline') | null;
    };
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
      width?: string | null;
      height?: string | null;
    };
  };
  tailoredStylesSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerWidth?: ('container' | 'wide') | null;
    showViewport?: boolean | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  ctaGeneralSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerWidth?: ('container' | 'thin' | 'wide') | null;
    backgroundStyle?: ('' | 'background-1' | 'background-2' | 'background-navy') | null;
    showViewport?: boolean | null;
    animationType?: ('fadeInUp' | 'fadeIn' | 'fadeInLeft' | 'fadeInRight') | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    heading: string;
    headingUrl?: string | null;
    headingColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      style?: ('primary' | 'white' | 'outline') | null;
      backgroundColor?: string | null;
      textColor?: string | null;
    };
    mediaImage?: {
      show?: boolean | null;
      mobile?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt?: string | null;
    };
  };
  finalSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerWidth?: ('container' | 'wide') | null;
    showViewport?: boolean | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    heading: string;
    headingColor?: string | null;
    introText?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder reasons
     */
    reasons?:
      | {
          text: string;
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
    useColumnLayout?: boolean | null;
    closingText?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'intro'
          | 'bannerSection1'
          | 'benefitsSection'
          | 'halfImageSection1'
          | 'tailoredStylesSection'
          | 'ctaGeneralSection'
          | 'finalSection';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    h3FontSize?: string | null;
    h3Color?: string | null;
    h3FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
    /**
     * Enable scroll-based animations using WOW.js
     */
    wowEnabled?: boolean | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
    /**
     * Stack sections vertically on mobile devices
     */
    mobileStackEnabled?: boolean | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mens-services-page-component".
 */
export interface MensServicesPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: string;
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  bannerSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    isDark?: boolean | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          text: string;
          id?: string | null;
        }[]
      | null;
  };
  columnSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * CSS padding value (e.g., 30px, 2rem)
     */
    paddingTop?: string | null;
    /**
     * CSS padding value (e.g., 30px, 2rem)
     */
    paddingBottom?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  bannerSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    isDark?: boolean | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    useColumnLayout?: boolean | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          text: string;
          id?: string | null;
        }[]
      | null;
  };
  columnSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    /**
     * CSS padding value (e.g., 30px, 2rem)
     */
    paddingTop?: string | null;
    /**
     * CSS padding value (e.g., 30px, 2rem)
     */
    paddingBottom?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          text: string;
          id?: string | null;
        }[]
      | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  halfImageSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #003366 for navy)
     */
    backgroundColor?: string | null;
    textColor?: string | null;
    imagePosition?: ('left' | 'right') | null;
    verticalAlignment?: ('top' | 'center' | 'bottom') | null;
    paddingTop?: string | null;
    paddingBottom?: string | null;
    smallHeading?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentPadded?: boolean | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'intro'
          | 'bannerSection1'
          | 'columnSection1'
          | 'bannerSection2'
          | 'columnSection2'
          | 'halfImageSection';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
    /**
     * Default font size for h2 headings
     */
    headingFontSize?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    whiteBackgroundColor?: string | null;
    whiteTextColor?: string | null;
    whiteHoverBackground?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
  };
  listStyles?: {
    bulletColor?: string | null;
    bulletStyle?: ('disc' | 'circle' | 'square' | 'none') | null;
    useColumnsForBullets?: boolean | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
    viewportAnimations?:
      | {
          section?:
            | (
                | 'hero'
                | 'intro'
                | 'bannerSection1'
                | 'columnSection1'
                | 'bannerSection2'
                | 'columnSection2'
                | 'halfImageSection'
              )
            | null;
          animationType?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | 'fadeIn' | 'none') | null;
          id?: string | null;
        }[]
      | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
    /**
     * Stack elements vertically on mobile devices
     */
    mobileStackBehavior?: boolean | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "micro-channeling-page-component".
 */
export interface MicroChannelingPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
      width?: string | null;
      height?: string | null;
    };
  };
  introSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerWidth?: ('container' | 'wide' | 'full') | null;
    layout?: ('option-1' | 'option-2' | 'option-3') | null;
    showViewport?: boolean | null;
    animationType?: ('fadeInUp' | 'fadeIn' | 'fadeInLeft' | 'fadeInRight') | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    logoWidth?: string | null;
    logoHeight?: string | null;
    heading: string;
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  bannerSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    theme?: ('light' | 'dark') | null;
    hideDivider?: boolean | null;
    backgroundStyle?:
      | ('background-1' | 'background-2' | 'background-3' | 'background-6' | 'background-8' | 'background-navy')
      | null;
    showViewport?: boolean | null;
    animationType?: ('fadeInUp' | 'fadeIn' | 'fadeInLeft' | 'fadeInRight') | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingAlignment?: ('left' | 'center' | 'right') | null;
    headingColor?: string | null;
    columnLayout?: ('single' | 'columns-two' | 'columns-three') | null;
    /**
     * Drag to reorder columns
     */
    columns?:
      | {
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          /**
           * Drag to reorder list items
           */
          listItems?:
            | {
                item?: string | null;
                id?: string | null;
              }[]
            | null;
          listStyle?: ('regular' | 'columns') | null;
          id?: string | null;
        }[]
      | null;
  };
  columnSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerWidth?: ('container' | 'wide') | null;
    showViewport?: boolean | null;
    /**
     * CSS class for margin top (e.g., mt-30, mt-0)
     */
    marginTop?: string | null;
    /**
     * CSS class for margin/padding bottom
     */
    marginBottom?: string | null;
    heading: string;
    headingColor?: string | null;
    headingAlignment?: ('text-left' | 'text-center' | 'text-right') | null;
    columnLayout?: ('single' | 'columns-two' | 'columns-three') | null;
    /**
     * Drag to reorder columns
     */
    columns?:
      | {
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          id?: string | null;
        }[]
      | null;
  };
  ctaGeneralSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerWidth?: ('container' | 'thin' | 'wide') | null;
    backgroundStyle?: ('' | 'background-1' | 'background-2' | 'background-navy') | null;
    showViewport?: boolean | null;
    animationType?: ('fadeInUp' | 'fadeIn' | 'fadeInLeft' | 'fadeInRight') | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    heading: string;
    headingUrl?: string | null;
    headingColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      style?: ('primary' | 'white' | 'outline') | null;
      backgroundColor?: string | null;
      textColor?: string | null;
    };
    mediaImage?: {
      show?: boolean | null;
      mobile?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt?: string | null;
    };
  };
  columnMediaSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerWidth?: ('container' | 'wide') | null;
    showViewport?: boolean | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    imagePosition?: ('media-left' | 'media-right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
      width?: string | null;
      height?: string | null;
    };
  };
  halfImageSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerWidth?: ('container' | 'wide') | null;
    imagePosition?: ('left' | 'right') | null;
    verticalAlignment?: ('top-aligned' | 'center-aligned' | 'bottom-aligned') | null;
    showViewport?: boolean | null;
    animationType?: ('fadeInUp' | 'fadeIn' | 'fadeInLeft' | 'fadeInRight') | null;
    backgroundStyle?: ('' | 'background-navy' | 'background-1' | 'background-2') | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    contentPadding?: ('default' | 'padded' | 'padded2') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder benefits
     */
    listItems?:
      | {
          item: string;
          id?: string | null;
        }[]
      | null;
    listStyle?: ('regular' | 'columns') | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
      width?: string | null;
      height?: string | null;
    };
  };
  columnSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerWidth?: ('container' | 'wide') | null;
    showViewport?: boolean | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  bannerSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    theme?: ('light' | 'dark') | null;
    hideDivider?: boolean | null;
    backgroundStyle?:
      | ('background-1' | 'background-2' | 'background-3' | 'background-6' | 'background-8' | 'background-navy')
      | null;
    showViewport?: boolean | null;
    animationType?: ('fadeInUp' | 'fadeIn' | 'fadeInLeft' | 'fadeInRight') | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingAlignment?: ('left' | 'center' | 'right') | null;
    headingColor?: string | null;
    columnLayout?: ('single' | 'columns-two' | 'columns-three') | null;
    /**
     * Drag to reorder columns
     */
    columns?:
      | {
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          id?: string | null;
        }[]
      | null;
  };
  columnMediaSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerWidth?: ('container' | 'wide') | null;
    showViewport?: boolean | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    imagePosition?: ('media-left' | 'media-right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
      width?: string | null;
      height?: string | null;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'intro'
          | 'bannerSection1'
          | 'columnSection1'
          | 'ctaGeneralSection1'
          | 'columnMediaSection1'
          | 'halfImageSection1'
          | 'columnSection2'
          | 'bannerSection2'
          | 'columnMediaSection2';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    h3FontSize?: string | null;
    h3Color?: string | null;
    h3FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
    /**
     * Enable scroll-based animations using WOW.js
     */
    wowEnabled?: boolean | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
    /**
     * Stack sections vertically on mobile devices
     */
    mobileStackEnabled?: boolean | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "permanent-makeup-page-component".
 */
export interface PermanentMakeupPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: string;
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  columnSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  bannerSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  columnSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    layout?: ('two-column' | 'single-column') | null;
    heading: string;
    headingColor?: string | null;
    smallText?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  ctaGeneralSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingLink?: string | null;
    headingColor?: string | null;
    ctaButton: {
      text: string;
      url: string;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
  };
  columnSection3: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  boxGridSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          headingColor?: string | null;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          id?: string | null;
        }[]
      | null;
  };
  columnSection4: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  halfImageSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    imagePosition?: ('left' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  columnSection5: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  bannerSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          text: string;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'intro'
          | 'columnSection1'
          | 'bannerSection1'
          | 'columnSection2'
          | 'ctaGeneralSection1'
          | 'columnSection3'
          | 'boxGridSection'
          | 'columnSection4'
          | 'halfImageSection'
          | 'columnSection5'
          | 'bannerSection2';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
    /**
     * Default font size for h2 headings
     */
    headingFontSize?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "diamondglow-page-component".
 */
export interface DiamondglowPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: string;
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  twoColumnSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    leftColumnContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    rightColumnContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  bannerSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    introText?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    leftColumn?: {
      heading?: string | null;
      /**
       * Drag to reorder bullet points
       */
      bulletPoints?:
        | {
            text: string;
            id?: string | null;
          }[]
        | null;
    };
    rightColumn?: {
      heading?: string | null;
      /**
       * Drag to reorder bullet points
       */
      bulletPoints?:
        | {
            text: string;
            id?: string | null;
          }[]
        | null;
    };
  };
  halfImageSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    imagePosition?: ('left' | 'right') | null;
    verticalAlignment?: ('top' | 'center' | 'bottom') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  columnSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    layoutType?: ('single' | 'two-columns') | null;
    leftColumnContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    rightColumnContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  bannerSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    leftColumn: {
      heading: string;
      headingColor?: string | null;
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
    };
    rightColumn: {
      heading: string;
      headingColor?: string | null;
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
    };
  };
  columnSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'intro'
          | 'twoColumnSection1'
          | 'bannerSection1'
          | 'halfImageSection'
          | 'columnSection1'
          | 'bannerSection2'
          | 'columnSection2';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
    /**
     * Default font size for h2 headings
     */
    headingFontSize?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "skinMedicaPage".
 */
export interface SkinMedicaPage {
  id: string;
  /**
   * Name to identify this component (e.g., SkinMedica)
   */
  componentName: string;
  /**
   * URL-friendly identifier (e.g., skin-medica)
   */
  slug: string;
  isActive?: boolean | null;
  heroModule: {
    enabled?: boolean | null;
    /**
     * CSS classes for the hero module
     */
    className?: string | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundTexture?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
    /**
     * Drag to reorder breadcrumb links
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    breadcrumbLinkColor?: string | null;
    breadcrumbHoverColor?: string | null;
    title: string;
    titleColor?: string | null;
    /**
     * Text content below the title
     */
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    ctaButton?: {
      enabled?: boolean | null;
      label?: string | null;
      url?: string | null;
      className?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
    mediaImage?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
  };
  introModule?: {
    enabled?: boolean | null;
    className?: string | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * Logo displayed in the intro section
     */
    logo?: (string | null) | Media;
    logoAltText?: string | null;
    title?: string | null;
    titleColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentColor?: string | null;
  };
  boxGridModule1?: {
    enabled?: boolean | null;
    className?: string | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          title: string;
          titleColor?: string | null;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          contentColor?: string | null;
          backgroundColor?: string | null;
          borderColor?: string | null;
          customClass?: string | null;
          id?: string | null;
        }[]
      | null;
    boxBackgroundColor?: string | null;
    boxBorderColor?: string | null;
    boxHoverEffect?: ('none' | 'scale' | 'shadow' | 'lift') | null;
  };
  halfImageModule?: {
    enabled?: boolean | null;
    className?: string | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    imagePosition?: ('left' | 'right') | null;
    image?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
    title?: string | null;
    titleColor?: string | null;
    subtitle?: string | null;
    subtitleColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentColor?: string | null;
    /**
     * Drag to reorder list items
     */
    listItems?:
      | {
          text: string;
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
    listStyle?: ('bullet' | 'numbered' | 'none') | null;
  };
  bannerModule?: {
    enabled?: boolean | null;
    className?: string | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
    title?: string | null;
    titleColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentColor?: string | null;
    enableTwoColumns?: boolean | null;
    columnOneContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    columnTwoContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder list items
     */
    listItems?:
      | {
          text: string;
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
    listColumns?: ('single' | 'columns') | null;
    bottomContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  boxGridModule2?: {
    enabled?: boolean | null;
    className?: string | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    contentBefore?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentBeforeColor?: string | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          title: string;
          titleColor?: string | null;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          contentColor?: string | null;
          backgroundColor?: string | null;
          borderColor?: string | null;
          customClass?: string | null;
          id?: string | null;
        }[]
      | null;
    contentAfter?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentAfterColor?: string | null;
    boxBackgroundColor?: string | null;
    boxBorderColor?: string | null;
    boxHoverEffect?: ('none' | 'scale' | 'shadow' | 'lift') | null;
  };
  /**
   * Drag to reorder page sections
   */
  sectionOrder?:
    | {
        sectionType: 'hero' | 'intro' | 'boxGrid1' | 'halfImage' | 'banner' | 'boxGrid2';
        enabled?: boolean | null;
        /**
         * Optional HTML ID attribute
         */
        customId?: string | null;
        customClass?: string | null;
        id?: string | null;
      }[]
    | null;
  globalStyling?: {
    containerBackgroundColor?: string | null;
    /**
     * CSS max-width value (e.g., 1200px)
     */
    containerMaxWidth?: string | null;
    fontFamily?: string | null;
    primaryColor?: string | null;
    secondaryColor?: string | null;
    accentColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
    /**
     * Additional CSS rules to apply globally
     */
    customCss?: string | null;
  };
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaKeywords?: string | null;
    ogImage?: (string | null) | Media;
    canonicalUrl?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "skincareServicesPage".
 */
export interface SkincareServicesPage {
  id: string;
  /**
   * Name to identify this component (e.g., Skincare Services)
   */
  componentName: string;
  /**
   * URL-friendly identifier (e.g., skincare-services)
   */
  slug: string;
  isActive?: boolean | null;
  heroModule: {
    enabled?: boolean | null;
    className?: string | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundTexture?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
    /**
     * Drag to reorder breadcrumb links
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    breadcrumbLinkColor?: string | null;
    breadcrumbHoverColor?: string | null;
    title: string;
    titleColor?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    ctaButton?: {
      enabled?: boolean | null;
      label?: string | null;
      url?: string | null;
      className?: string | null;
    };
    mediaImage?: {
      desktop?: (string | null) | Media;
      tablet?: (string | null) | Media;
      mobile?: (string | null) | Media;
      smallMobile?: (string | null) | Media;
      altText?: string | null;
    };
  };
  introModule?: {
    enabled?: boolean | null;
    className?: string | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    logo?: (string | null) | Media;
    logoAltText?: string | null;
    title?: string | null;
    titleColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentColor?: string | null;
  };
  /**
   * Drag to reorder double banner sections
   */
  doubleBannerModules?:
    | {
        enabled?: boolean | null;
        className?: string | null;
        /**
         * e.g., "row mb-40" or "row mb-80-desktop mb-40-tablet-down"
         */
        rowClassName?: string | null;
        backgroundColor?: string | null;
        leftBanner: {
          title: string;
          titleColor?: string | null;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          contentColor?: string | null;
          image?: {
            desktop?: (string | null) | Media;
            tablet?: (string | null) | Media;
            mobile?: (string | null) | Media;
            smallMobile?: (string | null) | Media;
            altText?: string | null;
          };
        };
        rightBanner: {
          title: string;
          titleColor?: string | null;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          contentColor?: string | null;
          image?: {
            desktop?: (string | null) | Media;
            tablet?: (string | null) | Media;
            mobile?: (string | null) | Media;
            smallMobile?: (string | null) | Media;
            altText?: string | null;
          };
        };
        id?: string | null;
      }[]
    | null;
  ctaGeneralModule?: {
    enabled?: boolean | null;
    className?: string | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    title?: string | null;
    titleUrl?: string | null;
    titleColor?: string | null;
    button?: {
      label?: string | null;
      url?: string | null;
      className?: string | null;
    };
  };
  /**
   * Drag to reorder column sections
   */
  columnModules?:
    | {
        enabled?: boolean | null;
        /**
         * e.g., "mod_column viewport container has-media"
         */
        className?: string | null;
        /**
         * e.g., "row mt-30 pb-0 media-left"
         */
        rowClassName?: string | null;
        backgroundColor?: string | null;
        textColor?: string | null;
        hasMedia?: boolean | null;
        mediaPosition?: ('left' | 'right') | null;
        title?: string | null;
        titleTag?: ('h2' | 'h3' | 'h4') | null;
        titleColor?: string | null;
        content?: {
          root: {
            type: string;
            children: {
              type: any;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        contentColor?: string | null;
        /**
         * Drag to reorder list items
         */
        listItems?:
          | {
              text: string;
              textColor?: string | null;
              id?: string | null;
            }[]
          | null;
        /**
         * Enable to show list items in multiple columns
         */
        listColumns?: boolean | null;
        mediaImage?: {
          desktop?: (string | null) | Media;
          tablet?: (string | null) | Media;
          mobile?: (string | null) | Media;
          smallMobile?: (string | null) | Media;
          altText?: string | null;
          width?: number | null;
          height?: number | null;
        };
        id?: string | null;
      }[]
    | null;
  /**
   * Drag to reorder page sections
   */
  sectionOrder?:
    | {
        sectionType: 'hero' | 'intro' | 'doubleBanners' | 'ctaGeneral' | 'columnModules';
        enabled?: boolean | null;
        /**
         * Optional HTML ID attribute
         */
        customId?: string | null;
        customClass?: string | null;
        id?: string | null;
      }[]
    | null;
  globalStyling?: {
    containerBackgroundColor?: string | null;
    /**
     * CSS max-width value (e.g., 1200px)
     */
    containerMaxWidth?: string | null;
    fontFamily?: string | null;
    primaryColor?: string | null;
    secondaryColor?: string | null;
    accentColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
    /**
     * Additional CSS rules to apply globally
     */
    customCss?: string | null;
  };
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaKeywords?: string | null;
    ogImage?: (string | null) | Media;
    canonicalUrl?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "weightloss-page-component".
 */
export interface WeightlossPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    /**
     * Main description text in hero section
     */
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
      /**
       * Additional CSS classes for styling
       */
      buttonClass?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  twoColumnImageSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    logoWidth?: number | null;
    logoHeight?: number | null;
    leftColumnImage?: (string | null) | Media;
    leftColumnImageAlt?: string | null;
    rightColumnImage?: (string | null) | Media;
    rightColumnImageAlt?: string | null;
    /**
     * e.g., wow fadeInLeft, wow fadeInRight
     */
    animationClass?: string | null;
  };
  bannerSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    theme?: ('light' | 'dark') | null;
    hideDivider?: boolean | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    headingAlignment?: ('text-left' | 'text-center' | 'text-right') | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentLayout?: ('single' | 'columns-two') | null;
  };
  videoSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    heading: string;
    headingColor?: string | null;
    /**
     * YouTube or video URL
     */
    videoUrl: string;
    videoThumbnail?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt?: string | null;
    };
    ariaLabel?: string | null;
    animationClass?: string | null;
  };
  halfImageSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    imagePosition?: ('left' | 'right') | null;
    verticalAlignment?: ('top-aligned' | 'center-aligned' | 'bottom-aligned') | null;
    /**
     * CSS class for margin bottom
     */
    marginBottom?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          text: string;
          id?: string | null;
        }[]
      | null;
    bulletPointsLayout?: ('single' | 'columns') | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
    animationClass?: string | null;
  };
  twoColumnSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    /**
     * CSS class for padding top
     */
    paddingTop?: string | null;
    verticalAlign?: boolean | null;
    leftColumnContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    rightColumnContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          text: string;
          id?: string | null;
        }[]
      | null;
    bulletPointsLayout?: ('single' | 'columns') | null;
  };
  bannerSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    theme?: ('light' | 'dark') | null;
    hideDivider?: boolean | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    headingAlignment?: ('text-left' | 'text-center' | 'text-right') | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          text: string;
          id?: string | null;
        }[]
      | null;
    bulletPointsLayout?: ('single' | 'columns') | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section: 'hero' | 'twoColumnImage1' | 'banner1' | 'video' | 'halfImage1' | 'twoColumn' | 'banner2';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    h3FontSize?: string | null;
    h3Color?: string | null;
    h3FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
    /**
     * Spacing between paragraphs
     */
    paragraphSpacing?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    whiteButtonBackground?: string | null;
    whiteButtonTextColor?: string | null;
    whiteButtonHoverBackground?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
    letterSpacing?: string | null;
    textTransform?: ('none' | 'uppercase' | 'lowercase' | 'capitalize') | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 0.5s, 1s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    fadeInUpDuration?: string | null;
    fadeInLeftDuration?: string | null;
    fadeInRightDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
    /**
     * Delay before animation starts
     */
    animationDelay?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
    /**
     * Add custom structured data in JSON-LD format
     */
    structuredData?: string | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    highContrastMode?: boolean | null;
    keyboardNavigationEnabled?: boolean | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
    /**
     * Stack side-by-side sections vertically on mobile
     */
    mobileStackSections?: boolean | null;
    /**
     * Select sections to hide on mobile devices
     */
    hideElementsOnMobile?:
      | {
          section?: ('logo' | 'backgroundImages' | 'animations') | null;
          id?: string | null;
        }[]
      | null;
  };
  performanceSettings?: {
    /**
     * Load images only when they come into view
     */
    lazyLoadImages?: boolean | null;
    /**
     * Automatically optimize and compress images
     */
    optimizeImages?: boolean | null;
    /**
     * Image compression quality (1-100)
     */
    imageQuality?: number | null;
    preloadCriticalAssets?: boolean | null;
    minifyCSS?: boolean | null;
    minifyJS?: boolean | null;
  };
  videoSettings?: {
    autoplay?: boolean | null;
    showControls?: boolean | null;
    muted?: boolean | null;
    loop?: boolean | null;
    videoPlayerTheme?: ('default' | 'light' | 'dark') | null;
  };
  layoutSettings?: {
    containerWidth?: ('default' | 'wide' | 'full' | 'narrow') | null;
    /**
     * Padding for sections (e.g., 40px 0, 3rem 0)
     */
    sectionPadding?: string | null;
    contentAlignment?: ('left' | 'center' | 'right') | null;
    /**
     * Gap between grid items (e.g., 20px, 1.5rem)
     */
    gridGap?: string | null;
  };
  customCSS?: {
    enabled?: boolean | null;
    /**
     * Add custom CSS styles
     */
    css?: string | null;
  };
  customJS?: {
    enabled?: boolean | null;
    /**
     * Add custom JavaScript code
     */
    js?: string | null;
    loadPosition?: ('header' | 'footer') | null;
  };
  advancedSettings?: {
    /**
     * Add custom CSS classes to the main container
     */
    customClasses?: string | null;
    customAttributes?:
      | {
          attribute: string;
          value: string;
          id?: string | null;
        }[]
      | null;
    /**
     * Add custom data attributes for tracking/analytics
     */
    dataAttributes?:
      | {
          /**
           * Without "data-" prefix (e.g., "module", "s3-module")
           */
          name: string;
          value?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  trackingSettings?: {
    enableTracking?: boolean | null;
    /**
     * e.g., UA-XXXXXXXXX-X or G-XXXXXXXXXX
     */
    googleAnalyticsId?: string | null;
    facebookPixelId?: string | null;
    /**
     * Add custom tracking scripts
     */
    customTrackingCode?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  /**
   * Component version for tracking changes
   */
  version?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "semaglutide-injections-page-component".
 */
export interface SemaglutideInjectionsPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    /**
     * Main description text in hero section
     */
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
      /**
       * Additional CSS classes for styling
       */
      buttonClass?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * CSS padding value (e.g., 0, 20px)
     */
    paddingBottom?: string | null;
    width?: ('default' | 'wide') | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: string;
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  bannerSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    theme?: ('light' | 'dark') | null;
    hideDivider?: boolean | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          text: string;
          id?: string | null;
        }[]
      | null;
    bulletPointsLayout?: ('single' | 'columns') | null;
  };
  videoSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    heading: string;
    headingColor?: string | null;
    /**
     * YouTube or video URL
     */
    videoUrl: string;
    videoThumbnail?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt?: string | null;
    };
    ariaLabel?: string | null;
    animationClass?: string | null;
  };
  halfImageSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    imagePosition?: ('left' | 'right') | null;
    /**
     * CSS class for margin bottom
     */
    marginBottom?: string | null;
    /**
     * Add padding to copy section
     */
    copyPadded?: boolean | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          text: string;
          id?: string | null;
        }[]
      | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
    animationClass?: string | null;
  };
  columnSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * CSS class for margin bottom
     */
    marginBottom?: string | null;
    heading: string;
    headingColor?: string | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          text: string;
          id?: string | null;
        }[]
      | null;
    bulletPointsLayout?: ('single' | 'columns') | null;
  };
  ctaBeforeAfterSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    title?: string | null;
    titleColor?: string | null;
    /**
     * Before & After patient images
     */
    patients?:
      | {
          /**
           * Link to full gallery item
           */
          url?: string | null;
          image?: {
            mobile?: (string | null) | Media;
            tablet?: (string | null) | Media;
            desktop?: (string | null) | Media;
            alt?: string | null;
          };
          id?: string | null;
        }[]
      | null;
    viewGalleryButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      ariaLabel?: string | null;
    };
  };
  boxGridSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    theme?: ('light' | 'dark') | null;
    gridLayout?: ('default' | 'wider' | 'option-3') | null;
    hasBackground?: boolean | null;
    heading?: string | null;
    headingColor?: string | null;
    subheading?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          backgroundColor?: string | null;
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  columnSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    hasMedia?: boolean | null;
    mediaPosition?: ('left' | 'right') | null;
    /**
     * CSS class for margin top
     */
    marginTop?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt?: string | null;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'intro'
          | 'banner1'
          | 'video'
          | 'halfImage1'
          | 'columnSection1'
          | 'ctaBeforeAfter'
          | 'boxGrid'
          | 'columnSection2';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    h3FontSize?: string | null;
    h3Color?: string | null;
    h3FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
    /**
     * Spacing between paragraphs
     */
    paragraphSpacing?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    whiteButtonBackground?: string | null;
    whiteButtonTextColor?: string | null;
    whiteButtonHoverBackground?: string | null;
    viewMoreButtonBackground?: string | null;
    viewMoreButtonTextColor?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
    letterSpacing?: string | null;
    textTransform?: ('none' | 'uppercase' | 'lowercase' | 'capitalize') | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 0.5s, 1s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    fadeInUpDuration?: string | null;
    fadeInLeftDuration?: string | null;
    fadeInRightDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
    /**
     * Delay before animation starts
     */
    animationDelay?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
    /**
     * Add custom structured data in JSON-LD format
     */
    structuredData?: string | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    highContrastMode?: boolean | null;
    keyboardNavigationEnabled?: boolean | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
    /**
     * Stack side-by-side sections vertically on mobile
     */
    mobileStackSections?: boolean | null;
    /**
     * Select sections to hide on mobile devices
     */
    hideElementsOnMobile?:
      | {
          section?: ('logo' | 'backgroundImages' | 'animations') | null;
          id?: string | null;
        }[]
      | null;
  };
  performanceSettings?: {
    /**
     * Load images only when they come into view
     */
    lazyLoadImages?: boolean | null;
    /**
     * Automatically optimize and compress images
     */
    optimizeImages?: boolean | null;
    /**
     * Image compression quality (1-100)
     */
    imageQuality?: number | null;
    preloadCriticalAssets?: boolean | null;
    minifyCSS?: boolean | null;
    minifyJS?: boolean | null;
  };
  videoSettings?: {
    autoplay?: boolean | null;
    showControls?: boolean | null;
    muted?: boolean | null;
    loop?: boolean | null;
    videoPlayerTheme?: ('default' | 'light' | 'dark') | null;
  };
  layoutSettings?: {
    containerWidth?: ('default' | 'wide' | 'full' | 'narrow') | null;
    /**
     * Padding for sections (e.g., 40px 0, 3rem 0)
     */
    sectionPadding?: string | null;
    contentAlignment?: ('left' | 'center' | 'right') | null;
    /**
     * Gap between grid items (e.g., 20px, 1.5rem)
     */
    gridGap?: string | null;
  };
  customCSS?: {
    enabled?: boolean | null;
    /**
     * Add custom CSS styles
     */
    css?: string | null;
  };
  customJS?: {
    enabled?: boolean | null;
    /**
     * Add custom JavaScript code
     */
    js?: string | null;
    loadPosition?: ('header' | 'footer') | null;
  };
  advancedSettings?: {
    /**
     * Add custom CSS classes to the main container
     */
    customClasses?: string | null;
    customAttributes?:
      | {
          attribute: string;
          value: string;
          id?: string | null;
        }[]
      | null;
    /**
     * Add custom data attributes for tracking/analytics
     */
    dataAttributes?:
      | {
          /**
           * Without "data-" prefix (e.g., "module", "s3-module")
           */
          name: string;
          value?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  trackingSettings?: {
    enableTracking?: boolean | null;
    /**
     * e.g., UA-XXXXXXXXX-X or G-XXXXXXXXXX
     */
    googleAnalyticsId?: string | null;
    facebookPixelId?: string | null;
    /**
     * Add custom tracking scripts
     */
    customTrackingCode?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  /**
   * Component version for tracking changes
   */
  version?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "specials-rewards-page-component".
 */
export interface SpecialsRewardsPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  indexListSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    hoverBackgroundColor?: string | null;
    hoverTextColor?: string | null;
    /**
     * Drag to reorder navigation items
     */
    navigationItems?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  indexCardsSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    cardBackgroundColor?: string | null;
    cardHoverBackgroundColor?: string | null;
    titleColor?: string | null;
    overlayTextColor?: string | null;
    /**
     * Background color for overlay on image hover
     */
    overlayBackgroundColor?: string | null;
    /**
     * Drag to reorder cards
     */
    cards?:
      | {
          title: string;
          url: string;
          ariaLabel?: string | null;
          /**
           * Text displayed on image hover
           */
          overlayText?: string | null;
          image: {
            mobile?: (string | null) | Media;
            tablet?: (string | null) | Media;
            desktop?: (string | null) | Media;
            alt: string;
          };
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section: 'hero' | 'indexList' | 'indexCards';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
  };
  cardStyles?: {
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * CSS box-shadow value
     */
    boxShadow?: string | null;
    hoverBoxShadow?: string | null;
    padding?: string | null;
    /**
     * e.g., 16/9, 4/3
     */
    imageAspectRatio?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for hover transitions
     */
    hoverTransitionDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
    mobileCardColumns?: ('1' | '2') | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "specials-page-component".
 */
export interface SpecialsPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * e.g., less-padding, mobile-stack
     */
    className?: string | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection: {
    show?: boolean | null;
    /**
     * e.g., option-1, wide, viewport
     */
    className?: string | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * CSS padding value (e.g., 0, 20px, 2rem)
     */
    paddingBottom?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    logoWidth?: string | null;
    logoHeight?: string | null;
    heading: string;
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  bannerSection1: {
    show?: boolean | null;
    /**
     * e.g., dark, hide-divider, viewport, background-1
     */
    className?: string | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    textAlign?: ('left' | 'center' | 'right') | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  columnSection1?: {
    show?: boolean | null;
    /**
     * e.g., viewport, container, text-center
     */
    className?: string | null;
    backgroundColor?: string | null;
    textAlign?: ('left' | 'center' | 'right') | null;
    /**
     * Drag to reorder columns
     */
    columns?:
      | {
          /**
           * CSS width or max-width class (e.g., mw-50 for max-width 50%)
           */
          columnWidth?: string | null;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          image?: {
            url?: (string | null) | Media;
            width?: string | null;
            height?: string | null;
            alt?: string | null;
          };
          id?: string | null;
        }[]
      | null;
  };
  columnSection2?: {
    show?: boolean | null;
    /**
     * e.g., viewport, container, text-center
     */
    className?: string | null;
    backgroundColor?: string | null;
    textAlign?: ('left' | 'center' | 'right') | null;
    /**
     * Drag to reorder columns
     */
    columns?:
      | {
          /**
           * CSS width or max-width class (e.g., mw-50 for max-width 50%)
           */
          columnWidth?: string | null;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          image?: {
            url?: (string | null) | Media;
            width?: string | null;
            height?: string | null;
            alt?: string | null;
          };
          id?: string | null;
        }[]
      | null;
  };
  contactFormSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    formSettings?: {
      formId?: string | null;
      formAction?: string | null;
      redirectUrl?: string | null;
      emailSubject?: string | null;
    };
    /**
     * Drag to reorder form fields
     */
    formFields?:
      | {
          fieldType: 'text' | 'email' | 'tel' | 'textarea' | 'select' | 'checkbox' | 'hidden';
          fieldName: string;
          fieldId: string;
          label?: string | null;
          placeholder?: string | null;
          required?: boolean | null;
          defaultValue?: string | null;
          /**
           * e.g., col1, col2
           */
          columnClass?: string | null;
          /**
           * e.g., hidden-row, follow-up, opt-in
           */
          additionalClasses?: string | null;
          selectOptions?:
            | {
                label: string;
                value: string;
                id?: string | null;
              }[]
            | null;
          validationMessage?: string | null;
          id?: string | null;
        }[]
      | null;
    buttonText?: string | null;
    buttonBackgroundColor?: string | null;
    buttonTextColor?: string | null;
    buttonHoverBackgroundColor?: string | null;
    /**
     * Text displayed at bottom of form (messaging terms, privacy policy, etc.)
     */
    privacyNotice?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    enableRecaptcha?: boolean | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section: 'hero' | 'intro' | 'bannerSection1' | 'columnSection1' | 'columnSection2' | 'contactForm';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
    paragraphSpacing?: string | null;
  };
  formStyles?: {
    inputBackgroundColor?: string | null;
    inputTextColor?: string | null;
    inputBorderColor?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    inputBorderRadius?: string | null;
    inputPadding?: string | null;
    labelColor?: string | null;
    labelFontSize?: string | null;
    labelFontWeight?: string | null;
    errorColor?: string | null;
    focusBorderColor?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
    disabledBackgroundColor?: string | null;
    disabledTextColor?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
    /**
     * Enable scroll-triggered animations
     */
    enableWowAnimations?: boolean | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
    /**
     * Add schema.org structured data in JSON-LD format
     */
    structuredData?: string | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
    keyboardNavigationEnabled?: boolean | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
    /**
     * Automatically stack sections vertically on mobile devices
     */
    mobileStackSections?: boolean | null;
    /**
     * Comma-separated list of element classes to hide on mobile
     */
    mobileHideElements?: string | null;
  };
  advancedSettings?: {
    /**
     * Add custom CSS styles for this page
     */
    customCSS?: string | null;
    /**
     * Add custom JavaScript code for this page
     */
    customJS?: string | null;
    /**
     * Add custom data attributes to page elements
     */
    dataAttributes?:
      | {
          /**
           * e.g., data-tracking-id
           */
          attribute?: string | null;
          value?: string | null;
          targetSection?:
            | ('hero' | 'intro' | 'bannerSection1' | 'columnSection1' | 'columnSection2' | 'contactForm')
            | null;
          id?: string | null;
        }[]
      | null;
    lazyLoadImages?: boolean | null;
    enableCaching?: boolean | null;
  };
  integrationSettings?: {
    /**
     * GA tracking ID for this page
     */
    googleAnalyticsId?: string | null;
    facebookPixelId?: string | null;
    /**
     * Google reCAPTCHA v3 site key
     */
    recaptchaSiteKey?: string | null;
    /**
     * Google reCAPTCHA v3 secret key (stored securely)
     */
    recaptchaSecretKey?: string | null;
    /**
     * Tags for marketing automation platforms
     */
    marketingAutomationTags?:
      | {
          platform?: ('hubspot' | 'marketo' | 'pardot' | 'activecampaign' | 'other') | null;
          tagCode?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  performanceSettings?: {
    imageOptimization?: boolean | null;
    /**
     * Compression quality (1-100)
     */
    imageQuality?: string | null;
    imageFormat?: ('auto' | 'webp' | 'jpeg' | 'png') | null;
    minifyCSS?: boolean | null;
    minifyJS?: boolean | null;
    deferNonCriticalCSS?: boolean | null;
    preloadCriticalAssets?: boolean | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "alle-rewards-page-component".
 */
export interface AlleRewardsPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * e.g., banner, mobile-stack
     */
    className?: string | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection: {
    show?: boolean | null;
    /**
     * e.g., option-1, viewport, container
     */
    className?: string | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * CSS padding value (e.g., 0, 20px, 2rem)
     */
    paddingBottom?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    logoWidth?: string | null;
    logoHeight?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  halfImageSection: {
    show?: boolean | null;
    /**
     * e.g., viewport, half-image, container
     */
    className?: string | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    imagePosition?: ('left' | 'flipped') | null;
    verticalAlignment?: ('top' | 'center' | 'bottom') | null;
    /**
     * CSS margin value (e.g., 0, mb-0)
     */
    marginBottom?: string | null;
    copyPadding?: boolean | null;
    heading: string;
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  columnSection1: {
    show?: boolean | null;
    /**
     * e.g., viewport, container, has-media
     */
    className?: string | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    mediaPosition?: ('media-left' | 'media-right') | null;
    /**
     * e.g., mb-30, mb-0
     */
    marginBottom?: string | null;
    heading: string;
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    mediaImage?: {
      mobile?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt?: string | null;
      width?: string | null;
      height?: string | null;
    };
  };
  bannerSection1?: {
    show?: boolean | null;
    /**
     * e.g., dark, hide-divider, viewport, background-4
     */
    className?: string | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    textAlign?: ('left' | 'center' | 'right') | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Main content/image to display in banner
     */
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Upload an image to display as banner content
     */
    contentImage?: {
      url?: (string | null) | Media;
      alt?: string | null;
      width?: string | null;
      height?: string | null;
    };
  };
  columnSection2: {
    show?: boolean | null;
    /**
     * e.g., viewport, container, has-media
     */
    className?: string | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    mediaPosition?: ('media-left' | 'media-right') | null;
    /**
     * e.g., mt-30, mt-0
     */
    marginTop?: string | null;
    heading: string;
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
      width?: string | null;
      height?: string | null;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section: 'hero' | 'intro' | 'halfImage' | 'columnSection1' | 'bannerSection1' | 'columnSection2';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    h3FontSize?: string | null;
    h3Color?: string | null;
    h3FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
    paragraphSpacing?: string | null;
    /**
     * CSS list-style-type (e.g., disc, circle, square)
     */
    listStyleType?: string | null;
    listMarginLeft?: string | null;
  };
  layoutSettings?: {
    /**
     * Width percentage for half image sections (e.g., 50%)
     */
    halfImageContentWidth?: string | null;
    /**
     * Gap between columns (e.g., 30px, 2rem)
     */
    columnGap?: string | null;
    /**
     * Gap between rows (e.g., 20px, 1.5rem)
     */
    rowGap?: string | null;
    imageObjectFit?: ('cover' | 'contain' | 'fill' | 'none') | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Delay before fade in starts (e.g., 0.2s)
     */
    fadeInDelay?: string | null;
    /**
     * Duration for slide animations
     */
    slideInDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
    /**
     * Enable scroll-triggered animations
     */
    enableWowAnimations?: boolean | null;
    /**
     * Distance from viewport to trigger animation (px)
     */
    wowOffset?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
    /**
     * Add schema.org structured data in JSON-LD format
     */
    structuredData?: string | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
    keyboardNavigationEnabled?: boolean | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
    /**
     * Automatically stack sections vertically on mobile devices
     */
    mobileStackSections?: boolean | null;
    /**
     * Max height for images on mobile (e.g., 300px)
     */
    mobileImageHeight?: string | null;
    /**
     * Comma-separated list of element classes to hide on mobile
     */
    mobileHideElements?: string | null;
  };
  advancedSettings?: {
    /**
     * Add custom CSS styles for this page
     */
    customCSS?: string | null;
    /**
     * Add custom JavaScript code for this page
     */
    customJS?: string | null;
    /**
     * Add custom data attributes to page elements
     */
    dataAttributes?:
      | {
          /**
           * e.g., data-tracking-id
           */
          attribute?: string | null;
          value?: string | null;
          targetSection?:
            | ('hero' | 'intro' | 'halfImage' | 'columnSection1' | 'bannerSection1' | 'columnSection2')
            | null;
          id?: string | null;
        }[]
      | null;
    lazyLoadImages?: boolean | null;
    enableCaching?: boolean | null;
    /**
     * Preload above-the-fold images for better performance
     */
    preloadImages?: boolean | null;
  };
  integrationSettings?: {
    /**
     * GA tracking ID for this page
     */
    googleAnalyticsId?: string | null;
    facebookPixelId?: string | null;
    /**
     * Enable tracking for Allē rewards program
     */
    alleTrackingEnabled?: boolean | null;
    /**
     * Custom tracking code for Allē integration
     */
    alleTrackingCode?: string | null;
    /**
     * Tags for marketing automation platforms
     */
    marketingAutomationTags?:
      | {
          platform?: ('hubspot' | 'marketo' | 'pardot' | 'activecampaign' | 'other') | null;
          tagCode?: string | null;
          id?: string | null;
        }[]
      | null;
    conversionTrackingEnabled?: boolean | null;
  };
  performanceSettings?: {
    imageOptimization?: boolean | null;
    /**
     * Compression quality (1-100)
     */
    imageQuality?: string | null;
    imageFormat?: ('auto' | 'webp' | 'avif' | 'jpeg' | 'png') | null;
    /**
     * Comma-separated widths for responsive images (e.g., 420,800,1400)
     */
    responsiveImageSizes?: string | null;
    minifyCSS?: boolean | null;
    minifyJS?: boolean | null;
    deferNonCriticalCSS?: boolean | null;
    preloadCriticalAssets?: boolean | null;
    enableCDN?: boolean | null;
    /**
     * Base URL for CDN (e.g., https://cdn.example.com)
     */
    cdnUrl?: string | null;
  };
  contentSettings?: {
    /**
     * Automatically add ® symbols to trademarked terms
     */
    showRegisteredTrademarks?: boolean | null;
    /**
     * List of terms that should display ® symbol
     */
    trademarkedTerms?:
      | {
          term: string;
          id?: string | null;
        }[]
      | null;
    phoneNumberFormat?: ('formatted' | 'dashed' | 'dotted' | 'plain') | null;
    defaultPhoneNumber?: string | null;
    externalLinksOpenNewTab?: boolean | null;
  };
  brandSettings?: {
    alleLogoDisplay?: boolean | null;
    alleLogo?: (string | null) | Media;
    alleLogoAlt?: string | null;
    brandColors?: {
      /**
       * Primary color for Allē branding
       */
      allePrimary?: string | null;
      alleSecondary?: string | null;
      alleAccent?: string | null;
    };
  };
  ctaSettings?: {
    /**
     * Add a floating or sticky CTA button
     */
    enableGlobalCTA?: boolean | null;
    globalCTAText?: string | null;
    globalCTAUrl?: string | null;
    globalCTAPosition?: ('bottom-right' | 'bottom-left' | 'top-right' | 'top-left' | 'bottom-center') | null;
    ctaBackgroundColor?: string | null;
    ctaTextColor?: string | null;
    ctaHoverBackgroundColor?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "aspire-rewards-page-component".
 */
export interface AspireRewardsPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * e.g., banner, mobile-stack
     */
    className?: string | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection: {
    show?: boolean | null;
    /**
     * e.g., option-1, viewport, container
     */
    className?: string | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * CSS padding value (e.g., 0, 20px, 2rem)
     */
    paddingBottom?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    logoWidth?: string | null;
    logoHeight?: string | null;
    heading: string;
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  halfImageSection: {
    show?: boolean | null;
    /**
     * e.g., viewport, half-image, container
     */
    className?: string | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    imagePosition?: ('left' | 'flipped') | null;
    verticalAlignment?: ('top' | 'center' | 'bottom') | null;
    /**
     * CSS margin classes (e.g., mb-80-desktop mb-40-tablet-down)
     */
    marginBottom?: string | null;
    copyPadding?: boolean | null;
    heading: string;
    headingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    /**
     * Drag to reorder product links in the list
     */
    productLinks?:
      | {
          name: string;
          url?: string | null;
          openInNewTab?: boolean | null;
          id?: string | null;
        }[]
      | null;
    listStyle?: ('single' | 'columns' | 'columns-3') | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  boxGridSection?: {
    show?: boolean | null;
    /**
     * e.g., three-boxes, container, option-1, no-stacking, bkg-image, wider
     */
    className?: string | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    boxBackgroundColor?: string | null;
    boxTextColor?: string | null;
    boxHoverBackgroundColor?: string | null;
    numberOfColumns?: ('one-box' | 'two-boxes' | 'three-boxes' | 'four-boxes') | null;
    /**
     * Stack boxes vertically on mobile devices
     */
    enableStacking?: boolean | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          headingColor?: string | null;
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          icon?: (string | null) | Media;
          iconAlt?: string | null;
          link?: {
            url?: string | null;
            text?: string | null;
            openInNewTab?: boolean | null;
          };
          /**
           * Override global box background for this box
           */
          customBackgroundColor?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section: 'hero' | 'intro' | 'halfImage' | 'boxGrid';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
    paragraphSpacing?: string | null;
    /**
     * CSS list-style-type (e.g., disc, circle, square, none)
     */
    listStyleType?: string | null;
    listMarginLeft?: string | null;
  };
  boxGridStyles?: {
    /**
     * Internal padding for boxes (e.g., 30px, 2rem)
     */
    boxPadding?: string | null;
    boxBorderRadius?: string | null;
    /**
     * CSS border value (e.g., 1px solid #ccc)
     */
    boxBorder?: string | null;
    boxShadow?: string | null;
    boxHoverShadow?: string | null;
    /**
     * Space between boxes (e.g., 20px, 1.5rem)
     */
    boxGap?: string | null;
    boxMinHeight?: string | null;
    boxTextAlign?: ('left' | 'center' | 'right') | null;
  };
  layoutSettings?: {
    /**
     * Width percentage for half image sections (e.g., 50%)
     */
    halfImageContentWidth?: string | null;
    /**
     * Gap between columns (e.g., 30px, 2rem)
     */
    columnGap?: string | null;
    /**
     * Gap between rows (e.g., 20px, 1.5rem)
     */
    rowGap?: string | null;
    imageObjectFit?: ('cover' | 'contain' | 'fill' | 'none') | null;
    /**
     * Expand content to use more width
     */
    widerLayout?: boolean | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Delay before fade in starts (e.g., 0.2s)
     */
    fadeInDelay?: string | null;
    /**
     * Duration for fade left animations
     */
    fadeLeftDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
    /**
     * Enable scroll-triggered animations
     */
    enableWowAnimations?: boolean | null;
    /**
     * Distance from viewport to trigger animation (px)
     */
    wowOffset?: string | null;
    /**
     * Animate boxes sequentially with delay
     */
    staggerBoxAnimations?: boolean | null;
    /**
     * Delay between box animations (e.g., 0.2s)
     */
    boxAnimationDelay?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
    /**
     * Add schema.org structured data in JSON-LD format
     */
    structuredData?: string | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
    keyboardNavigationEnabled?: boolean | null;
    /**
     * Add visual indicators for external links
     */
    linkIndicators?: boolean | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
    /**
     * Automatically stack sections vertically on mobile devices
     */
    mobileStackSections?: boolean | null;
    mobileBoxColumns?: ('1' | '2') | null;
    tabletBoxColumns?: ('1' | '2' | '3') | null;
    /**
     * Max height for images on mobile (e.g., 300px)
     */
    mobileImageHeight?: string | null;
    /**
     * Comma-separated list of element classes to hide on mobile
     */
    mobileHideElements?: string | null;
  };
  advancedSettings?: {
    /**
     * Add custom CSS styles for this page
     */
    customCSS?: string | null;
    /**
     * Add custom JavaScript code for this page
     */
    customJS?: string | null;
    /**
     * Add custom data attributes to page elements
     */
    dataAttributes?:
      | {
          /**
           * e.g., data-tracking-id
           */
          attribute?: string | null;
          value?: string | null;
          targetSection?: ('hero' | 'intro' | 'halfImage' | 'boxGrid') | null;
          id?: string | null;
        }[]
      | null;
    lazyLoadImages?: boolean | null;
    enableCaching?: boolean | null;
    /**
     * Preload above-the-fold images for better performance
     */
    preloadImages?: boolean | null;
    /**
     * Define custom margin classes for different breakpoints
     */
    responsiveMargins?: {
      desktopMargin?: string | null;
      tabletMargin?: string | null;
      mobileMargin?: string | null;
    };
  };
  integrationSettings?: {
    /**
     * GA tracking ID for this page
     */
    googleAnalyticsId?: string | null;
    facebookPixelId?: string | null;
    /**
     * Enable tracking for Aspire rewards program
     */
    aspireTrackingEnabled?: boolean | null;
    /**
     * Custom tracking code for Aspire integration
     */
    aspireTrackingCode?: string | null;
    /**
     * Enable tracking for Galderma products
     */
    galdermaTrackingEnabled?: boolean | null;
    /**
     * Tags for marketing automation platforms
     */
    marketingAutomationTags?:
      | {
          platform?: ('hubspot' | 'marketo' | 'pardot' | 'activecampaign' | 'other') | null;
          tagCode?: string | null;
          id?: string | null;
        }[]
      | null;
    conversionTrackingEnabled?: boolean | null;
    conversionGoals?:
      | {
          goalName?: string | null;
          goalTrigger?: ('pageview' | 'click' | 'submit' | 'button') | null;
          goalValue?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  performanceSettings?: {
    imageOptimization?: boolean | null;
    /**
     * Compression quality (1-100)
     */
    imageQuality?: string | null;
    imageFormat?: ('auto' | 'webp' | 'avif' | 'jpeg' | 'png') | null;
    /**
     * Comma-separated widths for responsive images (e.g., 420,800,1400)
     */
    responsiveImageSizes?: string | null;
    minifyCSS?: boolean | null;
    minifyJS?: boolean | null;
    deferNonCriticalCSS?: boolean | null;
    preloadCriticalAssets?: boolean | null;
    enableCDN?: boolean | null;
    /**
     * Base URL for CDN (e.g., https://cdn.example.com)
     */
    cdnUrl?: string | null;
    enableBrotliCompression?: boolean | null;
  };
  contentSettings?: {
    /**
     * Automatically add ® symbols to trademarked terms
     */
    showRegisteredTrademarks?: boolean | null;
    /**
     * List of terms that should display ® symbol
     */
    trademarkedTerms?:
      | {
          term: string;
          id?: string | null;
        }[]
      | null;
    externalLinksOpenNewTab?: boolean | null;
    /**
     * Security best practice for external links
     */
    addNoOpenerToExternalLinks?: boolean | null;
    /**
     * Add structured data for rich search results
     */
    enableRichSnippets?: boolean | null;
  };
  brandSettings?: {
    aspireLogoDisplay?: boolean | null;
    aspireLogo?: (string | null) | Media;
    aspireLogoAlt?: string | null;
    galdermaLogoDisplay?: boolean | null;
    galdermaLogo?: (string | null) | Media;
    galdermaLogoAlt?: string | null;
    brandColors?: {
      /**
       * Primary color for Aspire branding
       */
      aspirePrimary?: string | null;
      aspireSecondary?: string | null;
      galdermaBlue?: string | null;
    };
  };
  ctaSettings?: {
    /**
     * Add a floating or sticky CTA button
     */
    enableGlobalCTA?: boolean | null;
    globalCTAText?: string | null;
    globalCTAUrl?: string | null;
    globalCTAPosition?: ('bottom-right' | 'bottom-left' | 'top-right' | 'top-left' | 'bottom-center') | null;
    ctaBackgroundColor?: string | null;
    ctaTextColor?: string | null;
    ctaHoverBackgroundColor?: string | null;
    ctaIcon?: (string | null) | Media;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gift-cards-page-component".
 */
export interface GiftCardsPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for all text in this section
     */
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    /**
     * CSS color value for breadcrumb links
     */
    breadcrumbTextColor?: string | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
    layoutStyle?: ('mobile-stack' | 'full-width' | 'centered') | null;
  };
  introSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #f5f5f5, transparent)
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for body text
     */
    textColor?: string | null;
    /**
     * CSS padding value (e.g., 60px, 0)
     */
    paddingTop?: string | null;
    /**
     * CSS padding value (e.g., 60px, 0, pb-0)
     */
    paddingBottom?: string | null;
    containerWidth?: ('container' | 'wide' | 'full-width') | null;
    logo?: (string | null) | Media;
    /**
     * Width in pixels (e.g., 58)
     */
    logoWidth?: string | null;
    /**
     * Height in pixels (e.g., 64)
     */
    logoHeight?: string | null;
    logoAlt?: string | null;
    heading: string;
    /**
     * CSS color value
     */
    headingColor?: string | null;
    /**
     * CSS font-size value (e.g., 36px, 2.25rem)
     */
    headingFontSize?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    textAlign?: ('left' | 'center' | 'right') | null;
    /**
     * CSS animation class (e.g., fadeInUp, fadeInLeft)
     */
    animationClass?: string | null;
  };
  halfImageSection: {
    show?: boolean | null;
    /**
     * CSS color value
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for body text
     */
    textColor?: string | null;
    /**
     * Position of image relative to content
     */
    imagePosition?: ('left' | 'right') | null;
    verticalAlignment?: ('top' | 'center' | 'bottom') | null;
    /**
     * CSS animation class (e.g., fadeInLeft, fadeInRight)
     */
    animationClass?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
      /**
       * Width in pixels (e.g., 1832)
       */
      imageWidth?: string | null;
      /**
       * Height in pixels (e.g., 1824)
       */
      imageHeight?: string | null;
    };
    heading: string;
    /**
     * CSS color value
     */
    headingColor?: string | null;
    /**
     * CSS font-size value (e.g., 32px, 2rem)
     */
    headingFontSize?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          text: string;
          /**
           * Optional: Override default text color for this bullet
           */
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
    /**
     * CSS color value for bullet points
     */
    bulletPointColor?: string | null;
    copyAlignment?: ('left' | 'center' | 'right') | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section: 'hero' | 'intro' | 'halfImage';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
    /**
     * Default font size for h2 headings
     */
    headingFontSize?: string | null;
  };
  typographySettings?: {
    /**
     * CSS font-size value
     */
    h1FontSize?: string | null;
    /**
     * CSS color value
     */
    h1Color?: string | null;
    /**
     * CSS font-weight value (e.g., 700, bold)
     */
    h1FontWeight?: string | null;
    /**
     * CSS line-height value (e.g., 1.2, 1.5)
     */
    h1LineHeight?: string | null;
    /**
     * CSS font-size value
     */
    h2FontSize?: string | null;
    /**
     * CSS color value
     */
    h2Color?: string | null;
    /**
     * CSS font-weight value
     */
    h2FontWeight?: string | null;
    /**
     * CSS line-height value
     */
    h2LineHeight?: string | null;
    /**
     * CSS font-size value (e.g., 16px, 1rem)
     */
    bodyFontSize?: string | null;
    /**
     * CSS line-height value (e.g., 1.6, 1.8)
     */
    bodyLineHeight?: string | null;
    /**
     * CSS font-weight value (e.g., 400, normal)
     */
    bodyFontWeight?: string | null;
  };
  animationSettings?: {
    /**
     * Enable/disable all animations on the page
     */
    enableAnimations?: boolean | null;
    /**
     * Enable animations that trigger when elements enter viewport
     */
    enableViewportAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    /**
     * CSS easing function (e.g., ease-in-out, cubic-bezier)
     */
    animationEasing?: string | null;
    /**
     * Default delay before animations start (e.g., 0s, 0.2s)
     */
    animationDelay?: string | null;
  };
  lazyLoadingSettings?: {
    /**
     * Enable lazy loading for images
     */
    enableLazyLoading?: boolean | null;
    lazyLoadingStrategy?: ('native' | 'custom' | 'both') | null;
    /**
     * Base64 or URL for placeholder while images load
     */
    placeholderImage?: string | null;
  };
  seoSettings?: {
    /**
     * SEO title for search engines
     */
    metaTitle?: string | null;
    /**
     * SEO description for search engines
     */
    metaDescription?: string | null;
    /**
     * Open Graph image for social media sharing
     */
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    /**
     * Canonical URL for this page
     */
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
    /**
     * JSON-LD structured data for rich snippets
     */
    structuredData?: string | null;
  };
  accessibilitySettings?: {
    /**
     * Add skip navigation link for screen readers
     */
    skipToContent?: boolean | null;
    /**
     * Include ARIA labels for accessibility
     */
    ariaLabelsEnabled?: boolean | null;
    /**
     * Make alt text mandatory for all images
     */
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
    /**
     * Ensure proper heading structure (H1 > H2 > H3)
     */
    headingHierarchy?: boolean | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 420px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 800px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Screen width for desktop (e.g., 1400px)
     */
    desktopBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
    mobileStackBehavior?: ('stack' | 'horizontal' | 'auto') | null;
  };
  imageOptimizationSettings?: {
    /**
     * Automatically serve WebP/AVIF when supported
     */
    enableAutoFormat?: boolean | null;
    /**
     * Compress images for faster loading
     */
    enableCompression?: boolean | null;
    /**
     * Quality level for image compression (1-100)
     */
    compressionQuality?: string | null;
    /**
     * Use srcset for responsive image loading
     */
    enableResponsiveImages?: boolean | null;
    /**
     * Serve 2x images for retina displays
     */
    retinaSupport?: boolean | null;
  };
  performanceSettings?: {
    /**
     * Preload critical images and fonts
     */
    enablePreload?: boolean | null;
    /**
     * Preload the hero section image for faster LCP
     */
    preloadHeroImage?: boolean | null;
    /**
     * Defer loading of non-critical images
     */
    deferNonCritical?: boolean | null;
    /**
     * Cache assets in browser
     */
    enableCaching?: boolean | null;
  };
  layoutSettings?: {
    pageLayout?: ('full-width' | 'boxed' | 'wide') | null;
    /**
     * Maximum width for content sections (e.g., 1400px)
     */
    contentMaxWidth?: string | null;
    /**
     * Spacing between rows (e.g., 40px, 2.5rem)
     */
    rowSpacing?: string | null;
    /**
     * Gap between columns (e.g., 30px, 2rem)
     */
    columnGap?: string | null;
  };
  customCSS?: {
    /**
     * Allow custom CSS overrides
     */
    enableCustomCSS?: boolean | null;
    /**
     * Custom CSS for hero section
     */
    heroSectionCSS?: string | null;
    /**
     * Custom CSS for intro section
     */
    introSectionCSS?: string | null;
    /**
     * Custom CSS for half image section
     */
    halfImageSectionCSS?: string | null;
    /**
     * Custom CSS applied to entire page
     */
    globalCustomCSS?: string | null;
  };
  customJavaScript?: {
    /**
     * Allow custom JavaScript code
     */
    enableCustomJS?: boolean | null;
    /**
     * JavaScript to load in the header
     */
    headerScript?: string | null;
    /**
     * JavaScript to load in the footer
     */
    footerScript?: string | null;
    /**
     * JavaScript to execute on page load
     */
    onLoadScript?: string | null;
  };
  /**
   * Custom CSS classes for each module
   */
  moduleClasses?: {
    /**
     * Additional CSS classes for hero module (e.g., banner, mobile-stack)
     */
    heroModuleClass?: string | null;
    /**
     * Additional CSS classes for intro module
     */
    introModuleClass?: string | null;
    /**
     * Additional CSS classes for half image module
     */
    halfImageModuleClass?: string | null;
  };
  /**
   * Custom data attributes for tracking and functionality
   */
  dataAttributes?: {
    heroDataAttributes?:
      | {
          /**
           * e.g., data-s3-module, data-tracking-id
           */
          attribute: string;
          value?: string | null;
          id?: string | null;
        }[]
      | null;
    introDataAttributes?:
      | {
          attribute: string;
          value?: string | null;
          id?: string | null;
        }[]
      | null;
    halfImageDataAttributes?:
      | {
          attribute: string;
          value?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * API keys and external service configuration
   */
  apiConfiguration?: {
    /**
     * Show API key configuration fields
     */
    enableAPIKeys?: boolean | null;
    /**
     * API key for content management
     */
    contentAPIKey?: string | null;
    /**
     * Google Analytics or other tracking ID
     */
    analyticsTrackingID?: string | null;
    /**
     * Base URL for CDN assets (e.g., https://www.datocms-assets.com/105497/)
     */
    cdnBaseURL?: string | null;
  };
  responsiveBehavior?: {
    mobileMenuStyle?: ('hamburger' | 'fullscreen' | 'slide-in') | null;
    tabletLayout?: ('desktop' | 'mobile' | 'hybrid') | null;
    imageScaling?: ('fit' | 'fill' | 'cover' | 'contain') | null;
    mobileTextSize?: ('same' | 'smaller' | 'larger') | null;
  };
  pageMetadata?: {
    /**
     * Unique identifier for this page
     */
    pageID?: string | null;
    /**
     * Version number for tracking
     */
    pageVersion?: string | null;
    /**
     * Creator or maintainer of this page
     */
    author?: string | null;
    /**
     * Last person to modify this page
     */
    lastModifiedBy?: string | null;
    /**
     * Internal notes about this page (not displayed publicly)
     */
    notes?: string | null;
  };
  /**
   * Structured data for search engines
   */
  schemaMarkup?: {
    enableSchema?: boolean | null;
    schemaType?: ('WebPage' | 'Product' | 'Service' | 'LocalBusiness' | 'MedicalBusiness') | null;
    businessName?: string | null;
    businessDescription?: string | null;
    /**
     * Custom JSON-LD schema markup
     */
    customSchema?: string | null;
  };
  /**
   * A/B testing and content variations
   */
  contentVariations?: {
    /**
     * Enable A/B testing with content variations
     */
    enableVariations?: boolean | null;
    /**
     * Name for this content variation
     */
    variationName?: string | null;
    /**
     * Percentage of traffic to show this variation (0-100)
     */
    variationPercentage?: string | null;
  };
  advancedSettings?: {
    /**
     * Show debug information in console
     */
    enableDebugMode?: boolean | null;
    /**
     * Custom ID for main element (default: main)
     */
    customMainID?: string | null;
    /**
     * Enable smooth scrolling behavior
     */
    enableSmoothScroll?: boolean | null;
    loadingStrategy?: ('default' | 'progressive' | 'deferred') | null;
    /**
     * Cache-Control header value
     */
    cacheControl?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  /**
   * Mark this component as draft (not visible publicly)
   */
  isDraft?: boolean | null;
  /**
   * Schedule when this component should go live
   */
  publishDate?: string | null;
  /**
   * Schedule when this component should be unpublished
   */
  unpublishDate?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "medical-financing-page-component".
 */
export interface MedicalFinancingPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for all text in this section
     */
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    /**
     * CSS color value for breadcrumb links
     */
    breadcrumbTextColor?: string | null;
    /**
     * First line of title (e.g., "Medical Aesthetic")
     */
    titleFirstLine?: string | null;
    /**
     * Second line of title (e.g., "Treatment Financing")
     */
    titleSecondLine?: string | null;
    /**
     * Add line break to second line on desktop (block-desktop class)
     */
    titleBreakOnDesktop?: boolean | null;
    /**
     * Additional CSS classes for title (e.g., "long-title")
     */
    titleClass?: string | null;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    /**
     * CSS font-weight value (e.g., 700, bold)
     */
    titleFontWeight?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
      /**
       * Width in pixels (e.g., 1920)
       */
      width?: string | null;
      /**
       * Height in pixels (e.g., 1206)
       */
      height?: string | null;
    };
    layoutStyle?: ('mobile-stack' | 'full-width' | 'centered') | null;
    /**
     * Additional CSS classes for module (e.g., "banner mobile-stack")
     */
    moduleClass?: string | null;
  };
  twoColumnSection?: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #f5f5f5, transparent)
     */
    backgroundColor?: string | null;
    /**
     * CSS color value for body text
     */
    textColor?: string | null;
    /**
     * CSS padding value (e.g., 60px, 4rem)
     */
    paddingTop?: string | null;
    /**
     * CSS padding value (e.g., 60px, 4rem)
     */
    paddingBottom?: string | null;
    containerWidth?: ('container' | 'wide' | 'full-width') | null;
    /**
     * Vertically center align column content
     */
    verticalAlign?: boolean | null;
    /**
     * Space between columns (e.g., 40px, 2.5rem)
     */
    columnGap?: string | null;
    /**
     * Additional CSS classes (e.g., "viewport container")
     */
    moduleClass?: string | null;
    leftColumn?: {
      contentType?: ('image' | 'richtext' | 'html') | null;
      image?: (string | null) | Media;
      /**
       * Direct URL to image (alternative to upload)
       */
      imageUrl?: string | null;
      imageAlt?: string | null;
      /**
       * Max width for image (e.g., 370px, 100%)
       */
      imageWidth?: string | null;
      /**
       * Max height for image (e.g., 370px, auto)
       */
      imageHeight?: string | null;
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      htmlContent?: string | null;
      /**
       * CSS color value for this column
       */
      backgroundColor?: string | null;
      /**
       * CSS color value for text in this column
       */
      textColor?: string | null;
      textAlign?: ('left' | 'center' | 'right') | null;
      /**
       * CSS animation class (e.g., fadeInLeft, fadeInUp)
       */
      animationClass?: string | null;
      /**
       * Additional CSS classes for this column
       */
      customClass?: string | null;
    };
    rightColumn?: {
      contentType?: ('richtext' | 'image' | 'html') | null;
      /**
       * Main heading for right column
       */
      heading?: string | null;
      /**
       * CSS color value
       */
      headingColor?: string | null;
      /**
       * CSS font-size value (e.g., 32px, 2rem)
       */
      headingFontSize?: string | null;
      /**
       * CSS font-weight value
       */
      headingFontWeight?: string | null;
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      image?: (string | null) | Media;
      imageAlt?: string | null;
      htmlContent?: string | null;
      ctaButton?: {
        show?: boolean | null;
        text?: string | null;
        url?: string | null;
        openInNewTab?: boolean | null;
        /**
         * Link relationship (e.g., noopener, nofollow)
         */
        rel?: string | null;
        /**
         * CSS color value
         */
        backgroundColor?: string | null;
        /**
         * CSS color value
         */
        textColor?: string | null;
        /**
         * CSS color value
         */
        hoverBackgroundColor?: string | null;
        /**
         * CSS color value
         */
        hoverTextColor?: string | null;
        /**
         * CSS border-radius value (e.g., 4px, 0.5rem)
         */
        borderRadius?: string | null;
        /**
         * CSS padding value (e.g., 12px 24px)
         */
        padding?: string | null;
        /**
         * CSS font-size value
         */
        fontSize?: string | null;
        /**
         * CSS font-weight value
         */
        fontWeight?: string | null;
        /**
         * Additional CSS classes (e.g., "btn btn-primary")
         */
        customClass?: string | null;
      };
      /**
       * CSS color value for this column
       */
      backgroundColor?: string | null;
      /**
       * CSS color value for text in this column
       */
      textColor?: string | null;
      textAlign?: ('left' | 'center' | 'right') | null;
      /**
       * CSS animation class (e.g., fadeInRight, fadeInUp)
       */
      animationClass?: string | null;
      /**
       * Additional CSS classes for this column
       */
      customClass?: string | null;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section: 'hero' | 'twoColumn';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    enableViewportAnimations?: boolean | null;
    fadeInDuration?: string | null;
    animationEasing?: string | null;
  };
  lazyLoadingSettings?: {
    enableLazyLoading?: boolean | null;
    placeholderImage?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    keywords?: string | null;
    canonicalUrl?: string | null;
  };
  mobileSettings?: {
    mobileBreakpoint?: string | null;
    tabletBreakpoint?: string | null;
    desktopBreakpoint?: string | null;
  };
  dataAttributes?: {
    heroDataAttributes?:
      | {
          attribute: string;
          value?: string | null;
          id?: string | null;
        }[]
      | null;
    twoColumnDataAttributes?:
      | {
          attribute: string;
          value?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "training-page-component".
 */
export interface TrainingPageComponent {
  id: string;
  componentName: string;
  introModule: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * CSS classes for the container
     */
    containerClass?: string | null;
    animationClass?: string | null;
    logo?: (string | null) | Media;
    logoWidth?: number | null;
    logoHeight?: number | null;
    logoAlt?: string | null;
    heading: string;
    headingColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    headingFontSize?: string | null;
    subheading?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    subheadingColor?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    contentColor?: string | null;
  };
  boxGridModule: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    containerClass?: string | null;
    heading: string;
    headingColor?: string | null;
    headingAlignment?: ('left' | 'center' | 'right') | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          title: string;
          titleColor?: string | null;
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          contentColor?: string | null;
          backgroundColor?: string | null;
          borderColor?: string | null;
          animationClass?: string | null;
          /**
           * e.g., 0.2s, 0.4s
           */
          animationDelay?: string | null;
          id?: string | null;
        }[]
      | null;
    boxesPerRow?: ('2' | '3' | '4' | '5') | null;
    /**
     * Spacing between boxes (e.g., 20px, 2rem)
     */
    boxSpacing?: string | null;
  };
  twoColumnSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    columnLayout?: ('content-left' | 'image-left') | null;
    verticalAlignment?: ('top' | 'center' | 'bottom') | null;
    leftColumn?: {
      animationClass?: string | null;
      heading?: string | null;
      headingColor?: string | null;
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      contentColor?: string | null;
      ctaButton?: {
        show?: boolean | null;
        text?: string | null;
        url?: string | null;
        openInNewTab?: boolean | null;
        backgroundColor?: string | null;
        textColor?: string | null;
        hoverBackgroundColor?: string | null;
        borderRadius?: string | null;
      };
      image?: {
        mobile?: (string | null) | Media;
        tablet?: (string | null) | Media;
        desktop?: (string | null) | Media;
        alt?: string | null;
      };
    };
    rightColumn?: {
      animationClass?: string | null;
      heading?: string | null;
      headingColor?: string | null;
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      contentColor?: string | null;
      ctaButton?: {
        show?: boolean | null;
        text?: string | null;
        url?: string | null;
        openInNewTab?: boolean | null;
        backgroundColor?: string | null;
        textColor?: string | null;
        hoverBackgroundColor?: string | null;
      };
      image?: {
        mobile?: (string | null) | Media;
        tablet?: (string | null) | Media;
        desktop?: (string | null) | Media;
        alt?: string | null;
      };
    };
  };
  twoColumnSection2?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    columnLayout?: ('content-left' | 'image-left') | null;
    verticalAlignment?: ('top' | 'center' | 'bottom') | null;
    leftColumn?: {
      animationClass?: string | null;
      heading?: string | null;
      headingColor?: string | null;
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      contentColor?: string | null;
      image?: {
        mobile?: (string | null) | Media;
        tablet?: (string | null) | Media;
        desktop?: (string | null) | Media;
        alt?: string | null;
      };
    };
    rightColumn?: {
      animationClass?: string | null;
      heading?: string | null;
      headingColor?: string | null;
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      contentColor?: string | null;
      image?: {
        mobile?: (string | null) | Media;
        tablet?: (string | null) | Media;
        desktop?: (string | null) | Media;
        alt?: string | null;
      };
    };
  };
  singleColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    contentAlignment?: ('left' | 'center' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    headingFontSize?: string | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    contentColor?: string | null;
    quote?: {
      show?: boolean | null;
      text?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      textColor?: string | null;
      fontSize?: string | null;
      fontWeight?: string | null;
      attribution?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      attributionColor?: string | null;
    };
    /**
     * CSS max-width value (e.g., 800px, 80%)
     */
    maxWidth?: string | null;
  };
  twoColumnSection3?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    columnLayout?: ('content-left' | 'image-left') | null;
    verticalAlignment?: ('top' | 'center' | 'bottom') | null;
    leftColumn?: {
      animationClass?: string | null;
      heading?: string | null;
      headingColor?: string | null;
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      contentColor?: string | null;
      ctaButton?: {
        show?: boolean | null;
        text?: string | null;
        url?: string | null;
        openInNewTab?: boolean | null;
        backgroundColor?: string | null;
        textColor?: string | null;
        hoverBackgroundColor?: string | null;
      };
      image?: {
        mobile?: (string | null) | Media;
        tablet?: (string | null) | Media;
        desktop?: (string | null) | Media;
        alt?: string | null;
      };
    };
    rightColumn?: {
      animationClass?: string | null;
      heading?: string | null;
      headingColor?: string | null;
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      contentColor?: string | null;
      image?: {
        mobile?: (string | null) | Media;
        tablet?: (string | null) | Media;
        desktop?: (string | null) | Media;
        alt?: string | null;
      };
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'introModule'
          | 'boxGridModule'
          | 'twoColumnSection1'
          | 'twoColumnSection2'
          | 'singleColumnSection'
          | 'twoColumnSection3';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
    /**
     * Default font size for h2 headings
     */
    headingFontSize?: string | null;
  };
  typographySettings?: {
    /**
     * e.g., 48px, 3rem
     */
    h1FontSize?: string | null;
    h1Color?: string | null;
    /**
     * e.g., 700, bold
     */
    h1FontWeight?: string | null;
    /**
     * e.g., 1.2, 1.5
     */
    h1LineHeight?: string | null;
    /**
     * e.g., 36px, 2.25rem
     */
    h2FontSize?: string | null;
    h2Color?: string | null;
    /**
     * e.g., 600, semi-bold
     */
    h2FontWeight?: string | null;
    h2LineHeight?: string | null;
    h3FontSize?: string | null;
    h3Color?: string | null;
    h3FontWeight?: string | null;
    h4FontSize?: string | null;
    h4Color?: string | null;
    h4FontWeight?: string | null;
    /**
     * e.g., 16px, 1rem
     */
    bodyFontSize?: string | null;
    /**
     * e.g., 1.6, 1.8
     */
    bodyLineHeight?: string | null;
    /**
     * e.g., 400, normal
     */
    bodyFontWeight?: string | null;
  };
  buttonStyles?: {
    /**
     * e.g., #007bff, rgba(0,123,255,1)
     */
    defaultBackgroundColor?: string | null;
    /**
     * e.g., #ffffff, white
     */
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    defaultHoverTextColor?: string | null;
    /**
     * e.g., 4px, 0.5rem, 50px
     */
    borderRadius?: string | null;
    /**
     * e.g., 1px, 2px
     */
    borderWidth?: string | null;
    borderColor?: string | null;
    /**
     * e.g., 12px 24px, 0.75rem 1.5rem
     */
    padding?: string | null;
    /**
     * e.g., 16px, 1rem
     */
    fontSize?: string | null;
    /**
     * e.g., 600, bold
     */
    fontWeight?: string | null;
    textTransform?: ('none' | 'uppercase' | 'lowercase' | 'capitalize') | null;
    /**
     * e.g., 1px, 0.05em
     */
    letterSpacing?: string | null;
    /**
     * e.g., all 0.3s ease
     */
    transition?: string | null;
  };
  animationSettings?: {
    /**
     * Global toggle for all animations
     */
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 1000ms)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    animationEasing?: ('ease' | 'ease-in' | 'ease-out' | 'ease-in-out' | 'linear') | null;
    /**
     * Default delay before animations start (e.g., 0.2s)
     */
    animationDelay?: string | null;
    /**
     * Add custom CSS animations (optional)
     */
    customAnimationCSS?: string | null;
  };
  responsiveSettings?: {
    /**
     * Screen width for mobile devices (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablets (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Screen width for desktop (e.g., 1400px)
     */
    desktopBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%, 0.9)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for tablet fonts
     */
    tabletFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
    /**
     * Percentage adjustment for tablet spacing
     */
    tabletSpacingAdjustment?: string | null;
    /**
     * Padding for mobile containers (e.g., 15px)
     */
    mobileContainerPadding?: string | null;
    tabletContainerPadding?: string | null;
  };
  seoSettings?: {
    /**
     * Page title for SEO (60 characters max recommended)
     */
    metaTitle?: string | null;
    /**
     * Page description for SEO (160 characters max recommended)
     */
    metaDescription?: string | null;
    /**
     * Title for social media sharing
     */
    ogTitle?: string | null;
    /**
     * Description for social media sharing
     */
    ogDescription?: string | null;
    /**
     * Image for social media sharing (1200x630px recommended)
     */
    ogImage?: (string | null) | Media;
    twitterCard?: ('summary' | 'summary_large_image') | null;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    /**
     * Canonical URL for this page
     */
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
    /**
     * JSON-LD structured data for rich snippets
     */
    structuredData?: string | null;
  };
  accessibilitySettings?: {
    /**
     * Add skip to main content link for screen readers
     */
    skipToContent?: boolean | null;
    skipToContentText?: string | null;
    /**
     * Enable ARIA labels throughout the component
     */
    ariaLabelsEnabled?: boolean | null;
    /**
     * Enforce alt text requirement for all images
     */
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    /**
     * Width of focus outline (e.g., 2px)
     */
    focusVisibleWidth?: string | null;
    focusVisibleStyle?: ('solid' | 'dashed' | 'dotted') | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
    /**
     * Disable animations for users who prefer reduced motion
     */
    reducedMotion?: boolean | null;
  };
  customCSS?: {
    /**
     * Add custom CSS that applies to the entire component
     */
    globalCSS?: string | null;
    /**
     * CSS that only applies to mobile devices
     */
    mobileCSS?: string | null;
    /**
     * CSS that only applies to tablets
     */
    tabletCSS?: string | null;
    /**
     * CSS that only applies to desktop
     */
    desktopCSS?: string | null;
  };
  performanceSettings?: {
    /**
     * Enable lazy loading for images
     */
    lazyLoadImages?: boolean | null;
    imageLoadingPriority?: ('auto' | 'lazy' | 'eager') | null;
    /**
     * Preload above-the-fold images and fonts
     */
    preloadCriticalAssets?: boolean | null;
    /**
     * Automatically optimize and compress images
     */
    enableImageOptimization?: boolean | null;
    enableCSSMinification?: boolean | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  /**
   * Version number for tracking changes (e.g., 1.0.0)
   */
  version?: string | null;
  /**
   * Notes about this version or recent changes
   */
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "program-details-component".
 */
export interface ProgramDetailsComponent {
  id: string;
  componentName: string;
  introModule: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    animationClass?: string | null;
    logo?: (string | null) | Media;
    logoWidth?: number | null;
    logoHeight?: number | null;
    logoAlt?: string | null;
    heading: string;
    headingColor?: string | null;
    headingFontSize?: string | null;
  };
  columnSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    contentAlignment?: ('left' | 'center' | 'right') | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
    subheading: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    subheadingColor?: string | null;
  };
  dividerModule?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    containerClass?: string | null;
    logo?: (string | null) | Media;
    logoWidth?: number | null;
    logoHeight?: number | null;
    logoAlt?: string | null;
  };
  columnSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    contentAlignment?: ('left' | 'center' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    table?: {
      borderColor?: string | null;
      headerBackgroundColor?: string | null;
      headerTextColor?: string | null;
      rowBackgroundColor?: string | null;
      rowTextColor?: string | null;
      alternateRowColor?: string | null;
      /**
       * Drag to reorder headers
       */
      headers?:
        | {
            label: string;
            /**
             * CSS width value (e.g., 25%, 200px)
             */
            width?: string | null;
            id?: string | null;
          }[]
        | null;
      /**
       * Drag to reorder rows
       */
      rows?:
        | {
            programName: string;
            duration: string;
            tuition: string;
            included: {
              root: {
                type: string;
                children: {
                  type: any;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            id?: string | null;
          }[]
        | null;
    };
  };
  columnSection3: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    contentAlignment?: ('left' | 'center' | 'right') | null;
    content: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    contentColor?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
  };
  twoColumnSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    columnLayout?: ('content-left' | 'image-left') | null;
    verticalAlignment?: ('top' | 'center' | 'bottom') | null;
    leftColumn: {
      animationClass?: string | null;
      heading: string;
      headingColor?: string | null;
      /**
       * Drag to reorder highlights
       */
      highlights?:
        | {
            title: string;
            titleColor?: string | null;
            description: {
              root: {
                type: string;
                children: {
                  type: any;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            descriptionColor?: string | null;
            id?: string | null;
          }[]
        | null;
      listStyle?: ('disc' | 'circle' | 'square' | 'none') | null;
    };
    rightColumn: {
      animationClass?: string | null;
      image: {
        mobile?: (string | null) | Media;
        tablet?: (string | null) | Media;
        desktop?: (string | null) | Media;
        alt: string;
      };
    };
  };
  twoColumnSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    columnLayout?: ('content-left' | 'image-left') | null;
    verticalAlignment?: ('top' | 'center' | 'bottom') | null;
    leftColumn: {
      animationClass?: string | null;
      image: {
        mobile?: (string | null) | Media;
        tablet?: (string | null) | Media;
        desktop?: (string | null) | Media;
        alt: string;
      };
    };
    rightColumn: {
      animationClass?: string | null;
      heading: string;
      headingColor?: string | null;
      /**
       * Drag to reorder programs
       */
      programs?:
        | {
            programTitle: string;
            programTitleColor?: string | null;
            details?:
              | {
                  text: {
                    root: {
                      type: string;
                      children: {
                        type: any;
                        version: number;
                        [k: string]: unknown;
                      }[];
                      direction: ('ltr' | 'rtl') | null;
                      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                      indent: number;
                      version: number;
                    };
                    [k: string]: unknown;
                  };
                  textColor?: string | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
          }[]
        | null;
      additionalInfo?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      additionalInfoColor?: string | null;
    };
  };
  columnSection4: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    contentAlignment?: ('left' | 'center' | 'right') | null;
    /**
     * Multiple headings for emphasis
     */
    headings?:
      | {
          text: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          textColor?: string | null;
          fontSize?: string | null;
          fontWeight?: string | null;
          isItalic?: boolean | null;
          id?: string | null;
        }[]
      | null;
    ctaButton: {
      show?: boolean | null;
      text: string;
      url: string;
      openInNewTab?: boolean | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
      borderRadius?: string | null;
      padding?: string | null;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'introModule'
          | 'columnSection1'
          | 'dividerModule'
          | 'columnSection2'
          | 'columnSection3'
          | 'twoColumnSection1'
          | 'twoColumnSection2'
          | 'columnSection4';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    primaryColor?: string | null;
    secondaryColor?: string | null;
    textColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h1LineHeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    h3FontSize?: string | null;
    h3Color?: string | null;
    h3FontWeight?: string | null;
    h4FontSize?: string | null;
    h4Color?: string | null;
    h4FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
    bodyFontWeight?: string | null;
  };
  tableStyles?: {
    /**
     * e.g., 1px, 2px
     */
    borderWidth?: string | null;
    borderColor?: string | null;
    borderStyle?: ('solid' | 'dashed' | 'dotted' | 'double') | null;
    borderCollapse?: ('collapse' | 'separate') | null;
    /**
     * e.g., 10px, 0.5rem
     */
    cellPadding?: string | null;
    headerFontWeight?: string | null;
    headerFontSize?: string | null;
    headerTextAlign?: ('left' | 'center' | 'right') | null;
    cellTextAlign?: ('left' | 'center' | 'right') | null;
    rowHoverColor?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    defaultHoverTextColor?: string | null;
    /**
     * e.g., 4px, 0.5rem, 50px
     */
    borderRadius?: string | null;
    borderWidth?: string | null;
    borderColor?: string | null;
    /**
     * e.g., 12px 24px, 0.75rem 1.5rem
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
    textTransform?: ('none' | 'uppercase' | 'lowercase' | 'capitalize') | null;
    letterSpacing?: string | null;
    transition?: string | null;
    /**
     * e.g., 0 2px 4px rgba(0,0,0,0.1)
     */
    boxShadow?: string | null;
    hoverBoxShadow?: string | null;
  };
  listStyles?: {
    bulletStyle?: ('disc' | 'circle' | 'square' | 'none') | null;
    bulletColor?: string | null;
    /**
     * Spacing between list items (e.g., 8px, 0.5rem)
     */
    listItemSpacing?: string | null;
    /**
     * Indentation for list items (e.g., 20px, 1.5rem)
     */
    listIndent?: string | null;
    /**
     * Additional indent for nested lists
     */
    nestedListIndent?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    fadeInDuration?: string | null;
    slideInDuration?: string | null;
    animationEasing?: ('ease' | 'ease-in' | 'ease-out' | 'ease-in-out' | 'linear') | null;
    animationDelay?: string | null;
    /**
     * Add custom CSS animations (optional)
     */
    customAnimationCSS?: string | null;
  };
  responsiveSettings?: {
    mobileBreakpoint?: string | null;
    tabletBreakpoint?: string | null;
    desktopBreakpoint?: string | null;
    mobileFontSizeAdjustment?: string | null;
    tabletFontSizeAdjustment?: string | null;
    mobileSpacingAdjustment?: string | null;
    tabletSpacingAdjustment?: string | null;
    mobileContainerPadding?: string | null;
    tabletContainerPadding?: string | null;
    /**
     * How tables should display on mobile devices
     */
    mobileTableDisplay?: ('scroll' | 'stack' | 'cards') | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogTitle?: string | null;
    ogDescription?: string | null;
    ogImage?: (string | null) | Media;
    twitterCard?: ('summary' | 'summary_large_image') | null;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
    /**
     * JSON-LD structured data for rich snippets
     */
    structuredData?: string | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    skipToContentText?: string | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    focusVisibleColor?: string | null;
    focusVisibleWidth?: string | null;
    focusVisibleStyle?: ('solid' | 'dashed' | 'dotted') | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
    reducedMotion?: boolean | null;
    tableAccessibility?: {
      includeTableCaption?: boolean | null;
      tableCaption?: string | null;
      tableSummary?: string | null;
    };
  };
  customCSS?: {
    /**
     * Add custom CSS that applies to the entire component
     */
    globalCSS?: string | null;
    mobileCSS?: string | null;
    tabletCSS?: string | null;
    desktopCSS?: string | null;
    /**
     * Custom CSS for table styling
     */
    tableCSS?: string | null;
  };
  performanceSettings?: {
    lazyLoadImages?: boolean | null;
    imageLoadingPriority?: ('auto' | 'lazy' | 'eager') | null;
    preloadCriticalAssets?: boolean | null;
    enableImageOptimization?: boolean | null;
    enableCSSMinification?: boolean | null;
  };
  dividerSettings?: {
    /**
     * Height of divider sections (e.g., 60px, 4rem)
     */
    dividerHeight?: string | null;
    /**
     * Top and bottom margin (e.g., 40px 0)
     */
    dividerMargin?: string | null;
    showDividerLine?: boolean | null;
    dividerLineColor?: string | null;
    /**
     * Thickness of the line (e.g., 1px, 2px)
     */
    dividerLineWidth?: string | null;
    dividerLineStyle?: ('solid' | 'dashed' | 'dotted') | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  /**
   * Version number for tracking changes (e.g., 1.0.0)
   */
  version?: string | null;
  /**
   * Notes about this version or recent changes
   */
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "comprehensive-program-component".
 */
export interface ComprehensiveProgramComponent {
  id: string;
  componentName: string;
  introSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * CSS classes for the container
     */
    containerClass?: string | null;
    logo?: (string | null) | Media;
    logoWidth?: number | null;
    logoHeight?: number | null;
    logoAlt?: string | null;
    heading: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    headingColor?: string | null;
  };
  durationSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    durationLabel?: string | null;
    durationValue?: string | null;
    destinationsLabel?: string | null;
    /**
     * Drag to reorder destinations
     */
    destinations?:
      | {
          location: string;
          id?: string | null;
        }[]
      | null;
    labelColor?: string | null;
    valueColor?: string | null;
  };
  twoColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    verticalAlign?: boolean | null;
    leftContent: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    leftContentColor?: string | null;
    /**
     * WOW.js animation class
     */
    leftAnimation?: string | null;
    rightImage: {
      image?: (string | null) | Media;
      alt: string;
    };
    rightAnimation?: string | null;
  };
  threeColumnSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder columns (max 3)
     */
    columns?:
      | {
          heading: string;
          headingColor?: string | null;
          /**
           * Drag to reorder bullet points
           */
          bulletPoints?:
            | {
                text: string;
                subBullets?:
                  | {
                      text: string;
                      nestedBullets?:
                        | {
                            text: string;
                            id?: string | null;
                          }[]
                        | null;
                      id?: string | null;
                    }[]
                  | null;
                id?: string | null;
              }[]
            | null;
          animation?: ('fadeInLeft' | 'fadeInRight' | 'fadeInUp' | 'fadeIn') | null;
          id?: string | null;
        }[]
      | null;
  };
  boxGridSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    mainHeading?: string | null;
    mainHeadingColor?: string | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          headingColor?: string | null;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          /**
           * Drag to reorder bullet points
           */
          bulletPoints?:
            | {
                text: {
                  root: {
                    type: string;
                    children: {
                      type: any;
                      version: number;
                      [k: string]: unknown;
                    }[];
                    direction: ('ltr' | 'rtl') | null;
                    format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                    indent: number;
                    version: number;
                  };
                  [k: string]: unknown;
                };
                subBullets?:
                  | {
                      text: {
                        root: {
                          type: string;
                          children: {
                            type: any;
                            version: number;
                            [k: string]: unknown;
                          }[];
                          direction: ('ltr' | 'rtl') | null;
                          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                          indent: number;
                          version: number;
                        };
                        [k: string]: unknown;
                      };
                      nestedBullets?:
                        | {
                            text: {
                              root: {
                                type: string;
                                children: {
                                  type: any;
                                  version: number;
                                  [k: string]: unknown;
                                }[];
                                direction: ('ltr' | 'rtl') | null;
                                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                                indent: number;
                                version: number;
                              };
                              [k: string]: unknown;
                            };
                            id?: string | null;
                          }[]
                        | null;
                      id?: string | null;
                    }[]
                  | null;
                id?: string | null;
              }[]
            | null;
          backgroundColor?: string | null;
          textColor?: string | null;
          animation?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  tuitionSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    heading?: string | null;
    headingColor?: string | null;
    priceText?: string | null;
    priceColor?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    /**
     * Add multiple paragraphs or notes
     */
    additionalNotes?:
      | {
          text: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
    ctaButton: {
      show?: boolean | null;
      text?: string | null;
      url: string;
      openInNewTab?: boolean | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
      hoverTextColor?: string | null;
      className?: string | null;
    };
    centerAlign?: boolean | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section: 'intro' | 'duration' | 'twoColumn' | 'threeColumn' | 'boxGrid' | 'tuition';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    defaultTextColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    h3FontSize?: string | null;
    h3Color?: string | null;
    h3FontWeight?: string | null;
    h4FontSize?: string | null;
    h4Color?: string | null;
    h4FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    defaultHoverTextColor?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
  };
  listStyles?: {
    bulletColor?: string | null;
    bulletStyle?: ('disc' | 'circle' | 'square' | 'none') | null;
    /**
     * e.g., 20px, 1.5rem
     */
    listMarginLeft?: string | null;
    /**
     * Spacing between list items (e.g., 10px)
     */
    listItemSpacing?: string | null;
    /**
     * Indentation for nested lists (e.g., 20px)
     */
    nestedListIndent?: string | null;
  };
  imageSettings?: {
    lazyLoading?: boolean | null;
    imageQuality?: ('low' | 'medium' | 'high' | 'original') | null;
    /**
     * Automatically optimize image format (WebP, etc.)
     */
    autoFormat?: boolean | null;
    autoCompress?: boolean | null;
    /**
     * Generate multiple image sizes for different screens
     */
    responsiveImages?: boolean | null;
  };
  customCSS?: {
    /**
     * Add custom CSS styles for this component
     */
    additionalCSS?: string | null;
    /**
     * Add custom CSS class names to sections
     */
    cssClasses?:
      | {
          section?: ('intro' | 'duration' | 'twoColumn' | 'threeColumn' | 'boxGrid' | 'tuition') | null;
          className: string;
          id?: string | null;
        }[]
      | null;
  };
  linkSettings?: {
    defaultLinkTarget?: ('_self' | '_blank') | null;
    linkUnderline?: ('none' | 'always' | 'hover') | null;
    /**
     * CSS transition for links (e.g., all 0.3s ease)
     */
    linkTransition?: string | null;
  };
  spacingSettings?: {
    /**
     * Padding/margin for intro section (e.g., 60px 0)
     */
    introSectionSpacing?: string | null;
    durationSectionSpacing?: string | null;
    twoColumnSectionSpacing?: string | null;
    threeColumnSectionSpacing?: string | null;
    boxGridSectionSpacing?: string | null;
    tuitionSectionSpacing?: string | null;
    /**
     * Spacing between elements within sections (e.g., 20px)
     */
    elementSpacing?: string | null;
  };
  borderShadowSettings?: {
    /**
     * Border radius for boxes (e.g., 8px)
     */
    boxBorderRadius?: string | null;
    /**
     * CSS box-shadow value
     */
    boxShadow?: string | null;
    boxHoverShadow?: string | null;
    imageBorderRadius?: string | null;
    imageShadow?: string | null;
    /**
     * Border for sections (e.g., 1px solid #ccc)
     */
    sectionBorder?: string | null;
  };
  columnWidthSettings?: {
    /**
     * Width for left column (e.g., 50%, 60%)
     */
    twoColumnLeftWidth?: string | null;
    twoColumnRightWidth?: string | null;
    /**
     * Width for each of the three columns
     */
    threeColumnWidth?: string | null;
    /**
     * Space between columns (e.g., 20px, 2rem)
     */
    columnGap?: string | null;
  };
  headerSettings?: {
    headingTextTransform?: ('none' | 'uppercase' | 'lowercase' | 'capitalize') | null;
    /**
     * e.g., 1px, 0.05em
     */
    headingLetterSpacing?: string | null;
    /**
     * Space below headings (e.g., 20px)
     */
    headingMarginBottom?: string | null;
    subheadingFontSize?: string | null;
    subheadingColor?: string | null;
  };
  hoverEffects?: {
    enableBoxHover?: boolean | null;
    /**
     * CSS transform on hover (e.g., translateY(-5px))
     */
    boxHoverTransform?: string | null;
    boxHoverTransition?: string | null;
    imageHoverEffect?: ('none' | 'zoom-in' | 'zoom-out' | 'opacity') | null;
    /**
     * Opacity value on hover (e.g., 0.8)
     */
    imageHoverOpacity?: string | null;
  };
  gridSettings?: {
    /**
     * Number of columns in box grid on desktop
     */
    boxGridColumns?: number | null;
    boxGridColumnsTablet?: number | null;
    boxGridColumnsMobile?: number | null;
    /**
     * Space between grid items (e.g., 20px)
     */
    boxGridGap?: string | null;
  };
  contentAlignment?: {
    introContentAlign?: ('left' | 'center' | 'right') | null;
    durationContentAlign?: ('left' | 'center' | 'right') | null;
    twoColumnTextAlign?: ('left' | 'center' | 'right' | 'justify') | null;
    threeColumnTextAlign?: ('left' | 'center' | 'right') | null;
  };
  backgroundSettings?: {
    backgroundImageSize?: ('cover' | 'contain' | 'auto') | null;
    backgroundImagePosition?: ('center' | 'top' | 'bottom' | 'left' | 'right') | null;
    backgroundImageRepeat?: ('no-repeat' | 'repeat' | 'repeat-x' | 'repeat-y') | null;
    backgroundOverlay?: boolean | null;
    /**
     * RGBA color value (e.g., rgba(0,0,0,0.5))
     */
    backgroundOverlayColor?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "foundational-program-component".
 */
export interface FoundationalProgramComponent {
  id: string;
  componentName: string;
  introSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * CSS classes for the container
     */
    containerClass?: string | null;
    logo?: (string | null) | Media;
    logoWidth?: number | null;
    logoHeight?: number | null;
    logoAlt?: string | null;
    heading: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    headingColor?: string | null;
  };
  durationSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    durationLabel?: string | null;
    durationValue?: string | null;
    destinationsLabel?: string | null;
    /**
     * Drag to reorder destinations
     */
    destinations?:
      | {
          location: string;
          id?: string | null;
        }[]
      | null;
    labelColor?: string | null;
    valueColor?: string | null;
    centerAlign?: boolean | null;
  };
  twoColumnSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    verticalAlign?: boolean | null;
    leftContent: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    leftContentColor?: string | null;
    /**
     * WOW.js animation class
     */
    leftAnimation?: string | null;
    rightImage: {
      image?: (string | null) | Media;
      alt: string;
    };
    rightAnimation?: string | null;
  };
  threeColumnSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder columns (max 3)
     */
    columns?:
      | {
          heading: string;
          headingColor?: string | null;
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          contentColor?: string | null;
          animation?: ('fadeInLeft' | 'fadeInRight' | 'fadeInUp' | 'fadeIn') | null;
          id?: string | null;
        }[]
      | null;
  };
  boxGridSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    mainHeading?: string | null;
    mainHeadingColor?: string | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          headingColor?: string | null;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          /**
           * Drag to reorder bullet points
           */
          bulletPoints?:
            | {
                text: string;
                id?: string | null;
              }[]
            | null;
          backgroundColor?: string | null;
          textColor?: string | null;
          animation?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  learnEnrollSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    heading?: string | null;
    headingColor?: string | null;
    /**
     * Drag to reorder destinations
     */
    destinations?:
      | {
          location: string;
          id?: string | null;
        }[]
      | null;
    destinationsColor?: string | null;
    ctaButton: {
      show?: boolean | null;
      text?: string | null;
      url: string;
      openInNewTab?: boolean | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
      hoverTextColor?: string | null;
      className?: string | null;
    };
    centerAlign?: boolean | null;
  };
  twoColumnSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    hasBackground?: boolean | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    mainHeading?: string | null;
    mainHeadingColor?: string | null;
    leftColumn: {
      heading: string;
      headingColor?: string | null;
      /**
       * Drag to reorder bullet points
       */
      bulletPoints?:
        | {
            text: string;
            isBold?: boolean | null;
            id?: string | null;
          }[]
        | null;
      animation?: string | null;
    };
    rightColumn: {
      heading: string;
      headingColor?: string | null;
      /**
       * Drag to reorder bullet points
       */
      bulletPoints?:
        | {
            text: string;
            isBold?: boolean | null;
            id?: string | null;
          }[]
        | null;
      animation?: string | null;
    };
    centerAlign?: boolean | null;
  };
  enrollmentDetailsSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    containerClass?: string | null;
    heading?: string | null;
    headingColor?: string | null;
    /**
     * Drag to reorder detail items
     */
    details?:
      | {
          text: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
    additionalNote?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    additionalNoteColor?: string | null;
    finalText?: string | null;
    finalTextColor?: string | null;
    centerAlign?: boolean | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'intro'
          | 'duration'
          | 'twoColumn1'
          | 'threeColumn'
          | 'boxGrid'
          | 'learnEnroll'
          | 'twoColumn2'
          | 'enrollmentDetails';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    defaultTextColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    h3FontSize?: string | null;
    h3Color?: string | null;
    h3FontWeight?: string | null;
    h4FontSize?: string | null;
    h4Color?: string | null;
    h4FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
    emFontStyle?: ('normal' | 'italic' | 'oblique') | null;
    strongFontWeight?: ('normal' | 'bold' | '500' | '600' | '700' | '800') | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    defaultHoverTextColor?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
    /**
     * e.g., 1px solid #000
     */
    border?: string | null;
    transition?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
    /**
     * Delay before animation starts (e.g., 0.2s)
     */
    animationDelay?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
  };
  listStyles?: {
    bulletColor?: string | null;
    bulletStyle?: ('disc' | 'circle' | 'square' | 'none') | null;
    /**
     * e.g., 20px, 1.5rem
     */
    listMarginLeft?: string | null;
    /**
     * Spacing between list items (e.g., 10px)
     */
    listItemSpacing?: string | null;
  };
  imageSettings?: {
    lazyLoading?: boolean | null;
    imageQuality?: ('low' | 'medium' | 'high' | 'original') | null;
    /**
     * Automatically optimize image format (WebP, etc.)
     */
    autoFormat?: boolean | null;
    autoCompress?: boolean | null;
    /**
     * Generate multiple image sizes for different screens
     */
    responsiveImages?: boolean | null;
    /**
     * e.g., 8px, 0.5rem
     */
    imageBorderRadius?: string | null;
    /**
     * CSS box-shadow value
     */
    imageShadow?: string | null;
  };
  customCSS?: {
    /**
     * Add custom CSS styles for this component
     */
    additionalCSS?: string | null;
    /**
     * Add custom CSS class names to sections
     */
    cssClasses?:
      | {
          section?:
            | (
                | 'intro'
                | 'duration'
                | 'twoColumn1'
                | 'threeColumn'
                | 'boxGrid'
                | 'learnEnroll'
                | 'twoColumn2'
                | 'enrollmentDetails'
              )
            | null;
          className: string;
          id?: string | null;
        }[]
      | null;
  };
  linkSettings?: {
    defaultLinkTarget?: ('_self' | '_blank') | null;
    linkUnderline?: ('none' | 'always' | 'hover') | null;
    /**
     * CSS transition for links (e.g., all 0.3s ease)
     */
    linkTransition?: string | null;
  };
  spacingSettings?: {
    /**
     * Padding/margin for intro section (e.g., 60px 0)
     */
    introSectionSpacing?: string | null;
    durationSectionSpacing?: string | null;
    twoColumnSection1Spacing?: string | null;
    threeColumnSectionSpacing?: string | null;
    boxGridSectionSpacing?: string | null;
    learnEnrollSectionSpacing?: string | null;
    twoColumnSection2Spacing?: string | null;
    enrollmentDetailsSectionSpacing?: string | null;
    /**
     * Spacing between elements within sections (e.g., 20px)
     */
    elementSpacing?: string | null;
  };
  borderShadowSettings?: {
    /**
     * Border radius for boxes (e.g., 8px)
     */
    boxBorderRadius?: string | null;
    /**
     * CSS box-shadow value
     */
    boxShadow?: string | null;
    boxHoverShadow?: string | null;
    /**
     * Border for sections (e.g., 1px solid #ccc)
     */
    sectionBorder?: string | null;
    sectionBorderRadius?: string | null;
  };
  columnWidthSettings?: {
    /**
     * Width for left column (e.g., 50%, 60%)
     */
    twoColumnLeftWidth?: string | null;
    twoColumnRightWidth?: string | null;
    /**
     * Width for each of the three columns
     */
    threeColumnWidth?: string | null;
    /**
     * Space between columns (e.g., 20px, 2rem)
     */
    columnGap?: string | null;
  };
  headerSettings?: {
    headingTextTransform?: ('none' | 'uppercase' | 'lowercase' | 'capitalize') | null;
    /**
     * e.g., 1px, 0.05em
     */
    headingLetterSpacing?: string | null;
    /**
     * Space below headings (e.g., 20px)
     */
    headingMarginBottom?: string | null;
    subheadingFontSize?: string | null;
    subheadingColor?: string | null;
  };
  hoverEffects?: {
    enableBoxHover?: boolean | null;
    /**
     * CSS transform on hover (e.g., translateY(-5px))
     */
    boxHoverTransform?: string | null;
    boxHoverTransition?: string | null;
    imageHoverEffect?: ('none' | 'zoom-in' | 'zoom-out' | 'opacity') | null;
    /**
     * Opacity value on hover (e.g., 0.8)
     */
    imageHoverOpacity?: string | null;
  };
  gridSettings?: {
    /**
     * Number of columns in box grid on desktop
     */
    boxGridColumns?: number | null;
    boxGridColumnsTablet?: number | null;
    boxGridColumnsMobile?: number | null;
    /**
     * Space between grid items (e.g., 20px)
     */
    boxGridGap?: string | null;
  };
  contentAlignment?: {
    introContentAlign?: ('left' | 'center' | 'right') | null;
    durationContentAlign?: ('left' | 'center' | 'right') | null;
    twoColumnTextAlign?: ('left' | 'center' | 'right' | 'justify') | null;
    threeColumnTextAlign?: ('left' | 'center' | 'right') | null;
  };
  backgroundSettings?: {
    backgroundImageSize?: ('cover' | 'contain' | 'auto') | null;
    backgroundImagePosition?: ('center' | 'top' | 'bottom' | 'left' | 'right') | null;
    backgroundImageRepeat?: ('no-repeat' | 'repeat' | 'repeat-x' | 'repeat-y') | null;
    backgroundOverlay?: boolean | null;
    /**
     * RGBA color value (e.g., rgba(0,0,0,0.5))
     */
    backgroundOverlayColor?: string | null;
  };
  centerAlignmentSettings?: {
    /**
     * Choose between <center> tag or <div style="text-align: center">
     */
    centerTag?: ('center' | 'div') | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "training-application-simple-component".
 */
export interface TrainingApplicationSimpleComponent {
  id: string;
  componentName: string;
  introSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * CSS classes for the container
     */
    containerClass?: string | null;
    logo?: {
      show?: boolean | null;
      image?: (string | null) | Media;
      width?: number | null;
      height?: number | null;
      alt?: string | null;
      loading?: ('lazy' | 'eager') | null;
    };
    heading: string;
    headingColor?: string | null;
    headingTag?: ('h1' | 'h2' | 'h3') | null;
    centerHeading?: boolean | null;
    /**
     * Drag to reorder content items
     */
    bulletPoints?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          textColor?: string | null;
          centerAlign?: boolean | null;
          fontWeight?: ('400' | '500' | '600' | '700') | null;
          id?: string | null;
        }[]
      | null;
    /**
     * WOW.js animation class
     */
    animation?: string | null;
  };
  formSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * Add "dark" class for dark mode
     */
    containerClass?: string | null;
    heading: string;
    headingColor?: string | null;
    headingTag?: ('h1' | 'h2' | 'h3') | null;
    backgroundImage?: {
      show?: boolean | null;
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      width?: number | null;
      height?: number | null;
      alt?: string | null;
      loading?: ('lazy' | 'eager') | null;
    };
    formSettings: {
      formId: string;
      formClass?: string | null;
      method?: ('post' | 'get') | null;
      action: string;
      encType?: string | null;
      subject: string;
      redirectUrl: string;
    };
    /**
     * Drag to reorder form fields
     */
    formFields?:
      | {
          fieldType: 'text' | 'email' | 'tel' | 'textarea' | 'select' | 'checkbox' | 'hidden';
          columnClass?: ('col1' | 'col2' | 'col3') | null;
          /**
           * Used as HTML name attribute
           */
          fieldName: string;
          /**
           * Must be unique. Use format: formid_fieldname
           */
          fieldId: string;
          label?: string | null;
          placeholder?: string | null;
          defaultValue?: string | null;
          required?: boolean | null;
          /**
           * Message shown when field is required
           */
          requiredMessage?: string | null;
          /**
           * Size attribute for input fields
           */
          size?: number | null;
          /**
           * Only for textarea fields
           */
          rows?: number | null;
          /**
           * Only for textarea fields
           */
          cols?: number | null;
          /**
           * Only for select fields - drag to reorder
           */
          selectOptions?:
            | {
                label: string;
                value: string;
                selected?: boolean | null;
                disabled?: boolean | null;
                id?: string | null;
              }[]
            | null;
          /**
           * Value submitted when checkbox is checked
           */
          checkboxValue?: string | null;
          /**
           * Label text for checkbox (can include links)
           */
          checkboxLabel?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          /**
           * Space-separated classes (e.g., "opt-in follow-up")
           */
          additionalClasses?: string | null;
          /**
           * Add hidden-row class to field-row
           */
          hiddenRow?: boolean | null;
          id?: string | null;
        }[]
      | null;
    disclaimerSection?: {
      show?: boolean | null;
      /**
       * Legal text, links, and messaging information
       */
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      textColor?: string | null;
      className?: string | null;
    };
    recaptchaSettings?: {
      enableV3?: boolean | null;
      v3FieldId?: string | null;
      enableV2?: boolean | null;
      v2ContainerId?: string | null;
      errorContainerId?: string | null;
      errorMessage?: string | null;
    };
    submitButton?: {
      validateButton?: {
        text?: string | null;
        id?: string | null;
        className?: string | null;
      };
      submitButton?: {
        text?: string | null;
        id?: string | null;
        name?: string | null;
        value?: string | null;
        className?: string | null;
      };
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
      hoverTextColor?: string | null;
      disabledBackgroundColor?: string | null;
      disabledTextColor?: string | null;
    };
    /**
     * System fields like form_id, human_check, etc.
     */
    hiddenFields?:
      | {
          fieldName: string;
          fieldId?: string | null;
          value?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section: 'intro' | 'form';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    defaultTextColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    h3FontSize?: string | null;
    h3Color?: string | null;
    h3FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
    labelFontSize?: string | null;
    labelFontWeight?: string | null;
    /**
     * For error messages, help text, etc.
     */
    smallFontSize?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    defaultHoverTextColor?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
    /**
     * e.g., 1px solid #000
     */
    border?: string | null;
    transition?: string | null;
  };
  formStyles?: {
    inputBackgroundColor?: string | null;
    inputTextColor?: string | null;
    inputBorderColor?: string | null;
    inputBorderWidth?: string | null;
    /**
     * e.g., 4px
     */
    inputBorderRadius?: string | null;
    /**
     * e.g., 10px 15px
     */
    inputPadding?: string | null;
    inputFocusBorderColor?: string | null;
    /**
     * CSS box-shadow value
     */
    inputFocusShadow?: string | null;
    labelColor?: string | null;
    placeholderColor?: string | null;
    errorColor?: string | null;
    /**
     * Space between form fields (e.g., 20px)
     */
    fieldSpacing?: string | null;
    textareaMinHeight?: string | null;
    selectArrowColor?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
    /**
     * Delay before animation starts (e.g., 0.2s)
     */
    animationDelay?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
    /**
     * Adjust padding for mobile devices
     */
    mobilePaddingAdjustment?: string | null;
  };
  imageSettings?: {
    enableLazyLoading?: boolean | null;
    imageQuality?: ('low' | 'medium' | 'high' | 'original') | null;
    /**
     * Automatically optimize image format (WebP, etc.)
     */
    autoFormat?: boolean | null;
    autoCompress?: boolean | null;
    /**
     * Generate multiple image sizes for different screens
     */
    responsiveImages?: boolean | null;
    /**
     * Uses <picture> with <source> tags for better responsive image control
     */
    usePicture?: boolean | null;
    /**
     * e.g., 8px, 0.5rem
     */
    imageBorderRadius?: string | null;
    /**
     * CSS box-shadow value
     */
    imageShadow?: string | null;
    draggableImages?: boolean | null;
  };
  linkSettings?: {
    defaultLinkTarget?: ('_self' | '_blank') | null;
    linkUnderline?: ('none' | 'always' | 'hover') | null;
    /**
     * CSS transition for links (e.g., all 0.3s ease)
     */
    linkTransition?: string | null;
  };
  spacingSettings?: {
    /**
     * Padding/margin for intro section (e.g., 60px 0)
     */
    introSectionSpacing?: string | null;
    formSectionSpacing?: string | null;
    /**
     * Spacing between elements within sections (e.g., 20px)
     */
    elementSpacing?: string | null;
    /**
     * Margin around logo
     */
    logoSpacing?: string | null;
    /**
     * Margin below headings
     */
    headingSpacing?: string | null;
  };
  borderShadowSettings?: {
    /**
     * Border for sections (e.g., 1px solid #ccc)
     */
    sectionBorder?: string | null;
    sectionBorderRadius?: string | null;
    /**
     * CSS box-shadow value for sections
     */
    sectionShadow?: string | null;
    formWrapperShadow?: string | null;
    formWrapperBorder?: string | null;
    formWrapperBorderRadius?: string | null;
  };
  contentAlignment?: {
    introContentAlign?: ('left' | 'center' | 'right') | null;
    formContentAlign?: ('left' | 'center' | 'right') | null;
    logoAlign?: ('left' | 'center' | 'right') | null;
  };
  backgroundSettings?: {
    backgroundImageSize?: ('cover' | 'contain' | 'auto') | null;
    backgroundImagePosition?:
      | ('center' | 'top' | 'bottom' | 'left' | 'right' | 'center center' | 'top center' | 'bottom center')
      | null;
    backgroundImageRepeat?: ('no-repeat' | 'repeat' | 'repeat-x' | 'repeat-y') | null;
    backgroundImageAttachment?: ('scroll' | 'fixed' | 'local') | null;
    backgroundOverlay?: boolean | null;
    /**
     * RGBA color value (e.g., rgba(0,0,0,0.5))
     */
    backgroundOverlayColor?: string | null;
  };
  centerAlignmentSettings?: {
    /**
     * Use <center> tag or CSS text-align for centering
     */
    useCenterTag?: boolean | null;
    /**
     * Choose modern alternative if not using <center>
     */
    centerTagReplacement?: ('div' | 'flex' | 'center') | null;
  };
  viewportSettings?: {
    /**
     * Add viewport class for responsive behavior
     */
    enableViewportClass?: boolean | null;
    /**
     * Percentage of element visible before triggering (e.g., 0.5)
     */
    viewportThreshold?: string | null;
  };
  checkboxRadioStyles?: {
    /**
     * Width and height of checkbox (e.g., 20px)
     */
    checkboxSize?: string | null;
    checkboxBorderColor?: string | null;
    checkboxBackgroundColor?: string | null;
    checkboxCheckedColor?: string | null;
    /**
     * e.g., 3px for rounded corners
     */
    checkboxBorderRadius?: string | null;
    /**
     * Space between checkbox and label
     */
    checkboxLabelSpacing?: string | null;
  };
  validationStyles?: {
    /**
     * Border color for fields with errors
     */
    errorBorderColor?: string | null;
    errorBackgroundColor?: string | null;
    errorTextColor?: string | null;
    successBorderColor?: string | null;
    successTextColor?: string | null;
    validationMessageFontSize?: string | null;
  };
  hoverEffects?: {
    enableInputHover?: boolean | null;
    inputHoverBorderColor?: string | null;
    inputHoverShadow?: string | null;
    /**
     * CSS transform on hover (e.g., scale(1.05))
     */
    linkHoverTransform?: string | null;
    imageHoverEffect?: ('none' | 'zoom-in' | 'zoom-out' | 'opacity') | null;
  };
  customCSS?: {
    /**
     * Add custom CSS styles for this component
     */
    additionalCSS?: string | null;
    /**
     * Add custom CSS class names to sections
     */
    cssClasses?:
      | {
          section?: ('intro' | 'form' | 'formWrapper' | 'formFields' | 'submitHolder') | null;
          className: string;
          id?: string | null;
        }[]
      | null;
  };
  formWrapperStyles?: {
    wrapperBackgroundColor?: string | null;
    /**
     * e.g., 40px 20px
     */
    wrapperPadding?: string | null;
    /**
     * e.g., 800px, 100%
     */
    wrapperMaxWidth?: string | null;
    /**
     * e.g., 0 auto
     */
    wrapperMargin?: string | null;
  };
  pictureSettings?: {
    /**
     * Use data-lazyload attributes with placeholder
     */
    enableLazyLoadPlaceholder?: boolean | null;
    /**
     * Base64 encoded 1x1 transparent placeholder
     */
    placeholderImage?: string | null;
    retinaSupport?: boolean | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "plastic-surgery-page-component".
 */
export interface PlasticSurgeryPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * CSS color value
     */
    titleColor?: string | null;
    /**
     * CSS font-size value (e.g., 48px, 3rem)
     */
    titleFontSize?: string | null;
    /**
     * Main description text in hero section
     */
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  pageIndexListSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    option?: ('option-1' | 'option-2') | null;
    /**
     * Drag to reorder links
     */
    links?:
      | {
          label: string;
          url: string;
          title?: string | null;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  columnSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * CSS class for padding bottom
     */
    paddingBottom?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    logoWidth?: number | null;
    logoHeight?: number | null;
    /**
     * CSS class for max width (e.g., mw-80, mw-100)
     */
    maxWidth?: string | null;
    heading?: string | null;
    headingAlignment?: ('text-left' | 'text-center' | 'text-right') | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  pageIndexSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * Drag to reorder items
     */
    items?:
      | {
          title: string;
          url: string;
          linkTitle?: string | null;
          ariaLabel?: string | null;
          image: {
            mobile?: (string | null) | Media;
            tablet?: (string | null) | Media;
            desktop?: (string | null) | Media;
            alt: string;
          };
          id?: string | null;
        }[]
      | null;
  };
  boxGridSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    theme?: ('light' | 'dark') | null;
    gridLayout?: ('default' | 'wider' | 'three-boxes' | 'option-1') | null;
    hasBackground?: boolean | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading?: string | null;
    headingColor?: string | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          /**
           * Add bullet points for this box
           */
          bulletPoints?:
            | {
                text: string;
                id?: string | null;
              }[]
            | null;
          bulletPointsLayout?: ('single' | 'columns') | null;
          backgroundColor?: string | null;
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section: 'hero' | 'pageIndexList' | 'columnSection' | 'pageIndex' | 'boxGrid';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    h3FontSize?: string | null;
    h3Color?: string | null;
    h3FontWeight?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
    /**
     * Spacing between paragraphs
     */
    paragraphSpacing?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 0.5s, 1s)
     */
    fadeInDuration?: string | null;
    fadeInUpDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 1024px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
  };
  performanceSettings?: {
    /**
     * Load images only when they come into view
     */
    lazyLoadImages?: boolean | null;
    /**
     * Automatically optimize and compress images
     */
    optimizeImages?: boolean | null;
    /**
     * Image compression quality (1-100)
     */
    imageQuality?: number | null;
  };
  customCSS?: {
    enabled?: boolean | null;
    /**
     * Add custom CSS styles
     */
    css?: string | null;
  };
  customJS?: {
    enabled?: boolean | null;
    /**
     * Add custom JavaScript code
     */
    js?: string | null;
    loadPosition?: ('header' | 'footer') | null;
  };
  advancedSettings?: {
    /**
     * Add custom CSS classes to the main container
     */
    customClasses?: string | null;
    customAttributes?:
      | {
          attribute: string;
          value: string;
          id?: string | null;
        }[]
      | null;
    /**
     * Add custom data attributes for tracking/analytics
     */
    dataAttributes?:
      | {
          /**
           * Without "data-" prefix (e.g., "module", "s3-module")
           */
          name: string;
          value?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  trackingSettings?: {
    enableTracking?: boolean | null;
    /**
     * e.g., UA-XXXXXXXXX-X or G-XXXXXXXXXX
     */
    googleAnalyticsId?: string | null;
    facebookPixelId?: string | null;
    /**
     * Add custom tracking scripts
     */
    customTrackingCode?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  /**
   * Component version for tracking changes
   */
  version?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "breast-page-component".
 */
export interface BreastPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  indexStaticSection?: {
    show?: boolean | null;
    /**
     * Drag to reorder items
     */
    items?:
      | {
          title: string;
          url: string;
          ariaLabel?: string | null;
          image: {
            mobile?: (string | null) | Media;
            tablet?: (string | null) | Media;
            desktop?: (string | null) | Media;
            large?: (string | null) | Media;
            alt: string;
          };
          /**
           * Text displayed over the image
           */
          overlayText?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section: 'hero' | 'indexStatic';
        id?: string | null;
      }[]
    | null;
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
  };
  performanceSettings?: {
    /**
     * Load images only when they come into view
     */
    lazyLoadImages?: boolean | null;
    /**
     * Automatically optimize and compress images
     */
    optimizeImages?: boolean | null;
    /**
     * Image compression quality (1-100)
     */
    imageQuality?: number | null;
  };
  advancedSettings?: {
    /**
     * Add custom CSS classes to the main container
     */
    customClasses?: string | null;
    /**
     * Add custom data attributes for tracking/analytics
     */
    dataAttributes?:
      | {
          /**
           * Without "data-" prefix (e.g., "s3-module")
           */
          name: string;
          value?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  /**
   * Component version for tracking changes
   */
  version?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "breast-augmentation-page-component".
 */
export interface BreastAugmentationPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * Main description text in hero section
     */
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      className?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection?: {
    show?: boolean | null;
    className?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    logoWidth?: number | null;
    logoHeight?: number | null;
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  bannerSection1?: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    /**
     * Text that appears above the main heading in smaller font
     */
    headingSmall?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  halfImageSection: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  ctaBeforeAfterSection?: {
    show?: boolean | null;
    className?: string | null;
    title?: string | null;
    titleSmall?: string | null;
    /**
     * Add before and after image pairs
     */
    patients?:
      | {
          url: string;
          beforeImage?: {
            mobile?: (string | null) | Media;
            tablet?: (string | null) | Media;
            desktop?: (string | null) | Media;
            alt?: string | null;
          };
          afterImage?: {
            mobile?: (string | null) | Media;
            desktop?: (string | null) | Media;
            alt?: string | null;
          };
          id?: string | null;
        }[]
      | null;
    ageRestricted?: {
      enabled?: boolean | null;
      heading?: string | null;
      message?: string | null;
      buttonText?: string | null;
    };
    viewGalleryButton?: {
      text?: string | null;
      url?: string | null;
      title?: string | null;
      ariaLabel?: string | null;
    };
  };
  boxGridSection?: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    /**
     * Content that appears before the boxes
     */
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          id?: string | null;
        }[]
      | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  columnMediaSection: {
    show?: boolean | null;
    className?: string | null;
    /**
     * Classes for positioning (e.g., media-right, media-left)
     */
    rowClassName?: string | null;
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  bannerSection2?: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section: 'hero' | 'intro' | 'banner1' | 'halfImage' | 'ctaBeforeAfter' | 'boxGrid' | 'columnMedia' | 'banner2';
        id?: string | null;
      }[]
    | null;
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
  };
  performanceSettings?: {
    /**
     * Load images only when they come into view
     */
    lazyLoadImages?: boolean | null;
    /**
     * Automatically optimize and compress images
     */
    optimizeImages?: boolean | null;
    /**
     * Image compression quality (1-100)
     */
    imageQuality?: number | null;
  };
  advancedSettings?: {
    /**
     * Add custom CSS classes to the main container
     */
    customClasses?: string | null;
    /**
     * Add custom data attributes for tracking/analytics
     */
    dataAttributes?:
      | {
          /**
           * Without "data-" prefix (e.g., "s3-module")
           */
          name: string;
          value?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  /**
   * Component version for tracking changes
   */
  version?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "breast-lift-page-component".
 */
export interface BreastLiftPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * Main description text in hero section
     */
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      className?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection?: {
    show?: boolean | null;
    className?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    logoWidth?: number | null;
    logoHeight?: number | null;
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  bannerSection1?: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    leftContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    rightContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  halfImageSection: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  bannerSection2?: {
    show?: boolean | null;
    className?: string | null;
    leftHeading?: string | null;
    leftContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    rightHeading?: string | null;
    rightContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  boxGridSection?: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    /**
     * Content that appears before the boxes
     */
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          id?: string | null;
        }[]
      | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  twoColumnSection?: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    leftContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    rightContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  bannerSection3?: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section: 'hero' | 'intro' | 'banner1' | 'halfImage' | 'banner2' | 'boxGrid' | 'twoColumn' | 'banner3';
        id?: string | null;
      }[]
    | null;
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
  };
  performanceSettings?: {
    /**
     * Load images only when they come into view
     */
    lazyLoadImages?: boolean | null;
    /**
     * Automatically optimize and compress images
     */
    optimizeImages?: boolean | null;
    /**
     * Image compression quality (1-100)
     */
    imageQuality?: number | null;
  };
  advancedSettings?: {
    /**
     * Add custom CSS classes to the main container
     */
    customClasses?: string | null;
    /**
     * Add custom data attributes for tracking/analytics
     */
    dataAttributes?:
      | {
          /**
           * Without "data-" prefix (e.g., "s3-module")
           */
          name: string;
          value?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  /**
   * Component version for tracking changes
   */
  version?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "breast-reduction-page-component".
 */
export interface BreastReductionPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * Main description text in hero section
     */
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      className?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection?: {
    show?: boolean | null;
    className?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    logoWidth?: number | null;
    logoHeight?: number | null;
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  halfImageSection: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  ctaGeneralSection?: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    headingUrl?: string | null;
    ctaButton?: {
      text?: string | null;
      url?: string | null;
      className?: string | null;
    };
  };
  columnSection1: {
    show?: boolean | null;
    className?: string | null;
    /**
     * Classes for positioning (e.g., media-right, media-left)
     */
    rowClassName?: string | null;
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  boxGridSection?: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    /**
     * Content that appears before the boxes
     */
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          /**
           * Small text that appears in the heading (e.g., alternative name)
           */
          subheading?: string | null;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          id?: string | null;
        }[]
      | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  columnSection2: {
    show?: boolean | null;
    className?: string | null;
    /**
     * Classes for positioning (e.g., media-right, media-left)
     */
    rowClassName?: string | null;
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  bannerSection?: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'intro'
          | 'halfImage'
          | 'ctaGeneral'
          | 'columnSection1'
          | 'boxGrid'
          | 'columnSection2'
          | 'banner';
        id?: string | null;
      }[]
    | null;
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
  };
  performanceSettings?: {
    /**
     * Load images only when they come into view
     */
    lazyLoadImages?: boolean | null;
    /**
     * Automatically optimize and compress images
     */
    optimizeImages?: boolean | null;
    /**
     * Image compression quality (1-100)
     */
    imageQuality?: number | null;
  };
  advancedSettings?: {
    /**
     * Add custom CSS classes to the main container
     */
    customClasses?: string | null;
    /**
     * Add custom data attributes for tracking/analytics
     */
    dataAttributes?:
      | {
          /**
           * Without "data-" prefix (e.g., "s3-module")
           */
          name: string;
          value?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  /**
   * Component version for tracking changes
   */
  version?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "breast-revision-page-component".
 */
export interface BreastRevisionPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    /**
     * Main description text in hero section
     */
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      className?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection?: {
    show?: boolean | null;
    className?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    logoWidth?: number | null;
    logoHeight?: number | null;
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  halfImageSection: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    subheading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  bannerSection1?: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    /**
     * Content that appears before the columns
     */
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * List items for the left column
     */
    leftColumn?:
      | {
          title: string;
          description?: string | null;
          id?: string | null;
        }[]
      | null;
    /**
     * List items for the right column
     */
    rightColumn?:
      | {
          title: string;
          description?: string | null;
          id?: string | null;
        }[]
      | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  columnSection1: {
    show?: boolean | null;
    className?: string | null;
    /**
     * Classes for positioning (e.g., media-right, media-left)
     */
    rowClassName?: string | null;
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  boxGridSection1?: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    /**
     * Content that appears before the boxes
     */
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Content that appears after the boxes
     */
    afterContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  columnSection2?: {
    show?: boolean | null;
    className?: string | null;
    /**
     * Classes for positioning
     */
    rowClassName?: string | null;
    heading?: string | null;
    mainIntro?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    leftColumn?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    rightColumn?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  boxGridSection2?: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    /**
     * Content that appears before the boxes
     */
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Content that appears after the boxes
     */
    afterContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'intro'
          | 'halfImage'
          | 'bannerSection1'
          | 'columnSection1'
          | 'boxGridSection1'
          | 'columnSection2'
          | 'boxGridSection2';
        id?: string | null;
      }[]
    | null;
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
  };
  performanceSettings?: {
    /**
     * Load images only when they come into view
     */
    lazyLoadImages?: boolean | null;
    /**
     * Automatically optimize and compress images
     */
    optimizeImages?: boolean | null;
    /**
     * Image compression quality (1-100)
     */
    imageQuality?: number | null;
  };
  advancedSettings?: {
    /**
     * Add custom CSS classes to the main container
     */
    customClasses?: string | null;
    /**
     * Add custom data attributes for tracking/analytics
     */
    dataAttributes?:
      | {
          /**
           * Without "data-" prefix (e.g., "s3-module")
           */
          name: string;
          value?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  /**
   * Component version for tracking changes
   */
  version?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "body-page-component".
 */
export interface BodyPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  indexStaticSection?: {
    show?: boolean | null;
    /**
     * Drag to reorder items
     */
    items?:
      | {
          title: string;
          url: string;
          /**
           * Text displayed over the image
           */
          overlayText?: string | null;
          image: {
            mobile?: (string | null) | Media;
            tablet?: (string | null) | Media;
            desktop?: (string | null) | Media;
            large?: (string | null) | Media;
            alt: string;
          };
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section: 'hero' | 'indexStatic';
        id?: string | null;
      }[]
    | null;
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
  };
  performanceSettings?: {
    /**
     * Load images only when they come into view
     */
    lazyLoadImages?: boolean | null;
    /**
     * Automatically optimize and compress images
     */
    optimizeImages?: boolean | null;
    /**
     * Image compression quality (1-100)
     */
    imageQuality?: number | null;
  };
  advancedSettings?: {
    /**
     * Add custom CSS classes to the main container
     */
    customClasses?: string | null;
    /**
     * Add custom data attributes for tracking/analytics
     */
    dataAttributes?:
      | {
          /**
           * Without "data-" prefix (e.g., "s3-module")
           */
          name: string;
          value?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  /**
   * Component version for tracking changes
   */
  version?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "liposuction-page-component".
 */
export interface LiposuctionPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    subtitle?: string | null;
    /**
     * Main description text in hero section
     */
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      className?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection?: {
    show?: boolean | null;
    className?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    logoWidth?: number | null;
    logoHeight?: number | null;
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  bannerSection1?: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    subheading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  ctaBeforeAfterSection?: {
    show?: boolean | null;
    className?: string | null;
    title?: string | null;
    subtitle?: string | null;
    galleryUrl?: string | null;
    ageRestrictionWarning?: {
      show?: boolean | null;
      heading?: string | null;
      message?: string | null;
      buttonText?: string | null;
    };
    /**
     * Add before and after image pairs
     */
    beforeAfterItems?:
      | {
          url: string;
          beforeImage?: {
            mobile?: (string | null) | Media;
            tablet?: (string | null) | Media;
            large?: (string | null) | Media;
            alt?: string | null;
          };
          afterImage?: {
            mobile?: (string | null) | Media;
            large?: (string | null) | Media;
            alt?: string | null;
          };
          id?: string | null;
        }[]
      | null;
  };
  halfImageSection: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    subheading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  bannerSection2?: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  threeColumnSection?: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    leftColumn?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    centerColumn?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    rightColumn?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  columnSection1: {
    show?: boolean | null;
    className?: string | null;
    /**
     * Classes for positioning (e.g., media-right, media-left)
     */
    rowClassName?: string | null;
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  boxGridSection?: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    subheading?: string | null;
    /**
     * Content that appears before the boxes
     */
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Content that appears after the boxes
     */
    afterContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  columnSection2?: {
    show?: boolean | null;
    className?: string | null;
    /**
     * Classes for positioning
     */
    rowClassName?: string | null;
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'intro'
          | 'bannerSection1'
          | 'ctaBeforeAfter'
          | 'halfImage'
          | 'bannerSection2'
          | 'threeColumn'
          | 'columnSection1'
          | 'boxGrid'
          | 'columnSection2';
        id?: string | null;
      }[]
    | null;
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
  };
  performanceSettings?: {
    /**
     * Load images only when they come into view
     */
    lazyLoadImages?: boolean | null;
    /**
     * Automatically optimize and compress images
     */
    optimizeImages?: boolean | null;
    /**
     * Image compression quality (1-100)
     */
    imageQuality?: number | null;
  };
  advancedSettings?: {
    /**
     * Add custom CSS classes to the main container
     */
    customClasses?: string | null;
    /**
     * Add custom data attributes for tracking/analytics
     */
    dataAttributes?:
      | {
          /**
           * Without "data-" prefix (e.g., "s3-module")
           */
          name: string;
          value?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  /**
   * Component version for tracking changes
   */
  version?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mommy-makeover-page-component".
 */
export interface MommyMakeoverPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    titleSmall?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      className?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection?: {
    show?: boolean | null;
    className?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    logoWidth?: number | null;
    logoHeight?: number | null;
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  boxGridSection1?: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    boxes?:
      | {
          heading: string;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          id?: string | null;
        }[]
      | null;
  };
  halfImageSection: {
    show?: boolean | null;
    className?: string | null;
    rowClassName?: string | null;
    copyClassName?: string | null;
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  columnMediaSection: {
    show?: boolean | null;
    className?: string | null;
    rowClassName?: string | null;
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  boxGridSection2?: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    boxes?:
      | {
          heading: string;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          id?: string | null;
        }[]
      | null;
    contentAfter?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  ctaBeforeAfterSection?: {
    show?: boolean | null;
    className?: string | null;
    title?: string | null;
    titleSmall?: string | null;
    patients?:
      | {
          url: string;
          beforeImage?: {
            mobile?: (string | null) | Media;
            tablet?: (string | null) | Media;
            desktop?: (string | null) | Media;
            alt?: string | null;
          };
          afterImage?: {
            mobile?: (string | null) | Media;
            desktop?: (string | null) | Media;
            alt?: string | null;
          };
          id?: string | null;
        }[]
      | null;
    ageRestricted?: {
      enabled?: boolean | null;
      heading?: string | null;
      message?: string | null;
      buttonText?: string | null;
    };
    viewGalleryButton?: {
      text?: string | null;
      url?: string | null;
      title?: string | null;
      ariaLabel?: string | null;
    };
  };
  twoColumnSection?: {
    show?: boolean | null;
    className?: string | null;
    rowClassName?: string | null;
    heading?: string | null;
    leftColumn?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    rightColumn?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  bannerSection?: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    headingSmall?: string | null;
    headingAlignment?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'intro'
          | 'boxGrid1'
          | 'halfImage'
          | 'columnMedia'
          | 'boxGrid2'
          | 'ctaBeforeAfter'
          | 'twoColumn'
          | 'banner';
        id?: string | null;
      }[]
    | null;
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  isActive?: boolean | null;
  version?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tummy-tuck-page-component".
 */
export interface TummyTuckPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      className?: string | null;
    };
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introSection?: {
    show?: boolean | null;
    className?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    logoWidth?: number | null;
    logoHeight?: number | null;
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  halfImageSection: {
    show?: boolean | null;
    className?: string | null;
    rowClassName?: string | null;
    copyClassName?: string | null;
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  boxGridSection1?: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    boxes?:
      | {
          heading: string;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          id?: string | null;
        }[]
      | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  boxGridSection2?: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    boxes?:
      | {
          heading: string;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          id?: string | null;
        }[]
      | null;
  };
  ctaBeforeAfterSection?: {
    show?: boolean | null;
    className?: string | null;
    title?: string | null;
    titleSmall?: string | null;
    patients?:
      | {
          url: string;
          beforeImage?: {
            mobile?: (string | null) | Media;
            tablet?: (string | null) | Media;
            desktop?: (string | null) | Media;
            alt?: string | null;
          };
          afterImage?: {
            mobile?: (string | null) | Media;
            desktop?: (string | null) | Media;
            alt?: string | null;
          };
          id?: string | null;
        }[]
      | null;
    ageRestricted?: {
      enabled?: boolean | null;
      heading?: string | null;
      message?: string | null;
      buttonText?: string | null;
    };
    viewGalleryButton?: {
      text?: string | null;
      url?: string | null;
      title?: string | null;
      ariaLabel?: string | null;
    };
  };
  bannerSection1?: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  columnMediaSection: {
    show?: boolean | null;
    className?: string | null;
    rowClassName?: string | null;
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  bannerSection2?: {
    show?: boolean | null;
    className?: string | null;
    heading?: string | null;
    headingAlignment?: string | null;
    /**
     * Use bullet lists for the "Why Choose" points. Content will be rendered with columns class.
     */
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'intro'
          | 'halfImage'
          | 'boxGrid1'
          | 'boxGrid2'
          | 'ctaBeforeAfter'
          | 'banner1'
          | 'columnMedia'
          | 'banner2';
        id?: string | null;
      }[]
    | null;
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
  };
  isActive?: boolean | null;
  version?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog".
 */
export interface Blog {
  id: string;
  title: string;
  /**
   * This will be the URL path (e.g., "botox-101" becomes /blog/botox-101/)
   */
  slug: string;
  /**
   * Brief summary shown in blog listing (150-200 characters recommended)
   */
  excerpt?: string | null;
  featuredImage?: {
    image?: (string | null) | Media;
    mobile?: (string | null) | Media;
    tablet?: (string | null) | Media;
    desktop?: (string | null) | Media;
    alt?: string | null;
  };
  content: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  publishedDate: string;
  status: 'draft' | 'published' | 'archived';
  /**
   * Feature this post on the homepage
   */
  featured?: boolean | null;
  seo?: {
    /**
     * Override default title for SEO (60 characters recommended)
     */
    metaTitle?: string | null;
    /**
     * Brief description for search engines (155-160 characters recommended)
     */
    metaDescription?: string | null;
    /**
     * Image for social media sharing (1200x630px recommended)
     */
    ogImage?: (string | null) | Media;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locations".
 */
export interface Location {
  id: string;
  name: string;
  image: string | Media;
  alt: string;
  address: string;
  phone: string;
  coordinates: {
    lat: number;
    lng: number;
  };
  reviews: {
    rating: number;
    count: number;
  };
  businessHours?:
    | {
        day: 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday';
        openTime: string;
        closeTime: string;
        isClosed?: boolean | null;
        id?: string | null;
      }[]
    | null;
  providers?: (string | Provider)[] | null;
  /**
   * Used in the URL path (e.g., /locations/clearwater)
   */
  slug: string;
  /**
   * Show this location on the website
   */
  isActive?: boolean | null;
  featured?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "providers".
 */
export interface Provider {
  id: string;
  name: string;
  title: string;
  image: string | Media;
  /**
   * Optional background image for provider detail view
   */
  backgroundImage?: (string | null) | Media;
  latitude: number;
  longitude: number;
  /**
   * Default zoom level (1-20, higher = closer)
   */
  zoom?: number | null;
  primaryLocation: string | Location;
  additionalLocations?: (string | Location)[] | null;
  reviews: {
    rating: number;
    count: number;
  };
  /**
   * Provider biography and qualifications
   */
  bio?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  specialties?:
    | {
        specialty: string;
        id?: string | null;
      }[]
    | null;
  experience?:
    | {
        experience: string;
        id?: string | null;
      }[]
    | null;
  awards?:
    | {
        Awards: string;
        id?: string | null;
      }[]
    | null;
  memberships?:
    | {
        Memberships: string;
        id?: string | null;
      }[]
    | null;
  personal?:
    | {
        Personal: string;
        id?: string | null;
      }[]
    | null;
  education?:
    | {
        degree: string;
        institution: string;
        year?: string | null;
        id?: string | null;
      }[]
    | null;
  certifications?:
    | {
        certification: string;
        id?: string | null;
      }[]
    | null;
  languages?:
    | {
        language: string;
        id?: string | null;
      }[]
    | null;
  acceptingNewPatients?: boolean | null;
  /**
   * Used in the URL path (e.g., /providers/bria-bennie)
   */
  slug: string;
  /**
   * Show this provider on the website
   */
  isActive?: boolean | null;
  featured?: boolean | null;
  /**
   * Lower numbers appear first
   */
  sortOrder?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "clermont-page-component".
 */
export interface ClermontPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    titleColor?: string | null;
    titleFontSize?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  experienceSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * CSS value (e.g., 30px, 2rem)
     */
    paddingTop?: string | null;
    paddingBottom?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    logoWidth?: string | null;
    logoHeight?: string | null;
    heading: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentAlignment?: ('left' | 'center' | 'right') | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      className?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
  };
  pathToBannerSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    className?: string | null;
    animationClass?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Add up to 2 columns of content
     */
    columns?:
      | {
          heading?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          bulletPoints?:
            | {
                text: string;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
  };
  personalizedCareSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    paddingTop?: string | null;
    paddingBottom?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  goldfingersWayBannerSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    className?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder services
     */
    servicesList?:
      | {
          serviceName: string;
          serviceUrl?: string | null;
          description?: string | null;
          id?: string | null;
        }[]
      | null;
    closingContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  nonSurgicalEnhancementsSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    paddingTop?: string | null;
    paddingBottom?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  goldfingersStoryBannerSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    className?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  refreshRenewRestoreSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    imagePosition?: ('left' | 'right') | null;
    animationClass?: string | null;
    paddingClass?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  plasticSurgeryServicesSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    paddingBottom?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  experienceGoldfingersBannerSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    className?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    columns?:
      | {
          heading?: string | null;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          id?: string | null;
        }[]
      | null;
  };
  whyChooseUsSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    /**
     * Add up to 2 columns
     */
    columns?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          animationClass?: ('fadeInLeft' | 'fadeInRight' | 'fadeInUp' | '') | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'experience'
          | 'pathToBanner'
          | 'personalizedCare'
          | 'goldfingersWayBanner'
          | 'nonSurgicalEnhancements'
          | 'goldfingersStoryBanner'
          | 'refreshRenewRestore'
          | 'plasticSurgeryServices'
          | 'experienceGoldfingersBanner'
          | 'whyChooseUs';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    h3FontSize?: string | null;
    h3Color?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
    /**
     * For small text and captions
     */
    smallFontSize?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
    /**
     * CSS transition value (e.g., all 0.3s ease)
     */
    transition?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for slide in animations
     */
    slideInDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
    /**
     * Delay before animation starts (e.g., 0.5s)
     */
    animationDelay?: string | null;
  };
  layoutSettings?: {
    /**
     * Gap between columns (e.g., 30px, 2rem)
     */
    columnGap?: string | null;
    /**
     * Gap between rows (e.g., 20px, 1rem)
     */
    rowGap?: string | null;
    /**
     * Maximum width for content sections
     */
    maxContentWidth?: string | null;
    verticalAlignmentDefault?: ('top' | 'center' | 'bottom') | null;
  };
  imageSettings?: {
    lazyLoading?: boolean | null;
    /**
     * Compression quality (e.g., 85, 90)
     */
    imageQuality?: string | null;
    /**
     * Sharpness value (e.g., 5)
     */
    imageSharpness?: string | null;
    objectFit?: ('cover' | 'contain' | 'fill' | 'none' | 'scale-down') | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    ogTitle?: string | null;
    ogDescription?: string | null;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
    /**
     * Add schema.org structured data in JSON-LD format
     */
    structuredData?: string | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    /**
     * Width of focus outlines (e.g., 2px)
     */
    focusVisibleWidth?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 800px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Screen width for desktop (e.g., 1400px)
     */
    desktopBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
    mobileStackSections?: boolean | null;
    /**
     * Select elements to hide on mobile devices
     */
    hideMobileElements?:
      | {
          elementId?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  performanceSettings?: {
    enableCaching?: boolean | null;
    preloadImages?: boolean | null;
    deferNonCriticalCSS?: boolean | null;
    minimizeHTTP?: boolean | null;
  };
  customCSS?: {
    /**
     * Add custom CSS that applies to the entire page
     */
    globalCSS?: string | null;
    heroSectionCSS?: string | null;
    bannerSectionCSS?: string | null;
    columnSectionCSS?: string | null;
  };
  customJS?: {
    /**
     * Scripts to be included in the <head> tag
     */
    headerScripts?: string | null;
    /**
     * Scripts to be included before </body> tag
     */
    footerScripts?: string | null;
    /**
     * Google Analytics or other tracking codes
     */
    analyticsCode?: string | null;
  };
  moduleClasses?: {
    heroModuleClass?: string | null;
    columnModuleClass?: string | null;
    bannerModuleClass?: string | null;
    halfImageModuleClass?: string | null;
    twoColumnModuleClass?: string | null;
  };
  versionControl?: {
    version?: string | null;
    lastModifiedBy?: string | null;
    /**
     * Document changes made to this component
     */
    changeLog?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "clearwater-page-component".
 */
export interface ClearwaterPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    /**
     * CSS color value (e.g., #ffffff, rgba(0,0,0,0.5))
     */
    backgroundColor?: string | null;
    moduleClass?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    titleColor?: string | null;
    titleFontSize?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    moduleClass?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    logoWidth?: string | null;
    logoHeight?: string | null;
    heading: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentAlignment?: ('left' | 'center' | 'right') | null;
    /**
     * CSS class for max width (e.g., mw-80)
     */
    maxWidth?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      className?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
  };
  halfImageSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    moduleClass?: string | null;
    imagePosition?: ('left' | 'right') | null;
    marginTop?: string | null;
    paddingClass?: string | null;
    heading: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          text: string;
          id?: string | null;
        }[]
      | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  boxGridSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    moduleClass?: string | null;
    animationClass?: string | null;
    heading: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  goldfingersWaySection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    moduleClass?: string | null;
    marginTop?: string | null;
    paddingBottom?: string | null;
    heading: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    headingColor?: string | null;
    headingAlignment?: ('left' | 'center' | 'right') | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder services
     */
    servicesList?:
      | {
          serviceName: string;
          serviceUrl?: string | null;
          description?: string | null;
          id?: string | null;
        }[]
      | null;
    closingContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  nonSurgicalSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    moduleClass?: string | null;
    marginBottom?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  goldfingersStoryBanner: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    moduleClass?: string | null;
    animationClass?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    headingAlignment?: ('left' | 'center' | 'right') | null;
    /**
     * Add up to 3 columns
     */
    columns?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
    columnLayout?: ('columns-two' | 'columns-three') | null;
  };
  twoColumnSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    moduleClass?: string | null;
    verticalAlign?: boolean | null;
    /**
     * Add up to 2 columns
     */
    columns?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          animationClass?: ('fadeInLeft' | 'fadeInRight' | 'fadeInUp' | '') | null;
          id?: string | null;
        }[]
      | null;
  };
  ctaGeneralSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    moduleClass?: string | null;
    heading: string;
    headingLink?: string | null;
    headingColor?: string | null;
    ctaButton: {
      text: string;
      url: string;
      className?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      hoverBackgroundColor?: string | null;
    };
  };
  plasticSurgerySection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    moduleClass?: string | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    heading: string;
    headingColor?: string | null;
    headingAlignment?: ('left' | 'center' | 'right') | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder services
     */
    servicesList?:
      | {
          serviceName: string;
          serviceUrl?: string | null;
          description?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  boxGridSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    moduleClass?: string | null;
    animationClass?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'introColumn'
          | 'halfImageSection1'
          | 'boxGridSection1'
          | 'goldfingersWay'
          | 'nonSurgical'
          | 'goldfingersStoryBanner'
          | 'twoColumn'
          | 'ctaGeneral'
          | 'plasticSurgery'
          | 'boxGridSection2';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    /**
     * CSS max-width value (e.g., 1200px, 100%)
     */
    containerMaxWidth?: string | null;
    /**
     * CSS padding value (e.g., 20px, 1rem 2rem)
     */
    containerPadding?: string | null;
    /**
     * Spacing between sections (e.g., 60px, 4rem)
     */
    sectionSpacing?: string | null;
    /**
     * CSS font-family value
     */
    fontFamily?: string | null;
    /**
     * Primary brand color
     */
    primaryColor?: string | null;
    /**
     * Secondary brand color
     */
    secondaryColor?: string | null;
    /**
     * Default text color for the page
     */
    textColor?: string | null;
    /**
     * Default color for links
     */
    linkColor?: string | null;
    /**
     * Color for links on hover
     */
    linkHoverColor?: string | null;
  };
  typographySettings?: {
    h1FontSize?: string | null;
    h1Color?: string | null;
    h1FontWeight?: string | null;
    h2FontSize?: string | null;
    h2Color?: string | null;
    h2FontWeight?: string | null;
    h3FontSize?: string | null;
    h3Color?: string | null;
    bodyFontSize?: string | null;
    bodyLineHeight?: string | null;
    /**
     * For small text and captions
     */
    smallFontSize?: string | null;
  };
  buttonStyles?: {
    defaultBackgroundColor?: string | null;
    defaultTextColor?: string | null;
    defaultHoverBackground?: string | null;
    whiteButtonBackground?: string | null;
    whiteButtonTextColor?: string | null;
    whiteButtonHoverBackground?: string | null;
    /**
     * e.g., 4px, 0.5rem
     */
    borderRadius?: string | null;
    /**
     * e.g., 12px 24px
     */
    padding?: string | null;
    fontSize?: string | null;
    fontWeight?: string | null;
    /**
     * CSS transition value (e.g., all 0.3s ease)
     */
    transition?: string | null;
  };
  animationSettings?: {
    enableAnimations?: boolean | null;
    /**
     * Duration for fade in animations (e.g., 1s, 2s)
     */
    fadeInDuration?: string | null;
    /**
     * Duration for fade in up animations
     */
    fadeInUpDuration?: string | null;
    /**
     * Duration for fade in left animations
     */
    fadeInLeftDuration?: string | null;
    /**
     * Duration for fade in right animations
     */
    fadeInRightDuration?: string | null;
    /**
     * CSS easing function
     */
    animationEasing?: string | null;
    /**
     * Delay before animation starts (e.g., 0.5s)
     */
    animationDelay?: string | null;
  };
  layoutSettings?: {
    /**
     * Gap between columns (e.g., 30px, 2rem)
     */
    columnGap?: string | null;
    /**
     * Gap between rows (e.g., 20px, 1rem)
     */
    rowGap?: string | null;
    /**
     * Maximum width for content sections
     */
    maxContentWidth?: string | null;
    verticalAlignmentDefault?: ('top' | 'center' | 'bottom') | null;
  };
  imageSettings?: {
    lazyLoading?: boolean | null;
    /**
     * Compression quality (e.g., 85, 90)
     */
    imageQuality?: string | null;
    /**
     * Sharpness value (e.g., 5)
     */
    imageSharpness?: string | null;
    objectFit?: ('cover' | 'contain' | 'fill' | 'none' | 'scale-down') | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    ogImage?: (string | null) | Media;
    ogTitle?: string | null;
    ogDescription?: string | null;
    /**
     * Comma-separated keywords for SEO
     */
    keywords?: string | null;
    canonicalUrl?: string | null;
    robots?: ('index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow') | null;
    /**
     * Add schema.org structured data in JSON-LD format
     */
    structuredData?: string | null;
  };
  accessibilitySettings?: {
    skipToContent?: boolean | null;
    ariaLabelsEnabled?: boolean | null;
    altTextRequired?: boolean | null;
    /**
     * Color for focus outlines (accessibility)
     */
    focusVisibleColor?: string | null;
    /**
     * Width of focus outlines (e.g., 2px)
     */
    focusVisibleWidth?: string | null;
    contrastMode?: ('normal' | 'high' | 'very-high') | null;
  };
  mobileSettings?: {
    /**
     * Screen width for mobile (e.g., 768px)
     */
    mobileBreakpoint?: string | null;
    /**
     * Screen width for tablet (e.g., 800px)
     */
    tabletBreakpoint?: string | null;
    /**
     * Screen width for desktop (e.g., 1400px)
     */
    desktopBreakpoint?: string | null;
    /**
     * Percentage adjustment for mobile fonts (e.g., 90%)
     */
    mobileFontSizeAdjustment?: string | null;
    /**
     * Percentage adjustment for mobile spacing
     */
    mobileSpacingAdjustment?: string | null;
    mobileStackSections?: boolean | null;
    /**
     * Select elements to hide on mobile devices
     */
    hideMobileElements?:
      | {
          elementId?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  performanceSettings?: {
    enableCaching?: boolean | null;
    preloadImages?: boolean | null;
    deferNonCriticalCSS?: boolean | null;
    minimizeHTTP?: boolean | null;
  };
  customCSS?: {
    /**
     * Add custom CSS that applies to the entire page
     */
    globalCSS?: string | null;
    heroSectionCSS?: string | null;
    columnSectionCSS?: string | null;
    bannerSectionCSS?: string | null;
    boxGridSectionCSS?: string | null;
    halfImageSectionCSS?: string | null;
  };
  customJS?: {
    /**
     * Scripts to be included in the <head> tag
     */
    headerScripts?: string | null;
    /**
     * Scripts to be included before </body> tag
     */
    footerScripts?: string | null;
    /**
     * Google Analytics or other tracking codes
     */
    analyticsCode?: string | null;
  };
  moduleClasses?: {
    heroModuleClass?: string | null;
    columnModuleClass?: string | null;
    bannerModuleClass?: string | null;
    halfImageModuleClass?: string | null;
    twoColumnModuleClass?: string | null;
    boxGridModuleClass?: string | null;
    ctaGeneralModuleClass?: string | null;
  };
  spacingClasses?: {
    mt0?: string | null;
    mt30?: string | null;
    mb0?: string | null;
    mb30?: string | null;
    pb20?: string | null;
  };
  versionControl?: {
    version?: string | null;
    lastModifiedBy?: string | null;
    /**
     * Document changes made to this component
     */
    changeLog?: string | null;
  };
  /**
   * Toggle to enable/disable this component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "downtown-orlando-page-component".
 */
export interface DowntownOrlandoPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    moduleClass?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    titleColor?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  boxGridSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    contentBeforeHeading?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentBeforeText?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          id?: string | null;
        }[]
      | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  dividerSection1?: {
    show?: boolean | null;
    image?: (string | null) | Media;
    imageAlt?: string | null;
  };
  bannerSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    columns?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
  };
  servicesSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder services
     */
    servicesList?:
      | {
          serviceName: string;
          serviceUrl?: string | null;
          description?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  halfImageSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    flipped?: boolean | null;
    heading: string;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  storySection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  bannerSection2?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    columns?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
  };
  twoColumnSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    columns?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          animationClass?: ('fadeInLeft' | 'fadeInRight' | '') | null;
          id?: string | null;
        }[]
      | null;
  };
  ctaSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    heading: string;
    headingLink?: string | null;
    ctaButton: {
      text: string;
      url: string;
      className?: string | null;
    };
  };
  dividerSection2?: {
    show?: boolean | null;
    image?: (string | null) | Media;
    imageAlt?: string | null;
  };
  plasticSurgeryBanner: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder services
     */
    servicesList?:
      | {
          serviceName: string;
          serviceUrl?: string | null;
          description?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  finalColumnMedia: {
    show?: boolean | null;
    backgroundColor?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: string;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'introColumn'
          | 'boxGrid'
          | 'divider1'
          | 'banner1'
          | 'services'
          | 'halfImage'
          | 'story'
          | 'banner2'
          | 'twoColumn'
          | 'cta'
          | 'divider2'
          | 'plasticSurgery'
          | 'finalColumnMedia';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    primaryColor?: string | null;
    secondaryColor?: string | null;
    textColor?: string | null;
    linkColor?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    keywords?: string | null;
  };
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "downtown-tampa-page-component".
 */
export interface DowntownTampaPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    titleColor?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  introColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  boxGridSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    contentBeforeHeading?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentBeforeText?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          id?: string | null;
        }[]
      | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  dividerSection1?: {
    show?: boolean | null;
    image?: (string | null) | Media;
    imageAlt?: string | null;
  };
  bannerSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    columns?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
  };
  servicesSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder services
     */
    servicesList?:
      | {
          serviceName: string;
          serviceUrl?: string | null;
          description?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  halfImageSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    flipped?: boolean | null;
    heading: string;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  storySection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  bannerSection2?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    columns?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
  };
  twoColumnSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    columns?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          animationClass?: ('fadeInLeft' | 'fadeInRight' | '') | null;
          id?: string | null;
        }[]
      | null;
  };
  ctaSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    heading: string;
    headingLink?: string | null;
    ctaButton: {
      text: string;
      url: string;
      className?: string | null;
    };
  };
  finalColumnMedia: {
    show?: boolean | null;
    backgroundColor?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: string;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'introColumn'
          | 'boxGrid'
          | 'divider1'
          | 'banner1'
          | 'services'
          | 'halfImage'
          | 'story'
          | 'banner2'
          | 'twoColumn'
          | 'cta'
          | 'finalColumnMedia';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    primaryColor?: string | null;
    secondaryColor?: string | null;
    textColor?: string | null;
    linkColor?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    keywords?: string | null;
  };
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lake-mary-page-component".
 */
export interface LakeMaryPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: {
      smallText?: string | null;
      mainText: string;
      color?: string | null;
    };
    description?: string | null;
    descriptionColor?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    paddingBottom?: boolean | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      className?: string | null;
    };
    maxWidth?: string | null;
    textAlign?: string | null;
  };
  boxGridSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    layoutOption?: ('option-1' | 'option-2' | 'default') | null;
    noBg?: boolean | null;
    wider?: boolean | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          headingColor?: string | null;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          contentColor?: string | null;
          animationClass?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  columnMediaSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    mediaPosition?: ('media-left' | 'media-right') | null;
    paddingTop?: boolean | null;
    marginBottom?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  bannerSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    darkMode?: boolean | null;
    hideDivider?: boolean | null;
    backgroundClass?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    animationClass?: string | null;
  };
  twoColumnSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    paddingBottom?: string | null;
    verticalAlign?: boolean | null;
    columns?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          animationClass?: ('fadeInLeft' | 'fadeInRight' | 'fadeInUp' | '') | null;
          id?: string | null;
        }[]
      | null;
  };
  halfImageSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    flipped?: boolean | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    animationClass?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    paddedContent?: boolean | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  storyColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    marginBottom?: string | null;
    twoColumns?: boolean | null;
    verticalAlign?: boolean | null;
    heading: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  bannerSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    darkMode?: boolean | null;
    hideDivider?: boolean | null;
    backgroundClass?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder services
     */
    servicesList?:
      | {
          serviceName: string;
          serviceUrl?: string | null;
          description?: string | null;
          isBold?: boolean | null;
          id?: string | null;
        }[]
      | null;
    listColumns?: boolean | null;
    animationClass?: string | null;
  };
  columnMediaSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    mediaPosition?: ('media-left' | 'media-right') | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    heading: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  ctaSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    backgroundClass?: string | null;
    thin?: boolean | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    animationClass?: string | null;
    heading: string;
    headingLink?: string | null;
    headingColor?: string | null;
    ctaButton: {
      text: string;
      url: string;
      className?: string | null;
    };
  };
  storyColumnSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  bannerSection3: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    darkMode?: boolean | null;
    hideDivider?: boolean | null;
    backgroundClass?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder services
     */
    servicesList?:
      | {
          serviceName: string;
          serviceUrl?: string | null;
          description?: string | null;
          isBold?: boolean | null;
          id?: string | null;
        }[]
      | null;
    listColumns?: boolean | null;
    animationClass?: string | null;
  };
  finalStorySection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    marginTop?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'introColumn'
          | 'boxGrid'
          | 'columnMedia1'
          | 'banner1'
          | 'twoColumn'
          | 'halfImage'
          | 'story1'
          | 'banner2'
          | 'columnMedia2'
          | 'cta'
          | 'story2'
          | 'banner3'
          | 'finalStory';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    primaryColor?: string | null;
    secondaryColor?: string | null;
    textColor?: string | null;
    linkColor?: string | null;
    headingColor?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    keywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  advancedSettings?: {
    /**
     * Add custom CSS styles for this page
     */
    customCSS?: string | null;
    /**
     * Add custom classes to the body element
     */
    customClasses?: string | null;
    /**
     * Add custom JavaScript for this page
     */
    scripts?:
      | {
          scriptContent?: string | null;
          position?: ('head' | 'bodyEnd') | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Enable/disable this page component
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lake-nona-page-component".
 */
export interface LakeNonaPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    titleColor?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  introColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  boxGridSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    contentBeforeHeading?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentBeforeText?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          headingColor?: string | null;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  dividerSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    image?: (string | null) | Media;
    imageAlt?: string | null;
  };
  bannerSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder columns
     */
    columns?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  servicesSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder services
     */
    servicesList?:
      | {
          serviceName: string;
          serviceNameBold?: boolean | null;
          serviceUrl?: string | null;
          description?: string | null;
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
    columnsLayout?: boolean | null;
  };
  halfImageSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    flipped?: boolean | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  storySection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  bannerSection2?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder columns
     */
    columns?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  twoColumnSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * Drag to reorder columns
     */
    columns?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          animationClass?: ('fadeInLeft' | 'fadeInRight' | 'fadeInUp' | '') | null;
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  ctaSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    headingLink?: string | null;
    ctaButton: {
      text: string;
      url: string;
      className?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
    };
  };
  dividerSection2?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    image?: (string | null) | Media;
    imageAlt?: string | null;
  };
  bannerSection3?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder services
     */
    servicesList?:
      | {
          serviceName: string;
          serviceNameBold?: boolean | null;
          serviceUrl?: string | null;
          description?: string | null;
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
    columnsLayout?: boolean | null;
  };
  finalColumnMedia: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'introColumn'
          | 'boxGrid'
          | 'divider1'
          | 'banner1'
          | 'services'
          | 'halfImage'
          | 'story'
          | 'banner2'
          | 'twoColumn'
          | 'cta'
          | 'divider2'
          | 'banner3'
          | 'finalColumnMedia';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    primaryColor?: string | null;
    secondaryColor?: string | null;
    textColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    keywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "longwood-page-component".
 */
export interface LongwoodPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    titleColor?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      className?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
    };
  };
  boxGridSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          headingColor?: string | null;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  twoColumnSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * Drag to reorder columns
     */
    columns?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          animationClass?: ('fadeInLeft' | 'fadeInRight' | 'fadeInUp' | '') | null;
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  halfImageSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    flipped?: boolean | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  twoColumnSection2?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    title?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    titleColor?: string | null;
    /**
     * Drag to reorder columns
     */
    columns?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          animationClass?: ('fadeInLeft' | 'fadeInRight' | 'fadeInUp' | '') | null;
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  bannerSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder services
     */
    servicesList?:
      | {
          serviceName: string;
          serviceNameBold?: boolean | null;
          serviceUrl?: string | null;
          description?: string | null;
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
    columnsLayout?: boolean | null;
  };
  plasticSurgerySection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder services
     */
    servicesList?:
      | {
          serviceName: string;
          serviceNameBold?: boolean | null;
          serviceUrl?: string | null;
          description?: string | null;
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
    columnsLayout?: boolean | null;
  };
  finalColumnMedia: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'introColumn'
          | 'boxGrid'
          | 'twoColumn1'
          | 'halfImage'
          | 'twoColumn2'
          | 'banner'
          | 'plasticSurgery'
          | 'finalColumnMedia';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    primaryColor?: string | null;
    secondaryColor?: string | null;
    textColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    keywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mount-dora-page-component".
 */
export interface MountDoraPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    titleColor?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  columnSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    marginBottom?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      className?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
    };
  };
  boxGridSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    className?: string | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          headingColor?: string | null;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          textColor?: string | null;
          animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
          id?: string | null;
        }[]
      | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  columnMediaSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    marginTop?: string | null;
    paddingBottom?: string | null;
    mediaPosition?: ('media-left' | 'media-right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  twoColumnSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    /**
     * Drag to reorder columns
     */
    columns?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          animationClass?: ('fadeInLeft' | 'fadeInRight' | 'fadeInUp' | '') | null;
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  ctaGeneralSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    className?: string | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    animationClass?: ('fadeInRight' | 'fadeInLeft' | 'fadeInUp' | '') | null;
    heading: string;
    headingLink?: string | null;
    headingColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      className?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
    };
  };
  halfImageSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    flipped?: boolean | null;
    animationClass?: ('fadeInLeft' | 'fadeInRight' | 'fadeInUp' | '') | null;
    heading: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  dividerSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
  };
  halfImageSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    flipped?: boolean | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    animationClass?: ('fadeInLeft' | 'fadeInRight' | 'fadeInUp' | '') | null;
    heading: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  columnSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    heading: string;
    headingColor?: string | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder services
     */
    servicesList?:
      | {
          serviceName: string;
          serviceNameBold?: boolean | null;
          serviceUrl?: string | null;
          description?: string | null;
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
    columnsLayout?: boolean | null;
  };
  bannerSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    isDark?: boolean | null;
    hideDivider?: boolean | null;
    animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder services
     */
    servicesList?:
      | {
          serviceName: string;
          serviceNameBold?: boolean | null;
          serviceUrl?: string | null;
          description?: string | null;
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  finalColumnSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    marginTop?: string | null;
    layout?: ('columns-two vertical-align' | 'single' | 'columns-two') | null;
    /**
     * Drag to reorder columns
     */
    columns?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'columnSection1'
          | 'boxGrid'
          | 'columnMedia'
          | 'twoColumn'
          | 'ctaGeneral'
          | 'halfImage1'
          | 'divider'
          | 'halfImage2'
          | 'columnSection2'
          | 'banner'
          | 'finalColumn';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    primaryColor?: string | null;
    secondaryColor?: string | null;
    textColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
    headingColor?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    keywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "new-smyrna-page-component".
 */
export interface NewSmyrnaPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    className?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    titleColor?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  columnSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    marginBottom?: string | null;
    logo?: (string | null) | Media;
    logoWidth?: number | null;
    logoHeight?: number | null;
    logoAlt?: string | null;
    heading: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    maxWidth?: string | null;
    textAlign?: ('text-center' | 'text-left' | 'text-right') | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      className?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
    };
  };
  bannerSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    isDark?: boolean | null;
    hideDivider?: boolean | null;
    animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  columnMediaSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    mediaPosition?: ('media-left' | 'media-right') | null;
    heading: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  ctaGeneralSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    className?: string | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    animationClass?: ('fadeInRight' | 'fadeInLeft' | 'fadeInUp' | '') | null;
    heading: string;
    headingLink?: string | null;
    headingColor?: string | null;
    ctaButton?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      className?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
    };
  };
  halfImageSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    flipped?: boolean | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    animationClass?: ('fadeInLeft' | 'fadeInRight' | 'fadeInUp' | '') | null;
    heading: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  columnSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    marginTop?: string | null;
    marginBottom?: string | null;
    heading: string;
    headingColor?: string | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder services
     */
    servicesList?:
      | {
          serviceName: string;
          serviceNameBold?: boolean | null;
          serviceUrl?: string | null;
          description?: string | null;
          textColor?: string | null;
          id?: string | null;
        }[]
      | null;
    columnsLayout?: boolean | null;
  };
  boxGridSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    className?: string | null;
    contentBefore: {
      heading: string;
      headingColor?: string | null;
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      textColor?: string | null;
    };
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          headingColor?: string | null;
          headingTag?: ('h2' | 'h3' | 'h4') | null;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          textColor?: string | null;
          animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
          ctaButton?: {
            show?: boolean | null;
            text?: string | null;
            url?: string | null;
            className?: string | null;
            backgroundColor?: string | null;
            textColor?: string | null;
          };
          id?: string | null;
        }[]
      | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  columnSection3: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    marginTop?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'columnSection1'
          | 'bannerSection1'
          | 'columnMedia'
          | 'ctaGeneral'
          | 'halfImage'
          | 'columnSection2'
          | 'boxGrid'
          | 'columnSection3';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    primaryColor?: string | null;
    secondaryColor?: string | null;
    textColor?: string | null;
    linkColor?: string | null;
    linkHoverColor?: string | null;
    headingColor?: string | null;
    backgroundColor?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    keywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ocala-location-page-component".
 */
export interface OcalaLocationPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    titleColor?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  introColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    ctaButton?: {
      text?: string | null;
      url?: string | null;
      className?: string | null;
    };
  };
  bannerSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  halfImageSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    flipped?: boolean | null;
    heading: string;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  ctaSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    heading: string;
    headingLink?: string | null;
    ctaButton: {
      text: string;
      url: string;
      className?: string | null;
    };
  };
  columnMediaSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: string;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  halfImageSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    flipped?: boolean | null;
    heading: string;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  dividerSection?: {
    show?: boolean | null;
    image?: (string | null) | Media;
    imageAlt?: string | null;
  };
  halfImageSection3: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    flipped?: boolean | null;
    heading: string;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  columnMediaSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: string;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  bannerSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading: string;
    headingAlignment?: ('text-left' | 'text-center' | 'text-right') | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder services
     */
    servicesList?:
      | {
          serviceName: string;
          serviceUrl?: string | null;
          description?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  boxGridSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    contentBeforeHeading?: string | null;
    contentBeforeText?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          ctaButton?: {
            text?: string | null;
            url?: string | null;
            className?: string | null;
          };
          animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
          id?: string | null;
        }[]
      | null;
  };
  bannerSection3?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'introColumn'
          | 'banner1'
          | 'halfImage1'
          | 'cta1'
          | 'columnMedia1'
          | 'halfImage2'
          | 'divider'
          | 'halfImage3'
          | 'columnMedia2'
          | 'banner2'
          | 'boxGrid'
          | 'banner3';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    primaryColor?: string | null;
    secondaryColor?: string | null;
    textColor?: string | null;
    linkColor?: string | null;
    backgroundColor?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    keywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orlando-location-page-component".
 */
export interface OrlandoLocationPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    titleColor?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    ctaButton?: {
      text?: string | null;
      url?: string | null;
      className?: string | null;
    };
  };
  boxGridSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          headingColor?: string | null;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
          id?: string | null;
        }[]
      | null;
  };
  columnMediaSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  ctaSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    heading: string;
    headingLink?: string | null;
    ctaButton: {
      text: string;
      url: string;
      className?: string | null;
    };
  };
  simpleColumnSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  bannerSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    columns?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
  };
  servicesSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    heading: string;
    headingColor?: string | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder services
     */
    servicesList?:
      | {
          serviceName: string;
          serviceUrl?: string | null;
          description?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  halfImageSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    flipped?: boolean | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  storySection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  boxGridSection2?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          headingColor?: string | null;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
          id?: string | null;
        }[]
      | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  plasticSurgerySection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    heading: string;
    headingColor?: string | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder services
     */
    servicesList?:
      | {
          serviceName: string;
          serviceUrl?: string | null;
          description?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  finalColumnMedia: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'introColumn'
          | 'boxGrid1'
          | 'columnMedia1'
          | 'cta1'
          | 'simpleColumn1'
          | 'banner1'
          | 'services'
          | 'halfImage'
          | 'story'
          | 'boxGrid2'
          | 'plasticSurgery'
          | 'finalColumnMedia';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    primaryColor?: string | null;
    secondaryColor?: string | null;
    textColor?: string | null;
    linkColor?: string | null;
    backgroundColor?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    keywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "port-orange-location-page-component".
 */
export interface PortOrangeLocationPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    cssClasses?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    titleSmall?: string | null;
    titleColor?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    logoWidth?: number | null;
    logoHeight?: number | null;
    heading: string;
    headingSpan?: string | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    maxWidth?: string | null;
    textAlign?: ('text-left' | 'text-center' | 'text-right') | null;
    ctaButton?: {
      text?: string | null;
      url?: string | null;
      className?: string | null;
    };
  };
  bannerSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading?: string | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  halfImageSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    flipped?: boolean | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          text: string;
          id?: string | null;
        }[]
      | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  ctaSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    heading: string;
    headingLink?: string | null;
    ctaButton: {
      text: string;
      url: string;
      className?: string | null;
    };
  };
  columnMediaSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    mediaPosition?: ('media-left' | 'media-right') | null;
    heading: string;
    headingSmall?: string | null;
    headingSpan?: string | null;
    headingBlockDesktop?: string | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  columnMediaSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    mediaPosition?: ('media-left' | 'media-right') | null;
    heading: string;
    headingBlockDesktop?: string | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  bannerSection2?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading?: string | null;
    headingColor?: string | null;
    headingAlign?: ('text-left' | 'text-center' | 'text-right') | null;
    intro?: string | null;
    introAlign?: ('text-left' | 'text-center' | 'text-right') | null;
    /**
     * Drag to reorder services
     */
    services?:
      | {
          name: string;
          url?: string | null;
          description: string;
          id?: string | null;
        }[]
      | null;
    columnsLayout?: boolean | null;
  };
  boxGridSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    heading?: string | null;
    headingColor?: string | null;
    intro?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          headingColor?: string | null;
          content?: string | null;
          ctaText?: string | null;
          ctaUrl?: string | null;
          ctaClassName?: string | null;
          animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
          id?: string | null;
        }[]
      | null;
  };
  bannerSection3?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading?: string | null;
    headingSpan?: string | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'introColumn'
          | 'banner1'
          | 'halfImage1'
          | 'cta1'
          | 'columnMedia1'
          | 'columnMedia2'
          | 'banner2'
          | 'boxGrid'
          | 'banner3';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    primaryColor?: string | null;
    secondaryColor?: string | null;
    textColor?: string | null;
    linkColor?: string | null;
    backgroundColor?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    keywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sarasota-location-page-component".
 */
export interface SarasotaLocationPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    cssClasses?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    titleColor?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    logoWidth?: number | null;
    logoHeight?: number | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    maxWidth?: string | null;
    textAlign?: ('text-left' | 'text-center' | 'text-right') | null;
    ctaButton?: {
      text?: string | null;
      url?: string | null;
      className?: string | null;
    };
  };
  boxGridSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    heading?: string | null;
    headingSpan?: string | null;
    headingColor?: string | null;
    intro?: string | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          headingColor?: string | null;
          content?: string | null;
          animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
          id?: string | null;
        }[]
      | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  dividerSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    cssClasses?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    logoWidth?: number | null;
    logoHeight?: number | null;
  };
  bannerSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    layoutType?: ('single' | 'columns-two') | null;
    verticalAlign?: boolean | null;
    columns?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
  };
  servicesColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    heading: string;
    headingColor?: string | null;
    headingAlign?: ('text-left' | 'text-center' | 'text-right') | null;
    intro?: string | null;
    introAlign?: ('text-left' | 'text-center' | 'text-right') | null;
    /**
     * Drag to reorder services
     */
    services?:
      | {
          name: string;
          description: string;
          id?: string | null;
        }[]
      | null;
    columnsLayout?: boolean | null;
  };
  halfImageSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    flipped?: boolean | null;
    padded?: boolean | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  simpleColumnSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  bannerSection2?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    layoutType?: ('single' | 'columns-two') | null;
    verticalAlign?: boolean | null;
    columns?:
      | {
          content: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
  };
  twoColumnSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    verticalAlign?: boolean | null;
    leftColumn?: {
      heading?: string | null;
      headingSmall?: string | null;
      headingColor?: string | null;
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
    };
    rightColumn?: {
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
    };
  };
  ctaSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    heading: string;
    headingLink?: string | null;
    ctaButton: {
      text: string;
      url: string;
      className?: string | null;
    };
  };
  plasticSurgerySection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    heading: string;
    headingColor?: string | null;
    headingAlign?: ('text-left' | 'text-center' | 'text-right') | null;
    intro?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder procedures
     */
    procedures?:
      | {
          name: string;
          description: string;
          id?: string | null;
        }[]
      | null;
    columnsLayout?: boolean | null;
  };
  bannerSection3?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading?: string | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder procedures
     */
    procedures?:
      | {
          name: string;
          url?: string | null;
          description: string;
          id?: string | null;
        }[]
      | null;
    columnsLayout?: boolean | null;
  };
  finalColumnMedia: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    mediaPosition?: ('media-left' | 'media-right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'introColumn'
          | 'boxGrid1'
          | 'divider'
          | 'banner1'
          | 'servicesColumn'
          | 'halfImage1'
          | 'simpleColumn1'
          | 'banner2'
          | 'twoColumn'
          | 'cta1'
          | 'plasticSurgery'
          | 'banner3'
          | 'finalColumnMedia';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    primaryColor?: string | null;
    secondaryColor?: string | null;
    textColor?: string | null;
    linkColor?: string | null;
    backgroundColor?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    keywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "st-petersburg-location-page-component".
 */
export interface StPetersburgLocationPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    cssClasses?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    titleCssClass?: string | null;
    titleColor?: string | null;
    showDescription?: boolean | null;
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    descriptionColor?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  introSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    logoWidth?: number | null;
    logoHeight?: number | null;
    heading: string;
    headingSpan?: string | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  halfImageSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    flipped?: boolean | null;
    copyPadding?: ('' | 'padded' | 'padded2') | null;
    heading: string;
    headingSmall?: string | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  servicesColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    heading: string;
    headingColor?: string | null;
    headingAlign?: ('text-left' | 'text-center' | 'text-right') | null;
    intro?: string | null;
    introAlign?: ('text-left' | 'text-center' | 'text-right') | null;
    /**
     * Drag to reorder services
     */
    services?:
      | {
          name: string;
          description: string;
          id?: string | null;
        }[]
      | null;
    columnsLayout?: boolean | null;
  };
  bannerSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading?: string | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  dividerSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    cssClasses?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    logoWidth?: number | null;
    logoHeight?: number | null;
  };
  bannerSection2?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    heading?: string | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder procedures
     */
    procedures?:
      | {
          name: string;
          url?: string | null;
          description: string;
          id?: string | null;
        }[]
      | null;
    columnsLayout?: boolean | null;
  };
  finalColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section: 'hero' | 'intro' | 'halfImage1' | 'servicesColumn' | 'banner1' | 'divider' | 'banner2' | 'finalColumn';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    primaryColor?: string | null;
    secondaryColor?: string | null;
    textColor?: string | null;
    linkColor?: string | null;
    backgroundColor?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    keywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tampa-location-page-component".
 */
export interface TampaLocationPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    cssClasses?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    titleColor?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    ctaButton?: {
      text?: string | null;
      url?: string | null;
      className?: string | null;
    };
  };
  boxGridSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    heading?: string | null;
    headingColor?: string | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          headingColor?: string | null;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
          id?: string | null;
        }[]
      | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  dividerSection?: {
    show?: boolean | null;
    cssClasses?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
  };
  simpleColumnSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  bannerSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
    heading?: string | null;
    headingColor?: string | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder services
     */
    servicesList?:
      | {
          serviceName: string;
          serviceUrl?: string | null;
          description?: string | null;
          id?: string | null;
        }[]
      | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  columnMediaSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  boxGridSection2?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    heading?: string | null;
    headingColor?: string | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          headingColor?: string | null;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          ctaButton?: {
            text?: string | null;
            url?: string | null;
            className?: string | null;
          };
          animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
          id?: string | null;
        }[]
      | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  finalColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'introColumn'
          | 'boxGrid1'
          | 'divider'
          | 'simpleColumn1'
          | 'banner1'
          | 'columnMedia1'
          | 'boxGrid2'
          | 'finalColumn';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    primaryColor?: string | null;
    secondaryColor?: string | null;
    textColor?: string | null;
    linkColor?: string | null;
    backgroundColor?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    keywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "villages-location-page-component".
 */
export interface VillagesLocationPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    cssClasses?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    titleSmall?: string | null;
    titleColor?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  introColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    logo?: (string | null) | Media;
    logoAlt?: string | null;
    logoWidth?: number | null;
    logoHeight?: number | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    ctaButton?: {
      text?: string | null;
      url?: string | null;
      className?: string | null;
    };
  };
  boxGridSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          headingColor?: string | null;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
          id?: string | null;
        }[]
      | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  halfImageSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    flipped?: boolean | null;
    copyPadding?: ('' | 'padded' | 'padded2') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
    };
  };
  ctaSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    heading: string;
    headingLink?: string | null;
    headingColor?: string | null;
    ctaButton: {
      text: string;
      url: string;
      className?: string | null;
    };
  };
  columnMediaSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    mediaPosition?: ('left' | 'right') | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
    };
  };
  bannerSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
    heading?: string | null;
    headingColor?: string | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder services
     */
    servicesList?:
      | {
          serviceName: string;
          serviceUrl?: string | null;
          description?: string | null;
          id?: string | null;
        }[]
      | null;
    columnsLayout?: boolean | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  boxGridSection2?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    heading?: string | null;
    headingColor?: string | null;
    introContent?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          headingColor?: string | null;
          content?: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          ctaButton?: {
            text?: string | null;
            url?: string | null;
            className?: string | null;
          };
          animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
          id?: string | null;
        }[]
      | null;
  };
  bannerSection2?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
    heading?: string | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'introColumn'
          | 'boxGrid1'
          | 'halfImage1'
          | 'cta'
          | 'columnMedia'
          | 'banner1'
          | 'boxGrid2'
          | 'banner2';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    primaryColor?: string | null;
    secondaryColor?: string | null;
    textColor?: string | null;
    linkColor?: string | null;
    backgroundColor?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    keywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wesley-chapel-location-page-component".
 */
export interface WesleyChapelLocationPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    cssClasses?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
      url?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    titleColor?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
      url?: string | null;
    };
  };
  introColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    logo?: (string | null) | Media;
    logoUrl?: string | null;
    logoAlt?: string | null;
    logoWidth?: number | null;
    logoHeight?: number | null;
    heading: string;
    headingSpan?: string | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentText?: string | null;
    maxWidth?: string | null;
    textAlign?: ('text-left' | 'text-center' | 'text-right') | null;
  };
  halfImageSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    flipped?: boolean | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentText?: string | null;
    image: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt: string;
      url?: string | null;
    };
  };
  boxGridSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    heading?: string | null;
    headingSmall?: string | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentText?: string | null;
  };
  columnSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    heading: string;
    headingSmall?: string | null;
    headingColor?: string | null;
    headingAlign?: ('text-left' | 'text-center' | 'text-right') | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentText?: string | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          title: string;
          description: string;
          id?: string | null;
        }[]
      | null;
    useColumns?: boolean | null;
  };
  columnMediaSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    mediaPosition?: ('media-left' | 'media-right') | null;
    heading: string;
    headingSmall?: string | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentText?: string | null;
    mediaImage: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      alt: string;
      url?: string | null;
    };
  };
  bannerSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
      url?: string | null;
    };
    heading?: string | null;
    headingColor?: string | null;
    headingAlign?: ('text-left' | 'text-center' | 'text-right') | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentText?: string | null;
  };
  twoColumnSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    verticalAlign?: boolean | null;
    leftColumn?: {
      animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
      heading?: string | null;
      headingColor?: string | null;
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
    };
    rightColumn?: {
      animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      contentText?: string | null;
    };
  };
  columnSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    heading: string;
    headingColor?: string | null;
    headingAlign?: ('text-left' | 'text-center' | 'text-right') | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentText?: string | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          title: string;
          description: string;
          id?: string | null;
        }[]
      | null;
    useColumns?: boolean | null;
  };
  boxGridSection2?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    heading?: string | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentText?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
      url?: string | null;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'introColumn'
          | 'halfImage1'
          | 'boxGrid1'
          | 'column1'
          | 'columnMedia1'
          | 'banner1'
          | 'twoColumn1'
          | 'column2'
          | 'boxGrid2';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    primaryColor?: string | null;
    secondaryColor?: string | null;
    textColor?: string | null;
    linkColor?: string | null;
    backgroundColor?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    keywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "winter-garden-location-page-component".
 */
export interface WinterGardenLocationPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    cssClasses?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
      url?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    titleColor?: string | null;
    mediaImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
      url?: string | null;
    };
  };
  introColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    logo?: (string | null) | Media;
    logoUrl?: string | null;
    logoAlt?: string | null;
    logoWidth?: number | null;
    logoHeight?: number | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentText?: string | null;
    maxWidth?: string | null;
    textAlign?: ('text-left' | 'text-center' | 'text-right') | null;
  };
  halfImageSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    flipped?: boolean | null;
    heading: string;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentText?: string | null;
    image?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
      url?: string | null;
    };
  };
  columnSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    heading: string;
    headingColor?: string | null;
    headingAlign?: ('text-left' | 'text-center' | 'text-right') | null;
    introText?: string | null;
    introAlign?: ('text-left' | 'text-center' | 'text-right') | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          title: string;
          description: string;
          id?: string | null;
        }[]
      | null;
    useColumns?: boolean | null;
  };
  dividerSection?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    cssClasses?: string | null;
    logo?: (string | null) | Media;
    logoUrl?: string | null;
    logoAlt?: string | null;
    logoWidth?: number | null;
    logoHeight?: number | null;
  };
  threeColumnSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    leftColumn?: {
      animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
      heading?: string | null;
      headingSpan?: string | null;
      headingColor?: string | null;
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      contentText?: string | null;
    };
    centerColumn?: {
      animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
      heading?: string | null;
      headingColor?: string | null;
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      contentText?: string | null;
    };
    rightColumn?: {
      animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
      heading?: string | null;
      headingColor?: string | null;
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      contentText?: string | null;
    };
  };
  twoColumnSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    verticalAlign?: boolean | null;
    leftColumn?: {
      animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
      heading?: string | null;
      headingColor?: string | null;
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      contentText?: string | null;
    };
    rightColumn?: {
      animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      image?: {
        upload?: (string | null) | Media;
        url?: string | null;
        alt?: string | null;
        width?: number | null;
        height?: number | null;
      };
    };
  };
  twoColumnSection2?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    verticalAlign?: boolean | null;
    leftColumn?: {
      animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      image?: {
        upload?: (string | null) | Media;
        url?: string | null;
        alt?: string | null;
        width?: number | null;
        height?: number | null;
      };
    };
    rightColumn?: {
      animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
      heading?: string | null;
      headingColor?: string | null;
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      contentText?: string | null;
    };
  };
  bannerSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
      url?: string | null;
    };
    useTwoColumns?: boolean | null;
    verticalAlign?: boolean | null;
    leftContent?: {
      heading?: string | null;
      headingSpan?: string | null;
      headingColor?: string | null;
    };
    rightContent?: {
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      contentText?: string | null;
    };
  };
  twoColumnSection3?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    verticalAlign?: boolean | null;
    leftColumn?: {
      animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
      heading?: string | null;
      headingSmall?: string | null;
      headingColor?: string | null;
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      contentText?: string | null;
      useSmallText?: boolean | null;
    };
    rightColumn?: {
      animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
      content?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      image?: {
        upload?: (string | null) | Media;
        url?: string | null;
        alt?: string | null;
        width?: number | null;
        height?: number | null;
      };
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'introColumn'
          | 'halfImage1'
          | 'column1'
          | 'divider'
          | 'threeColumn1'
          | 'twoColumn1'
          | 'twoColumn2'
          | 'banner1'
          | 'twoColumn3';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    primaryColor?: string | null;
    secondaryColor?: string | null;
    textColor?: string | null;
    linkColor?: string | null;
    backgroundColor?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    keywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "winter-park-location-page-component".
 */
export interface WinterParkLocationPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    cssClasses?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
      url?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    titleSmall?: string | null;
    titleColor?: string | null;
    mediaImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
      url?: string | null;
    };
  };
  introColumnSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    logo?: (string | null) | Media;
    logoUrl?: string | null;
    logoAlt?: string | null;
    logoWidth?: number | null;
    logoHeight?: number | null;
    heading: string;
    headingSpan?: string | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentText?: string | null;
    button?: {
      show?: boolean | null;
      text?: string | null;
      url?: string | null;
      cssClass?: string | null;
    };
    maxWidth?: string | null;
    textAlign?: ('text-left' | 'text-center' | 'text-right') | null;
  };
  halfImageSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    flipped?: boolean | null;
    heading: string;
    headingSmall?: string | null;
    headingSpan?: string | null;
    subheading?: string | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentText?: string | null;
    /**
     * Drag to reorder bullet points
     */
    bulletPoints?:
      | {
          text: string;
          id?: string | null;
        }[]
      | null;
    textAlign?: ('text-left' | 'text-center' | 'text-right') | null;
    image?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
      url?: string | null;
    };
  };
  bannerSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
      url?: string | null;
    };
    heading?: string | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentText?: string | null;
    maxWidth?: string | null;
  };
  columnSection1: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    mediaPosition?: ('media-left' | 'media-right') | null;
    heading: string;
    headingSmall?: string | null;
    headingMain?: string | null;
    headingSpan?: string | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentText?: string | null;
    image?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
      url?: string | null;
      width?: number | null;
      height?: number | null;
    };
  };
  boxGridSection1?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
      url?: string | null;
    };
    heading?: string | null;
    headingColor?: string | null;
    introText?: string | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          content: string;
          button?: {
            show?: boolean | null;
            text?: string | null;
            url?: string | null;
            cssClass?: string | null;
          };
          animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
          id?: string | null;
        }[]
      | null;
  };
  boxGridSection2?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          content: string;
          button?: {
            show?: boolean | null;
            text?: string | null;
            url?: string | null;
            cssClass?: string | null;
          };
          animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
          id?: string | null;
        }[]
      | null;
  };
  bannerSection2?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
      url?: string | null;
    };
    heading?: string | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Drag to reorder paragraphs
     */
    contentParagraphs?:
      | {
          text: string;
          id?: string | null;
        }[]
      | null;
  };
  columnSection2: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    mediaPosition?: ('media-left' | 'media-right') | null;
    heading: string;
    headingSpan?: string | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentText?: string | null;
    image?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
      url?: string | null;
      width?: number | null;
      height?: number | null;
    };
  };
  boxGridSection3?: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
      url?: string | null;
    };
    heading?: string | null;
    headingColor?: string | null;
    introText?: string | null;
    /**
     * Drag to reorder boxes
     */
    boxes?:
      | {
          heading: string;
          content?: string | null;
          button?: {
            show?: boolean | null;
            text?: string | null;
            url?: string | null;
            cssClass?: string | null;
          };
          animationClass?: ('fadeInUp' | 'fadeInLeft' | 'fadeInRight' | '') | null;
          id?: string | null;
        }[]
      | null;
  };
  columnSection3: {
    show?: boolean | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    cssClasses?: string | null;
    rowCssClasses?: string | null;
    mediaPosition?: ('media-left' | 'media-right') | null;
    heading: string;
    headingSmall?: string | null;
    headingSpan?: string | null;
    headingColor?: string | null;
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    contentText?: string | null;
    image?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
      url?: string | null;
      width?: number | null;
      height?: number | null;
    };
  };
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section:
          | 'hero'
          | 'introColumn'
          | 'halfImage1'
          | 'banner1'
          | 'column1'
          | 'boxGrid1'
          | 'boxGrid2'
          | 'banner2'
          | 'column2'
          | 'boxGrid3'
          | 'column3';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    primaryColor?: string | null;
    secondaryColor?: string | null;
    textColor?: string | null;
    linkColor?: string | null;
    backgroundColor?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    keywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "satellite-locations-page-component".
 */
export interface SatelliteLocationsPageComponent {
  id: string;
  componentName: string;
  heroSection: {
    show?: boolean | null;
    backgroundColor?: string | null;
    cssClasses?: string | null;
    backgroundImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
      url?: string | null;
    };
    /**
     * Drag to reorder breadcrumb items
     */
    breadcrumbs?:
      | {
          label: string;
          url: string;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
    title: string;
    titleColor?: string | null;
    subtitle?: string | null;
    subtitleColor?: string | null;
    mediaImage?: {
      mobile?: (string | null) | Media;
      tablet?: (string | null) | Media;
      desktop?: (string | null) | Media;
      large?: (string | null) | Media;
      alt?: string | null;
      url?: string | null;
    };
  };
  /**
   * Manage all location sections. Each section contains two location columns.
   */
  locationSections?:
    | {
        sectionName: string;
        show?: boolean | null;
        backgroundColor?: string | null;
        textColor?: string | null;
        cssClasses?: string | null;
        rowCssClasses?: string | null;
        paddingBottom?: ('pb-0' | '' | 'pb-20' | 'pb-40') | null;
        /**
         * Add up to 2 locations per section for side-by-side display
         */
        locations?:
          | {
              locationName: string;
              animationClass?: ('fadeInLeft' | 'fadeInRight' | 'fadeInUp' | '') | null;
              mapSettings: {
                /**
                 * Full iframe src URL from Google Maps embed code
                 */
                embedUrl: string;
                width?: string | null;
                height?: number | null;
                grayscale?: boolean | null;
              };
              contactInfo: {
                headingPaddingTop?: string | null;
                phone: string;
                /**
                 * Leave empty to use same as phone number
                 */
                phoneDisplay?: string | null;
                address: string;
                /**
                 * Full Google Maps URL for the address link
                 */
                googleMapsUrl: string;
                /**
                 * Optional - leave empty if not applicable
                 */
                email?: string | null;
                /**
                 * Optional additional contact details or notes
                 */
                additionalInfo?: string | null;
              };
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Drag to reorder sections on the page
   */
  sectionOrder?:
    | {
        section: 'hero' | 'locationSection1' | 'locationSection2' | 'locationSection3' | 'locationSection4';
        id?: string | null;
      }[]
    | null;
  globalStyles?: {
    primaryColor?: string | null;
    secondaryColor?: string | null;
    textColor?: string | null;
    linkColor?: string | null;
    backgroundColor?: string | null;
    headingColor?: string | null;
  };
  seoSettings?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    keywords?: string | null;
    ogImage?: (string | null) | Media;
  };
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contact-component".
 */
export interface ContactComponent {
  id: string;
  title: string;
  contactSection?: {
    /**
     * CSS color value (hex, rgb, etc.)
     */
    backgroundColor?: string | null;
    infoSection?: {
      heading?: string | null;
      headingColor?: string | null;
      phoneNumber?: string | null;
      phoneColor?: string | null;
      specialsButton?: {
        text?: string | null;
        url?: string | null;
        backgroundColor?: string | null;
        textColor?: string | null;
      };
    };
    formSection?: {
      backgroundColor?: string | null;
      subject?: string | null;
      redirectUrl?: string | null;
      /**
       * Drag to reorder form fields
       */
      fields?:
        | {
            fieldType: 'text' | 'email' | 'tel' | 'textarea' | 'select' | 'checkbox' | 'hidden';
            name: string;
            label?: string | null;
            placeholder?: string | null;
            required?: boolean | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            defaultValue?: string | null;
            rows?: number | null;
            cols?: number | null;
            id?: string | null;
          }[]
        | null;
      submitButton?: {
        text?: string | null;
        backgroundColor?: string | null;
        textColor?: string | null;
      };
      privacyText?: string | null;
      privacyLinks?:
        | {
            text: string;
            url: string;
            id?: string | null;
          }[]
        | null;
    };
    backgroundImages?: {
      desktopImage?: (string | null) | Media;
      mobileImage?: (string | null) | Media;
    };
  };
  locationsBanner?: {
    backgroundColor?: string | null;
    heading?: {
      smallText?: string | null;
      mainText?: string | null;
      color?: string | null;
    };
    /**
     * Drag to reorder locations
     */
    locations?:
      | {
          name: string;
          address: string;
          phone: string;
          slug: string;
          mapPosition?: {
            left?: string | null;
            top?: string | null;
          };
          id?: string | null;
        }[]
      | null;
    mapImage?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * Contact form submissions from the website
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: string;
  formType?: string | null;
  first_name: string;
  last_name: string;
  email: string;
  phone: string;
  location_id?: string | null;
  location_name?: string | null;
  what_service_are_you_interested_in?:
    | (
        | 'Liposuction'
        | 'BOTOX'
        | 'Plastic Surgery'
        | 'Micro-channeling'
        | 'Med Spa'
        | 'Skin Care'
        | 'Dermal Fillers'
        | 'Face Lift'
        | 'Weight Loss Injections'
        | 'I Have a Question'
      )
    | null;
  commentsquestions?: string | null;
  optin_for_sms_texting?: boolean | null;
  by_completing_this_form_you_are_giving_us_permission_to_followup_by_phone_email_or_text?: boolean | null;
  status?: ('new' | 'contacted' | 'in_progress' | 'completed' | 'archived') | null;
  /**
   * Add any notes about this submission
   */
  notes?: string | null;
  ipAddress?: string | null;
  userAgent?: string | null;
  referrer?: string | null;
  submittedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "training-form-submissions".
 */
export interface TrainingFormSubmission {
  id: string;
  formType?: string | null;
  /**
   * First name of the applicant
   */
  first_name: string;
  /**
   * Last name of the applicant
   */
  last_name: string;
  /**
   * Email address
   */
  email: string;
  /**
   * Phone number
   */
  phone: string;
  /**
   * Preferred month for training
   */
  preferred_training_month?: string | null;
  /**
   * Selected training program
   */
  preferred_training_program: 'Foundational' | 'Comprehensive';
  /**
   * Additional questions or comments from applicant
   */
  questions_or_comments?: string | null;
  /**
   * SMS opt-in status
   */
  optin_for_sms_texting?: boolean | null;
  /**
   * Follow-up permission granted
   */
  by_completing_this_form_you_are_giving_us_permission_to_followup_by_phone_email_or_text?: boolean | null;
  /**
   * IP address of the submission
   */
  ipAddress?: string | null;
  /**
   * Browser user agent
   */
  userAgent?: string | null;
  /**
   * Referrer URL
   */
  referrer?: string | null;
  /**
   * Date and time of submission
   */
  submittedAt?: string | null;
  /**
   * Current status of the application
   */
  status?: ('new' | 'contacted' | 'scheduled' | 'enrolled' | 'declined' | 'spam') | null;
  /**
   * Internal notes about this application
   */
  notes?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "training-application".
 */
export interface TrainingApplication {
  id: string;
  title: string;
  /**
   * Toggle to enable/disable this section
   */
  isActive?: boolean | null;
  introModule: {
    /**
     * Logo for the intro section
     */
    logo?: (string | null) | Media;
    heading: string;
    description?: string | null;
  };
  formSection?: {
    formTitle?: string | null;
    backgroundColor?: string | null;
    formId?: string | null;
    redirectUrl?: string | null;
    subjectLine?: string | null;
    formFields?:
      | {
          fieldType: 'text' | 'email' | 'tel' | 'select' | 'textarea' | 'checkbox' | 'hidden';
          name: string;
          label: string;
          placeholder?: string | null;
          required?: boolean | null;
          order: number;
          options?:
            | {
                label: string;
                value: string;
                id?: string | null;
              }[]
            | null;
          rows?: number | null;
          cols?: number | null;
          defaultValue?: string | null;
          id?: string | null;
        }[]
      | null;
    trainingProgramOptions?:
      | {
          label: string;
          value: string;
          order: number;
          id?: string | null;
        }[]
      | null;
    privacySection?: {
      privacyText?: string | null;
      privacyLinks?:
        | {
            text: string;
            url: string;
            order: number;
            id?: string | null;
          }[]
        | null;
    };
    submitButton?: {
      text?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
    };
    /**
     * Background image for the form section
     */
    backgroundImage?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "special-contact-form-submissions".
 */
export interface SpecialContactFormSubmission {
  id: string;
  /**
   * First name of the person submitting the form
   */
  firstName: string;
  /**
   * Last name of the person submitting the form
   */
  lastName: string;
  /**
   * Phone number
   */
  phone: string;
  /**
   * Email address
   */
  email: string;
  /**
   * Selected location
   */
  location: string;
  /**
   * Location name (if different from location ID)
   */
  locationName?: string | null;
  /**
   * Service they are interested in
   */
  service: string;
  /**
   * Comments or questions from the user
   */
  comments?: string | null;
  /**
   * Whether user opted in for SMS texting
   */
  optInSMS?: boolean | null;
  /**
   * User gave permission for follow-up
   */
  consentFollowUp: boolean;
  /**
   * Status of this submission
   */
  status?: ('new' | 'in-progress' | 'contacted' | 'converted' | 'closed' | 'spam') | null;
  /**
   * Assign this submission to a team member
   */
  assignedTo?: (string | null) | User;
  /**
   * Internal notes about this submission
   */
  notes?: string | null;
  /**
   * IP address of the submitter
   */
  ipAddress?: string | null;
  /**
   * Browser user agent
   */
  userAgent?: string | null;
  /**
   * Page referrer URL
   */
  referrer?: string | null;
  /**
   * Source of the submission
   */
  source?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'about-hero-component';
        value: string | AboutHeroComponent;
      } | null)
    | ({
        relationTo: 'our-founders-component';
        value: string | OurFoundersComponent;
      } | null)
    | ({
        relationTo: 'testimonials-component';
        value: string | TestimonialsComponent;
      } | null)
    | ({
        relationTo: 'video-gallery-component';
        value: string | VideoGalleryComponent;
      } | null)
    | ({
        relationTo: 'confidentiality-statement-component';
        value: string | ConfidentialityStatementComponent;
      } | null)
    | ({
        relationTo: 'gallery-component';
        value: string | GalleryComponent;
      } | null)
    | ({
        relationTo: 'non-surgical-gallery-component';
        value: string | NonSurgicalGalleryComponent;
      } | null)
    | ({
        relationTo: 'ChinFillersPage';
        value: string | ChinFillersPage;
      } | null)
    | ({
        relationTo: 'botox-page';
        value: string | BotoxPage;
      } | null)
    | ({
        relationTo: 'juvedermGallery';
        value: string | JuvedermGallery;
      } | null)
    | ({
        relationTo: 'KybellaGallery';
        value: string | KybellaGallery;
      } | null)
    | ({
        relationTo: 'MicroChannelingGallery';
        value: string | MicroChannelingGallery;
      } | null)
    | ({
        relationTo: 'RestylaneGallery';
        value: string | RestylaneGallery;
      } | null)
    | ({
        relationTo: 'SkinMedicaGallery';
        value: string | SkinMedicaGallery;
      } | null)
    | ({
        relationTo: 'DermanGalleryHero';
        value: string | DermanGalleryHero;
      } | null)
    | ({
        relationTo: 'CheekContourGallery';
        value: string | CheekContourGallery;
      } | null)
    | ({
        relationTo: 'LiquidChinJawGallery';
        value: string | LiquidChinJawGallery;
      } | null)
    | ({
        relationTo: 'LiquidRhinoplastyGallery';
        value: string | LiquidRhinoplastyGallery;
      } | null)
    | ({
        relationTo: 'MarionetteLineGallery';
        value: string | MarionetteLineGallery;
      } | null)
    | ({
        relationTo: 'LiquidFaceliftGallery';
        value: string | LiquidFaceliftGallery;
      } | null)
    | ({
        relationTo: 'WeightLossGallery';
        value: string | WeightLossGallery;
      } | null)
    | ({
        relationTo: 'LashExtensionsGallery';
        value: string | LashExtensionsGallery;
      } | null)
    | ({
        relationTo: 'surgical-gallery-component';
        value: string | SurgicalGalleryComponent;
      } | null)
    | ({
        relationTo: 'tummyTuckPage';
        value: string | TummyTuckPage;
      } | null)
    | ({
        relationTo: 'MommyMakeoverGallery';
        value: string | MommyMakeoverGallery;
      } | null)
    | ({
        relationTo: 'LiposuctionGallery';
        value: string | LiposuctionGallery;
      } | null)
    | ({
        relationTo: 'BreastAugmentationGallery';
        value: string | BreastAugmentationGallery;
      } | null)
    | ({
        relationTo: 'BreastLiftGallery';
        value: string | BreastLiftGallery;
      } | null)
    | ({
        relationTo: 'medical-spa-component';
        value: string | MedicalSpaComponent;
      } | null)
    | ({
        relationTo: 'medical-spa-injectables-component';
        value: string | MedicalSpaInjectablesComponent;
      } | null)
    | ({
        relationTo: 'botox-page-component';
        value: string | BotoxPageComponent;
      } | null)
    | ({
        relationTo: 'dysport-page-component';
        value: string | DysportPageComponent;
      } | null)
    | ({
        relationTo: 'dermal-fillers-page-component';
        value: string | DermalFillersPageComponent;
      } | null)
    | ({
        relationTo: 'juvederm-page-component';
        value: string | JuvedermPageComponent;
      } | null)
    | ({
        relationTo: 'juvederm-volux-page-component';
        value: string | JuvedermVoluxPageComponent;
      } | null)
    | ({
        relationTo: 'restylane-page-component';
        value: string | RestylanePageComponent;
      } | null)
    | ({
        relationTo: 'restylane-contour-page-component';
        value: string | RestylaneContourPageComponent;
      } | null)
    | ({
        relationTo: 'cheek-fillers-page-component';
        value: string | CheekFillersPageComponent;
      } | null)
    | ({
        relationTo: 'lines-wrinkles-page-component';
        value: string | LinesWrinklesPageComponent;
      } | null)
    | ({
        relationTo: 'lip-fillers-page-component';
        value: string | LipFillersPageComponent;
      } | null)
    | ({
        relationTo: 'chin-fillers-page-component';
        value: string | ChinFillersPageComponent;
      } | null)
    | ({
        relationTo: 'hand-rejuvenation-page-component';
        value: string | HandRejuvenationPageComponent;
      } | null)
    | ({
        relationTo: 'liquid-facelift-page-component';
        value: string | LiquidFaceliftPageComponent;
      } | null)
    | ({
        relationTo: 'liquid-rhinoplasty-page-component';
        value: string | LiquidRhinoplastyPageComponent;
      } | null)
    | ({
        relationTo: 'skinvive-page-component';
        value: string | SkinvivePageComponent;
      } | null)
    | ({
        relationTo: 'spa-services-page-component';
        value: string | SpaServicesPageComponent;
      } | null)
    | ({
        relationTo: 'lash-extensions-page-component';
        value: string | LashExtensionsPageComponent;
      } | null)
    | ({
        relationTo: 'mens-services-page-component';
        value: string | MensServicesPageComponent;
      } | null)
    | ({
        relationTo: 'micro-channeling-page-component';
        value: string | MicroChannelingPageComponent;
      } | null)
    | ({
        relationTo: 'permanent-makeup-page-component';
        value: string | PermanentMakeupPageComponent;
      } | null)
    | ({
        relationTo: 'diamondglow-page-component';
        value: string | DiamondglowPageComponent;
      } | null)
    | ({
        relationTo: 'skinMedicaPage';
        value: string | SkinMedicaPage;
      } | null)
    | ({
        relationTo: 'skincareServicesPage';
        value: string | SkincareServicesPage;
      } | null)
    | ({
        relationTo: 'weightloss-page-component';
        value: string | WeightlossPageComponent;
      } | null)
    | ({
        relationTo: 'semaglutide-injections-page-component';
        value: string | SemaglutideInjectionsPageComponent;
      } | null)
    | ({
        relationTo: 'specials-rewards-page-component';
        value: string | SpecialsRewardsPageComponent;
      } | null)
    | ({
        relationTo: 'specials-page-component';
        value: string | SpecialsPageComponent;
      } | null)
    | ({
        relationTo: 'alle-rewards-page-component';
        value: string | AlleRewardsPageComponent;
      } | null)
    | ({
        relationTo: 'aspire-rewards-page-component';
        value: string | AspireRewardsPageComponent;
      } | null)
    | ({
        relationTo: 'gift-cards-page-component';
        value: string | GiftCardsPageComponent;
      } | null)
    | ({
        relationTo: 'medical-financing-page-component';
        value: string | MedicalFinancingPageComponent;
      } | null)
    | ({
        relationTo: 'training-page-component';
        value: string | TrainingPageComponent;
      } | null)
    | ({
        relationTo: 'program-details-component';
        value: string | ProgramDetailsComponent;
      } | null)
    | ({
        relationTo: 'comprehensive-program-component';
        value: string | ComprehensiveProgramComponent;
      } | null)
    | ({
        relationTo: 'foundational-program-component';
        value: string | FoundationalProgramComponent;
      } | null)
    | ({
        relationTo: 'training-application-simple-component';
        value: string | TrainingApplicationSimpleComponent;
      } | null)
    | ({
        relationTo: 'plastic-surgery-page-component';
        value: string | PlasticSurgeryPageComponent;
      } | null)
    | ({
        relationTo: 'breast-page-component';
        value: string | BreastPageComponent;
      } | null)
    | ({
        relationTo: 'breast-augmentation-page-component';
        value: string | BreastAugmentationPageComponent;
      } | null)
    | ({
        relationTo: 'breast-lift-page-component';
        value: string | BreastLiftPageComponent;
      } | null)
    | ({
        relationTo: 'breast-reduction-page-component';
        value: string | BreastReductionPageComponent;
      } | null)
    | ({
        relationTo: 'breast-revision-page-component';
        value: string | BreastRevisionPageComponent;
      } | null)
    | ({
        relationTo: 'body-page-component';
        value: string | BodyPageComponent;
      } | null)
    | ({
        relationTo: 'liposuction-page-component';
        value: string | LiposuctionPageComponent;
      } | null)
    | ({
        relationTo: 'mommy-makeover-page-component';
        value: string | MommyMakeoverPageComponent;
      } | null)
    | ({
        relationTo: 'tummy-tuck-page-component';
        value: string | TummyTuckPageComponent;
      } | null)
    | ({
        relationTo: 'blog';
        value: string | Blog;
      } | null)
    | ({
        relationTo: 'locations';
        value: string | Location;
      } | null)
    | ({
        relationTo: 'providers';
        value: string | Provider;
      } | null)
    | ({
        relationTo: 'clermont-page-component';
        value: string | ClermontPageComponent;
      } | null)
    | ({
        relationTo: 'clearwater-page-component';
        value: string | ClearwaterPageComponent;
      } | null)
    | ({
        relationTo: 'downtown-orlando-page-component';
        value: string | DowntownOrlandoPageComponent;
      } | null)
    | ({
        relationTo: 'downtown-tampa-page-component';
        value: string | DowntownTampaPageComponent;
      } | null)
    | ({
        relationTo: 'lake-mary-page-component';
        value: string | LakeMaryPageComponent;
      } | null)
    | ({
        relationTo: 'lake-nona-page-component';
        value: string | LakeNonaPageComponent;
      } | null)
    | ({
        relationTo: 'longwood-page-component';
        value: string | LongwoodPageComponent;
      } | null)
    | ({
        relationTo: 'mount-dora-page-component';
        value: string | MountDoraPageComponent;
      } | null)
    | ({
        relationTo: 'new-smyrna-page-component';
        value: string | NewSmyrnaPageComponent;
      } | null)
    | ({
        relationTo: 'ocala-location-page-component';
        value: string | OcalaLocationPageComponent;
      } | null)
    | ({
        relationTo: 'orlando-location-page-component';
        value: string | OrlandoLocationPageComponent;
      } | null)
    | ({
        relationTo: 'port-orange-location-page-component';
        value: string | PortOrangeLocationPageComponent;
      } | null)
    | ({
        relationTo: 'sarasota-location-page-component';
        value: string | SarasotaLocationPageComponent;
      } | null)
    | ({
        relationTo: 'st-petersburg-location-page-component';
        value: string | StPetersburgLocationPageComponent;
      } | null)
    | ({
        relationTo: 'tampa-location-page-component';
        value: string | TampaLocationPageComponent;
      } | null)
    | ({
        relationTo: 'villages-location-page-component';
        value: string | VillagesLocationPageComponent;
      } | null)
    | ({
        relationTo: 'wesley-chapel-location-page-component';
        value: string | WesleyChapelLocationPageComponent;
      } | null)
    | ({
        relationTo: 'winter-garden-location-page-component';
        value: string | WinterGardenLocationPageComponent;
      } | null)
    | ({
        relationTo: 'winter-park-location-page-component';
        value: string | WinterParkLocationPageComponent;
      } | null)
    | ({
        relationTo: 'satellite-locations-page-component';
        value: string | SatelliteLocationsPageComponent;
      } | null)
    | ({
        relationTo: 'contact-component';
        value: string | ContactComponent;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: string | FormSubmission;
      } | null)
    | ({
        relationTo: 'training-form-submissions';
        value: string | TrainingFormSubmission;
      } | null)
    | ({
        relationTo: 'training-application';
        value: string | TrainingApplication;
      } | null)
    | ({
        relationTo: 'special-contact-form-submissions';
        value: string | SpecialContactFormSubmission;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  cloudinary_url?: T;
  public_id?: T;
  resource_type?: T;
  original_filename?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "about-hero-component_select".
 */
export interface AboutHeroComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  indexListSection?:
    | T
    | {
        backgroundColor?: T;
        textColor?: T;
        hoverColor?: T;
        items?:
          | T
          | {
              label?: T;
              url?: T;
              title?: T;
              ariaLabel?: T;
              id?: T;
            };
      };
  pageIndexSection?:
    | T
    | {
        backgroundColor?: T;
        cardBackgroundColor?: T;
        cardTextColor?: T;
        cardHoverColor?: T;
        cards?:
          | T
          | {
              title?: T;
              url?: T;
              titleAttribute?: T;
              ariaLabel?: T;
              labelText?: T;
              image?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    alt?: T;
                  };
              customBackgroundColor?: T;
              customTextColor?: T;
              id?: T;
            };
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "our-founders-component_select".
 */
export interface OurFoundersComponentSelect<T extends boolean = true> {
  componentTitle?: T;
  isActive?: T;
  order?: T;
  heroSection?:
    | T
    | {
        isActive?: T;
        order?: T;
        className?: T;
        styles?:
          | T
          | {
              backgroundColor?: T;
              paddingTop?: T;
              paddingBottom?: T;
              marginTop?: T;
              marginBottom?: T;
            };
        backgroundImage?:
          | T
          | {
              show?: T;
              image?: T;
              imageUrl?: T;
              alt?: T;
              width?: T;
              height?: T;
            };
        breadcrumbs?:
          | T
          | {
              show?: T;
              className?: T;
              styles?:
                | T
                | {
                    textColor?: T;
                    linkColor?: T;
                    hoverColor?: T;
                    fontSize?: T;
                  };
              items?:
                | T
                | {
                    order?: T;
                    text?: T;
                    link?: T;
                    ariaLabel?: T;
                    isActive?: T;
                    id?: T;
                  };
            };
        heading?:
          | T
          | {
              text?: T;
              tag?: T;
              styles?:
                | T
                | {
                    color?: T;
                    fontSize?: T;
                    fontWeight?: T;
                    textAlign?: T;
                    marginTop?: T;
                    marginBottom?: T;
                  };
            };
        mainImage?:
          | T
          | {
              show?: T;
              image?: T;
              imageUrl?: T;
              alt?: T;
              width?: T;
              height?: T;
              styles?:
                | T
                | {
                    objectFit?: T;
                    borderRadius?: T;
                  };
            };
      };
  introSection?:
    | T
    | {
        isActive?: T;
        order?: T;
        className?: T;
        styles?:
          | T
          | {
              backgroundColor?: T;
              paddingTop?: T;
              paddingBottom?: T;
              marginTop?: T;
              marginBottom?: T;
              textAlign?: T;
            };
        logo?:
          | T
          | {
              show?: T;
              image?: T;
              imageUrl?: T;
              alt?: T;
              width?: T;
              height?: T;
              styles?:
                | T
                | {
                    marginBottom?: T;
                  };
            };
        heading?:
          | T
          | {
              text?: T;
              tag?: T;
              styles?:
                | T
                | {
                    color?: T;
                    fontSize?: T;
                    fontWeight?: T;
                    lineHeight?: T;
                    marginBottom?: T;
                  };
            };
        paragraphs?:
          | T
          | {
              order?: T;
              text?: T;
              isActive?: T;
              id?: T;
            };
        contentStyles?:
          | T
          | {
              color?: T;
              fontSize?: T;
              lineHeight?: T;
              maxWidth?: T;
              paragraphSpacing?: T;
            };
      };
  halfImageSection?:
    | T
    | {
        isActive?: T;
        order?: T;
        className?: T;
        styles?:
          | T
          | {
              backgroundColor?: T;
              paddingTop?: T;
              paddingBottom?: T;
              marginTop?: T;
              marginBottom?: T;
            };
        layout?: T;
        imageContainer?:
          | T
          | {
              className?: T;
              styles?:
                | T
                | {
                    backgroundColor?: T;
                    borderRadius?: T;
                    padding?: T;
                  };
              image?: T;
              imageUrl?: T;
              alt?: T;
              width?: T;
              height?: T;
              imageStyles?:
                | T
                | {
                    objectFit?: T;
                    borderRadius?: T;
                  };
            };
        contentContainer?:
          | T
          | {
              className?: T;
              styles?:
                | T
                | {
                    backgroundColor?: T;
                    padding?: T;
                    textAlign?: T;
                  };
              heading?:
                | T
                | {
                    smallText?:
                      | T
                      | {
                          show?: T;
                          text?: T;
                          className?: T;
                          styles?:
                            | T
                            | {
                                color?: T;
                                fontSize?: T;
                                fontWeight?: T;
                              };
                        };
                    text?: T;
                    tag?: T;
                    styles?:
                      | T
                      | {
                          color?: T;
                          fontSize?: T;
                          fontWeight?: T;
                          lineHeight?: T;
                          marginBottom?: T;
                        };
                  };
              paragraphs?:
                | T
                | {
                    order?: T;
                    text?: T;
                    isActive?: T;
                    id?: T;
                  };
              contentStyles?:
                | T
                | {
                    color?: T;
                    fontSize?: T;
                    lineHeight?: T;
                    paragraphSpacing?: T;
                  };
            };
      };
  pageSettings?:
    | T
    | {
        containerWidth?: T;
        fontFamily?: T;
        animations?:
          | T
          | {
              enableAnimations?: T;
              fadeInDuration?: T;
            };
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaKeywords?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonials-component_select".
 */
export interface TestimonialsComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  ratingBoxSections?:
    | T
    | {
        sectionTitle?: T;
        backgroundColor?: T;
        textColor?: T;
        itemsPerRow?: T;
        locations?:
          | T
          | {
              name?: T;
              platform?: T;
              displayName?: T;
              rating?: T;
              reviewCount?: T;
              url?: T;
              ariaLabel?: T;
              openInNewTab?: T;
              backgroundColor?: T;
              textColor?: T;
              starColor?: T;
              id?: T;
            };
        id?: T;
      };
  reviewsListSection?:
    | T
    | {
        backgroundColor?: T;
        textColor?: T;
        displayOption?: T;
        reviews?:
          | T
          | {
              content?: T;
              author?: T;
              rating?: T;
              backgroundColor?: T;
              textColor?: T;
              starColor?: T;
              id?: T;
            };
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        defaultStarColor?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaKeywords?: T;
        ogImage?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "video-gallery-component_select".
 */
export interface VideoGalleryComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        backgroundColor?: T;
        textColor?: T;
        paddingBottom?: T;
        logo?:
          | T
          | {
              image?: T;
              width?: T;
              height?: T;
              alt?: T;
            };
        content?: T;
        description?: T;
        animationClass?: T;
      };
  videoGridSection?:
    | T
    | {
        backgroundColor?: T;
        gridLayout?:
          | T
          | {
              columns?: T;
              gap?: T;
            };
        videos?:
          | T
          | {
              youtubeUrl?: T;
              thumbnail?:
                | T
                | {
                    customThumbnail?: T;
                    alt?: T;
                  };
              title?: T;
              titleColor?: T;
              thumbnailHoverEffect?: T;
              id?: T;
            };
        videoCardStyles?:
          | T
          | {
              cardBackgroundColor?: T;
              cardBorderRadius?: T;
              cardShadow?: T;
              cardHoverShadow?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        sectionName?: T;
        isVisible?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        canonicalUrl?: T;
      };
  advancedSettings?:
    | T
    | {
        customCSS?: T;
        customJS?: T;
        moduleDataAttributes?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "confidentiality-statement-component_select".
 */
export interface ConfidentialityStatementComponentSelect<T extends boolean = true> {
  componentName?: T;
  sections?:
    | T
    | {
        sectionType?: T;
        sectionId?: T;
        heroSection?:
          | T
          | {
              backgroundColor?: T;
              backgroundImage?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    large?: T;
                    alt?: T;
                  };
              breadcrumbs?:
                | T
                | {
                    label?: T;
                    url?: T;
                    ariaLabel?: T;
                    id?: T;
                  };
              title?: T;
              titleColor?: T;
              titleFontSize?: T;
              mediaImage?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    large?: T;
                    alt?: T;
                  };
              cssClasses?: T;
            };
        introSection?:
          | T
          | {
              backgroundColor?: T;
              textColor?: T;
              containerWidth?: T;
              showLogo?: T;
              logo?: T;
              logoAlt?: T;
              heading?: T;
              headingColor?: T;
              content?: T;
              cssClasses?: T;
            };
        bannerSection?:
          | T
          | {
              backgroundColor?: T;
              textColor?: T;
              theme?: T;
              hideDivider?: T;
              backgroundImage?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    large?: T;
                    alt?: T;
                  };
              heading?: T;
              headingColor?: T;
              content?: T;
              cssClasses?: T;
            };
        columnSection?:
          | T
          | {
              backgroundColor?: T;
              textColor?: T;
              containerWidth?: T;
              columns?:
                | T
                | {
                    heading?: T;
                    headingColor?: T;
                    content?: T;
                    backgroundColor?: T;
                    textColor?: T;
                    id?: T;
                  };
              cssClasses?: T;
            };
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        canonicalUrl?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gallery-component_select".
 */
export interface GalleryComponentSelect<T extends boolean = true> {
  componentName?: T;
  sections?:
    | T
    | {
        sectionType?: T;
        sectionId?: T;
        galleryHeroSection?:
          | T
          | {
              backgroundColor?: T;
              backgroundImage?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    large?: T;
                    alt?: T;
                    width?: T;
                    height?: T;
                  };
              title?: T;
              titleColor?: T;
              breadcrumbs?:
                | T
                | {
                    label?: T;
                    url?: T;
                    ariaLabel?: T;
                    id?: T;
                  };
              cssClasses?: T;
            };
        galleryIndexSection?:
          | T
          | {
              backgroundColor?: T;
              textColor?: T;
              containerWidth?: T;
              groups?:
                | T
                | {
                    groupName?: T;
                    groupSlug?: T;
                    headingColor?: T;
                    backgroundColor?: T;
                    links?:
                      | T
                      | {
                          label?: T;
                          url?: T;
                          linkColor?: T;
                          hoverColor?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              cssClasses?: T;
            };
        ageRestrictionSection?:
          | T
          | {
              enabled?: T;
              backgroundColor?: T;
              textColor?: T;
              overlayColor?: T;
              heading?: T;
              headingColor?: T;
              message?: T;
              buttonText?: T;
              buttonBackgroundColor?: T;
              buttonTextColor?: T;
              buttonHoverColor?: T;
              showCloseButton?: T;
              cssClasses?: T;
            };
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        canonicalUrl?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "non-surgical-gallery-component_select".
 */
export interface NonSurgicalGalleryComponentSelect<T extends boolean = true> {
  componentName?: T;
  sections?:
    | T
    | {
        sectionType?: T;
        sectionId?: T;
        galleryHeroSection?:
          | T
          | {
              backgroundColor?: T;
              backgroundImage?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    large?: T;
                    alt?: T;
                    width?: T;
                    height?: T;
                  };
              title?: T;
              titleColor?: T;
              breadcrumbs?:
                | T
                | {
                    label?: T;
                    url?: T;
                    ariaLabel?: T;
                    id?: T;
                  };
              cssClasses?: T;
            };
        subIndexSection?:
          | T
          | {
              backgroundColor?: T;
              textColor?: T;
              containerWidth?: T;
              categoryGroups?:
                | T
                | {
                    categoryName?: T;
                    categorySlug?: T;
                    url?: T;
                    headingColor?: T;
                    linkColor?: T;
                    linkHoverColor?: T;
                    backgroundColor?: T;
                    borderColor?: T;
                    id?: T;
                  };
              cssClasses?: T;
            };
        ageRestrictionSection?:
          | T
          | {
              enabled?: T;
              backgroundColor?: T;
              textColor?: T;
              overlayColor?: T;
              heading?: T;
              headingColor?: T;
              message?: T;
              buttonText?: T;
              buttonBackgroundColor?: T;
              buttonTextColor?: T;
              buttonHoverColor?: T;
              showCloseButton?: T;
              cssClasses?: T;
            };
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        canonicalUrl?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ChinFillersPage_select".
 */
export interface ChinFillersPageSelect<T extends boolean = true> {
  componentName?: T;
  slug?: T;
  isActive?: T;
  heroSection?:
    | T
    | {
        title?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        breadcrumbTextColor?: T;
        breadcrumbLinkColor?: T;
        breadcrumbHoverColor?: T;
      };
  dropdownSection?:
    | T
    | {
        backgroundColor?: T;
        selectedItemLabel?: T;
        dropdownItems?:
          | T
          | {
              label?: T;
              url?: T;
              isActive?: T;
              id?: T;
            };
        backButton?:
          | T
          | {
              label?: T;
              url?: T;
              iconClass?: T;
            };
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        borderColor?: T;
      };
  gallerySection?:
    | T
    | {
        backgroundColor?: T;
        sectionPadding?: T;
        galleryItems?:
          | T
          | {
              image?: T;
              imageUrl?: T;
              itemUrl?: T;
              altText?: T;
              patientId?: T;
              imageNumber?: T;
              width?: T;
              height?: T;
              customCss?: T;
              id?: T;
            };
        itemBackgroundColor?: T;
        itemBorderColor?: T;
        itemHoverEffect?: T;
      };
  paginationSection?:
    | T
    | {
        enabled?: T;
        backgroundColor?: T;
        textColor?: T;
        activePageColor?: T;
        activePageBackground?: T;
        hoverColor?: T;
        currentPage?: T;
        totalPages?: T;
        baseUrl?: T;
        pages?:
          | T
          | {
              pageNumber?: T;
              url?: T;
              isCurrent?: T;
              hideOnPhone?: T;
              id?: T;
            };
        nextButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
        prevButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
      };
  globalStyling?:
    | T
    | {
        containerBackgroundColor?: T;
        containerMaxWidth?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        customCss?: T;
      };
  sectionOrder?:
    | T
    | {
        sectionType?: T;
        enabled?: T;
        customId?: T;
        customClass?: T;
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaKeywords?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "botox-page_select".
 */
export interface BotoxPageSelect<T extends boolean = true> {
  componentName?: T;
  slug?: T;
  isActive?: T;
  heroSection?:
    | T
    | {
        title?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        breadcrumbTextColor?: T;
        breadcrumbLinkColor?: T;
        breadcrumbHoverColor?: T;
      };
  dropdownSection?:
    | T
    | {
        backgroundColor?: T;
        selectedItemLabel?: T;
        dropdownItems?:
          | T
          | {
              label?: T;
              url?: T;
              isActive?: T;
              id?: T;
            };
        backButton?:
          | T
          | {
              label?: T;
              url?: T;
              iconClass?: T;
            };
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        borderColor?: T;
      };
  gallerySection?:
    | T
    | {
        backgroundColor?: T;
        sectionPadding?: T;
        galleryItems?:
          | T
          | {
              image?: T;
              imageUrl?: T;
              itemUrl?: T;
              altText?: T;
              patientId?: T;
              imageNumber?: T;
              width?: T;
              height?: T;
              customCss?: T;
              id?: T;
            };
        itemBackgroundColor?: T;
        itemBorderColor?: T;
        itemHoverEffect?: T;
      };
  paginationSection?:
    | T
    | {
        enabled?: T;
        backgroundColor?: T;
        textColor?: T;
        activePageColor?: T;
        activePageBackground?: T;
        hoverColor?: T;
        currentPage?: T;
        totalPages?: T;
        baseUrl?: T;
        pages?:
          | T
          | {
              pageNumber?: T;
              url?: T;
              isCurrent?: T;
              hideOnPhone?: T;
              id?: T;
            };
        nextButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
        prevButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
      };
  globalStyling?:
    | T
    | {
        containerBackgroundColor?: T;
        containerMaxWidth?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        customCss?: T;
      };
  sectionOrder?:
    | T
    | {
        sectionType?: T;
        enabled?: T;
        customId?: T;
        customClass?: T;
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaKeywords?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "juvedermGallery_select".
 */
export interface JuvedermGallerySelect<T extends boolean = true> {
  componentName?: T;
  slug?: T;
  isActive?: T;
  heroSection?:
    | T
    | {
        title?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        breadcrumbTextColor?: T;
        breadcrumbLinkColor?: T;
        breadcrumbHoverColor?: T;
      };
  dropdownSection?:
    | T
    | {
        backgroundColor?: T;
        selectedItemLabel?: T;
        dropdownItems?:
          | T
          | {
              label?: T;
              url?: T;
              isActive?: T;
              id?: T;
            };
        backButton?:
          | T
          | {
              label?: T;
              url?: T;
              iconClass?: T;
            };
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        borderColor?: T;
      };
  gallerySection?:
    | T
    | {
        backgroundColor?: T;
        sectionPadding?: T;
        galleryItems?:
          | T
          | {
              image?: T;
              imageUrl?: T;
              itemUrl?: T;
              altText?: T;
              patientId?: T;
              imageNumber?: T;
              width?: T;
              height?: T;
              customCss?: T;
              id?: T;
            };
        itemBackgroundColor?: T;
        itemBorderColor?: T;
        itemHoverEffect?: T;
      };
  paginationSection?:
    | T
    | {
        enabled?: T;
        backgroundColor?: T;
        textColor?: T;
        activePageColor?: T;
        activePageBackground?: T;
        hoverColor?: T;
        currentPage?: T;
        totalPages?: T;
        baseUrl?: T;
        pages?:
          | T
          | {
              pageNumber?: T;
              url?: T;
              isCurrent?: T;
              hideOnPhone?: T;
              id?: T;
            };
        nextButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
        prevButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
      };
  globalStyling?:
    | T
    | {
        containerBackgroundColor?: T;
        containerMaxWidth?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        customCss?: T;
      };
  sectionOrder?:
    | T
    | {
        sectionType?: T;
        enabled?: T;
        customId?: T;
        customClass?: T;
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaKeywords?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "KybellaGallery_select".
 */
export interface KybellaGallerySelect<T extends boolean = true> {
  componentName?: T;
  slug?: T;
  isActive?: T;
  heroSection?:
    | T
    | {
        title?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        breadcrumbTextColor?: T;
        breadcrumbLinkColor?: T;
        breadcrumbHoverColor?: T;
      };
  dropdownSection?:
    | T
    | {
        backgroundColor?: T;
        selectedItemLabel?: T;
        dropdownItems?:
          | T
          | {
              label?: T;
              url?: T;
              isActive?: T;
              id?: T;
            };
        backButton?:
          | T
          | {
              label?: T;
              url?: T;
              iconClass?: T;
            };
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        borderColor?: T;
      };
  gallerySection?:
    | T
    | {
        backgroundColor?: T;
        sectionPadding?: T;
        galleryItems?:
          | T
          | {
              image?: T;
              imageUrl?: T;
              itemUrl?: T;
              altText?: T;
              patientId?: T;
              imageNumber?: T;
              width?: T;
              height?: T;
              customCss?: T;
              id?: T;
            };
        itemBackgroundColor?: T;
        itemBorderColor?: T;
        itemHoverEffect?: T;
      };
  paginationSection?:
    | T
    | {
        enabled?: T;
        backgroundColor?: T;
        textColor?: T;
        activePageColor?: T;
        activePageBackground?: T;
        hoverColor?: T;
        currentPage?: T;
        totalPages?: T;
        baseUrl?: T;
        pages?:
          | T
          | {
              pageNumber?: T;
              url?: T;
              isCurrent?: T;
              hideOnPhone?: T;
              id?: T;
            };
        nextButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
        prevButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
      };
  globalStyling?:
    | T
    | {
        containerBackgroundColor?: T;
        containerMaxWidth?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        customCss?: T;
      };
  sectionOrder?:
    | T
    | {
        sectionType?: T;
        enabled?: T;
        customId?: T;
        customClass?: T;
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaKeywords?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MicroChannelingGallery_select".
 */
export interface MicroChannelingGallerySelect<T extends boolean = true> {
  componentName?: T;
  slug?: T;
  isActive?: T;
  heroSection?:
    | T
    | {
        title?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        breadcrumbTextColor?: T;
        breadcrumbLinkColor?: T;
        breadcrumbHoverColor?: T;
      };
  dropdownSection?:
    | T
    | {
        backgroundColor?: T;
        selectedItemLabel?: T;
        dropdownItems?:
          | T
          | {
              label?: T;
              url?: T;
              isActive?: T;
              id?: T;
            };
        backButton?:
          | T
          | {
              label?: T;
              url?: T;
              iconClass?: T;
            };
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        borderColor?: T;
      };
  gallerySection?:
    | T
    | {
        backgroundColor?: T;
        sectionPadding?: T;
        galleryItems?:
          | T
          | {
              image?: T;
              imageUrl?: T;
              itemUrl?: T;
              altText?: T;
              patientId?: T;
              imageNumber?: T;
              width?: T;
              height?: T;
              customCss?: T;
              id?: T;
            };
        itemBackgroundColor?: T;
        itemBorderColor?: T;
        itemHoverEffect?: T;
      };
  paginationSection?:
    | T
    | {
        enabled?: T;
        backgroundColor?: T;
        textColor?: T;
        activePageColor?: T;
        activePageBackground?: T;
        hoverColor?: T;
        currentPage?: T;
        totalPages?: T;
        baseUrl?: T;
        pages?:
          | T
          | {
              pageNumber?: T;
              url?: T;
              isCurrent?: T;
              hideOnPhone?: T;
              id?: T;
            };
        nextButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
        prevButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
      };
  globalStyling?:
    | T
    | {
        containerBackgroundColor?: T;
        containerMaxWidth?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        customCss?: T;
      };
  sectionOrder?:
    | T
    | {
        sectionType?: T;
        enabled?: T;
        customId?: T;
        customClass?: T;
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaKeywords?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "RestylaneGallery_select".
 */
export interface RestylaneGallerySelect<T extends boolean = true> {
  componentName?: T;
  slug?: T;
  isActive?: T;
  heroSection?:
    | T
    | {
        title?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        breadcrumbTextColor?: T;
        breadcrumbLinkColor?: T;
        breadcrumbHoverColor?: T;
      };
  dropdownSection?:
    | T
    | {
        backgroundColor?: T;
        selectedItemLabel?: T;
        dropdownItems?:
          | T
          | {
              label?: T;
              url?: T;
              isActive?: T;
              id?: T;
            };
        backButton?:
          | T
          | {
              label?: T;
              url?: T;
              iconClass?: T;
            };
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        borderColor?: T;
      };
  gallerySection?:
    | T
    | {
        backgroundColor?: T;
        sectionPadding?: T;
        galleryItems?:
          | T
          | {
              image?: T;
              imageUrl?: T;
              itemUrl?: T;
              altText?: T;
              patientId?: T;
              imageNumber?: T;
              width?: T;
              height?: T;
              customCss?: T;
              id?: T;
            };
        itemBackgroundColor?: T;
        itemBorderColor?: T;
        itemHoverEffect?: T;
      };
  paginationSection?:
    | T
    | {
        enabled?: T;
        backgroundColor?: T;
        textColor?: T;
        activePageColor?: T;
        activePageBackground?: T;
        hoverColor?: T;
        currentPage?: T;
        totalPages?: T;
        baseUrl?: T;
        pages?:
          | T
          | {
              pageNumber?: T;
              url?: T;
              isCurrent?: T;
              hideOnPhone?: T;
              id?: T;
            };
        nextButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
        prevButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
      };
  globalStyling?:
    | T
    | {
        containerBackgroundColor?: T;
        containerMaxWidth?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        customCss?: T;
      };
  sectionOrder?:
    | T
    | {
        sectionType?: T;
        enabled?: T;
        customId?: T;
        customClass?: T;
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaKeywords?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SkinMedicaGallery_select".
 */
export interface SkinMedicaGallerySelect<T extends boolean = true> {
  componentName?: T;
  slug?: T;
  isActive?: T;
  heroSection?:
    | T
    | {
        title?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        breadcrumbTextColor?: T;
        breadcrumbLinkColor?: T;
        breadcrumbHoverColor?: T;
      };
  dropdownSection?:
    | T
    | {
        backgroundColor?: T;
        selectedItemLabel?: T;
        dropdownItems?:
          | T
          | {
              label?: T;
              url?: T;
              isActive?: T;
              id?: T;
            };
        backButton?:
          | T
          | {
              label?: T;
              url?: T;
              iconClass?: T;
            };
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        borderColor?: T;
      };
  gallerySection?:
    | T
    | {
        backgroundColor?: T;
        sectionPadding?: T;
        galleryItems?:
          | T
          | {
              image?: T;
              imageUrl?: T;
              itemUrl?: T;
              altText?: T;
              patientId?: T;
              imageNumber?: T;
              width?: T;
              height?: T;
              customCss?: T;
              id?: T;
            };
        itemBackgroundColor?: T;
        itemBorderColor?: T;
        itemHoverEffect?: T;
      };
  paginationSection?:
    | T
    | {
        enabled?: T;
        backgroundColor?: T;
        textColor?: T;
        activePageColor?: T;
        activePageBackground?: T;
        hoverColor?: T;
        currentPage?: T;
        totalPages?: T;
        baseUrl?: T;
        pages?:
          | T
          | {
              pageNumber?: T;
              url?: T;
              isCurrent?: T;
              hideOnPhone?: T;
              id?: T;
            };
        nextButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
        prevButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
      };
  globalStyling?:
    | T
    | {
        containerBackgroundColor?: T;
        containerMaxWidth?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        customCss?: T;
      };
  sectionOrder?:
    | T
    | {
        sectionType?: T;
        enabled?: T;
        customId?: T;
        customClass?: T;
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaKeywords?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DermanGalleryHero_select".
 */
export interface DermanGalleryHeroSelect<T extends boolean = true> {
  componentName?: T;
  slug?: T;
  isActive?: T;
  heroSection?:
    | T
    | {
        title?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        breadcrumbTextColor?: T;
        breadcrumbLinkColor?: T;
        breadcrumbHoverColor?: T;
      };
  dropdownSection?:
    | T
    | {
        backgroundColor?: T;
        selectedItemLabel?: T;
        dropdownItems?:
          | T
          | {
              label?: T;
              url?: T;
              isActive?: T;
              id?: T;
            };
        backButton?:
          | T
          | {
              label?: T;
              url?: T;
              iconClass?: T;
            };
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        borderColor?: T;
      };
  gallerySection?:
    | T
    | {
        backgroundColor?: T;
        sectionPadding?: T;
        galleryItems?:
          | T
          | {
              image?: T;
              imageUrl?: T;
              itemUrl?: T;
              altText?: T;
              patientId?: T;
              imageNumber?: T;
              width?: T;
              height?: T;
              customCss?: T;
              id?: T;
            };
        itemBackgroundColor?: T;
        itemBorderColor?: T;
        itemHoverEffect?: T;
      };
  paginationSection?:
    | T
    | {
        enabled?: T;
        backgroundColor?: T;
        textColor?: T;
        activePageColor?: T;
        activePageBackground?: T;
        hoverColor?: T;
        currentPage?: T;
        totalPages?: T;
        baseUrl?: T;
        pages?:
          | T
          | {
              pageNumber?: T;
              url?: T;
              isCurrent?: T;
              hideOnPhone?: T;
              id?: T;
            };
        nextButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
        prevButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
      };
  globalStyling?:
    | T
    | {
        containerBackgroundColor?: T;
        containerMaxWidth?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        customCss?: T;
      };
  sectionOrder?:
    | T
    | {
        sectionType?: T;
        enabled?: T;
        customId?: T;
        customClass?: T;
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaKeywords?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CheekContourGallery_select".
 */
export interface CheekContourGallerySelect<T extends boolean = true> {
  componentName?: T;
  slug?: T;
  isActive?: T;
  heroSection?:
    | T
    | {
        title?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        breadcrumbTextColor?: T;
        breadcrumbLinkColor?: T;
        breadcrumbHoverColor?: T;
      };
  dropdownSection?:
    | T
    | {
        backgroundColor?: T;
        selectedItemLabel?: T;
        dropdownItems?:
          | T
          | {
              label?: T;
              url?: T;
              isActive?: T;
              id?: T;
            };
        backButton?:
          | T
          | {
              label?: T;
              url?: T;
              iconClass?: T;
            };
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        borderColor?: T;
      };
  gallerySection?:
    | T
    | {
        backgroundColor?: T;
        sectionPadding?: T;
        galleryItems?:
          | T
          | {
              image?: T;
              imageUrl?: T;
              itemUrl?: T;
              altText?: T;
              patientId?: T;
              imageNumber?: T;
              width?: T;
              height?: T;
              customCss?: T;
              id?: T;
            };
        itemBackgroundColor?: T;
        itemBorderColor?: T;
        itemHoverEffect?: T;
      };
  paginationSection?:
    | T
    | {
        enabled?: T;
        backgroundColor?: T;
        textColor?: T;
        activePageColor?: T;
        activePageBackground?: T;
        hoverColor?: T;
        currentPage?: T;
        totalPages?: T;
        baseUrl?: T;
        pages?:
          | T
          | {
              pageNumber?: T;
              url?: T;
              isCurrent?: T;
              hideOnPhone?: T;
              id?: T;
            };
        nextButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
        prevButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
      };
  globalStyling?:
    | T
    | {
        containerBackgroundColor?: T;
        containerMaxWidth?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        customCss?: T;
      };
  sectionOrder?:
    | T
    | {
        sectionType?: T;
        enabled?: T;
        customId?: T;
        customClass?: T;
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaKeywords?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LiquidChinJawGallery_select".
 */
export interface LiquidChinJawGallerySelect<T extends boolean = true> {
  componentName?: T;
  slug?: T;
  isActive?: T;
  heroSection?:
    | T
    | {
        title?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        breadcrumbTextColor?: T;
        breadcrumbLinkColor?: T;
        breadcrumbHoverColor?: T;
      };
  dropdownSection?:
    | T
    | {
        backgroundColor?: T;
        selectedItemLabel?: T;
        dropdownItems?:
          | T
          | {
              label?: T;
              url?: T;
              isActive?: T;
              id?: T;
            };
        backButton?:
          | T
          | {
              label?: T;
              url?: T;
              iconClass?: T;
            };
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        borderColor?: T;
      };
  gallerySection?:
    | T
    | {
        backgroundColor?: T;
        sectionPadding?: T;
        galleryItems?:
          | T
          | {
              image?: T;
              imageUrl?: T;
              itemUrl?: T;
              altText?: T;
              patientId?: T;
              imageNumber?: T;
              width?: T;
              height?: T;
              customCss?: T;
              id?: T;
            };
        itemBackgroundColor?: T;
        itemBorderColor?: T;
        itemHoverEffect?: T;
      };
  paginationSection?:
    | T
    | {
        enabled?: T;
        backgroundColor?: T;
        textColor?: T;
        activePageColor?: T;
        activePageBackground?: T;
        hoverColor?: T;
        currentPage?: T;
        totalPages?: T;
        baseUrl?: T;
        pages?:
          | T
          | {
              pageNumber?: T;
              url?: T;
              isCurrent?: T;
              hideOnPhone?: T;
              id?: T;
            };
        nextButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
        prevButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
      };
  globalStyling?:
    | T
    | {
        containerBackgroundColor?: T;
        containerMaxWidth?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        customCss?: T;
      };
  sectionOrder?:
    | T
    | {
        sectionType?: T;
        enabled?: T;
        customId?: T;
        customClass?: T;
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaKeywords?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LiquidRhinoplastyGallery_select".
 */
export interface LiquidRhinoplastyGallerySelect<T extends boolean = true> {
  componentName?: T;
  slug?: T;
  isActive?: T;
  heroSection?:
    | T
    | {
        title?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        breadcrumbTextColor?: T;
        breadcrumbLinkColor?: T;
        breadcrumbHoverColor?: T;
      };
  dropdownSection?:
    | T
    | {
        backgroundColor?: T;
        selectedItemLabel?: T;
        dropdownItems?:
          | T
          | {
              label?: T;
              url?: T;
              isActive?: T;
              id?: T;
            };
        backButton?:
          | T
          | {
              label?: T;
              url?: T;
              iconClass?: T;
            };
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        borderColor?: T;
      };
  gallerySection?:
    | T
    | {
        backgroundColor?: T;
        sectionPadding?: T;
        galleryItems?:
          | T
          | {
              image?: T;
              imageUrl?: T;
              itemUrl?: T;
              altText?: T;
              patientId?: T;
              imageNumber?: T;
              width?: T;
              height?: T;
              customCss?: T;
              id?: T;
            };
        itemBackgroundColor?: T;
        itemBorderColor?: T;
        itemHoverEffect?: T;
      };
  paginationSection?:
    | T
    | {
        enabled?: T;
        backgroundColor?: T;
        textColor?: T;
        activePageColor?: T;
        activePageBackground?: T;
        hoverColor?: T;
        currentPage?: T;
        totalPages?: T;
        baseUrl?: T;
        pages?:
          | T
          | {
              pageNumber?: T;
              url?: T;
              isCurrent?: T;
              hideOnPhone?: T;
              id?: T;
            };
        nextButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
        prevButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
      };
  globalStyling?:
    | T
    | {
        containerBackgroundColor?: T;
        containerMaxWidth?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        customCss?: T;
      };
  sectionOrder?:
    | T
    | {
        sectionType?: T;
        enabled?: T;
        customId?: T;
        customClass?: T;
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaKeywords?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MarionetteLineGallery_select".
 */
export interface MarionetteLineGallerySelect<T extends boolean = true> {
  componentName?: T;
  slug?: T;
  isActive?: T;
  heroSection?:
    | T
    | {
        title?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        breadcrumbTextColor?: T;
        breadcrumbLinkColor?: T;
        breadcrumbHoverColor?: T;
      };
  dropdownSection?:
    | T
    | {
        backgroundColor?: T;
        selectedItemLabel?: T;
        dropdownItems?:
          | T
          | {
              label?: T;
              url?: T;
              isActive?: T;
              id?: T;
            };
        backButton?:
          | T
          | {
              label?: T;
              url?: T;
              iconClass?: T;
            };
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        borderColor?: T;
      };
  gallerySection?:
    | T
    | {
        backgroundColor?: T;
        sectionPadding?: T;
        galleryItems?:
          | T
          | {
              image?: T;
              imageUrl?: T;
              itemUrl?: T;
              altText?: T;
              patientId?: T;
              imageNumber?: T;
              width?: T;
              height?: T;
              customCss?: T;
              id?: T;
            };
        itemBackgroundColor?: T;
        itemBorderColor?: T;
        itemHoverEffect?: T;
      };
  paginationSection?:
    | T
    | {
        enabled?: T;
        backgroundColor?: T;
        textColor?: T;
        activePageColor?: T;
        activePageBackground?: T;
        hoverColor?: T;
        currentPage?: T;
        totalPages?: T;
        baseUrl?: T;
        pages?:
          | T
          | {
              pageNumber?: T;
              url?: T;
              isCurrent?: T;
              hideOnPhone?: T;
              id?: T;
            };
        nextButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
        prevButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
      };
  globalStyling?:
    | T
    | {
        containerBackgroundColor?: T;
        containerMaxWidth?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        customCss?: T;
      };
  sectionOrder?:
    | T
    | {
        sectionType?: T;
        enabled?: T;
        customId?: T;
        customClass?: T;
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaKeywords?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LiquidFaceliftGallery_select".
 */
export interface LiquidFaceliftGallerySelect<T extends boolean = true> {
  componentName?: T;
  slug?: T;
  isActive?: T;
  heroSection?:
    | T
    | {
        title?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        breadcrumbTextColor?: T;
        breadcrumbLinkColor?: T;
        breadcrumbHoverColor?: T;
      };
  dropdownSection?:
    | T
    | {
        backgroundColor?: T;
        selectedItemLabel?: T;
        dropdownItems?:
          | T
          | {
              label?: T;
              url?: T;
              isActive?: T;
              id?: T;
            };
        backButton?:
          | T
          | {
              label?: T;
              url?: T;
              iconClass?: T;
            };
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        borderColor?: T;
      };
  gallerySection?:
    | T
    | {
        backgroundColor?: T;
        sectionPadding?: T;
        galleryItems?:
          | T
          | {
              image?: T;
              imageUrl?: T;
              itemUrl?: T;
              altText?: T;
              patientId?: T;
              imageNumber?: T;
              width?: T;
              height?: T;
              customCss?: T;
              id?: T;
            };
        itemBackgroundColor?: T;
        itemBorderColor?: T;
        itemHoverEffect?: T;
      };
  paginationSection?:
    | T
    | {
        enabled?: T;
        backgroundColor?: T;
        textColor?: T;
        activePageColor?: T;
        activePageBackground?: T;
        hoverColor?: T;
        currentPage?: T;
        totalPages?: T;
        baseUrl?: T;
        pages?:
          | T
          | {
              pageNumber?: T;
              url?: T;
              isCurrent?: T;
              hideOnPhone?: T;
              id?: T;
            };
        nextButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
        prevButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
      };
  globalStyling?:
    | T
    | {
        containerBackgroundColor?: T;
        containerMaxWidth?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        customCss?: T;
      };
  sectionOrder?:
    | T
    | {
        sectionType?: T;
        enabled?: T;
        customId?: T;
        customClass?: T;
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaKeywords?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "WeightLossGallery_select".
 */
export interface WeightLossGallerySelect<T extends boolean = true> {
  componentName?: T;
  slug?: T;
  isActive?: T;
  heroSection?:
    | T
    | {
        title?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        breadcrumbTextColor?: T;
        breadcrumbLinkColor?: T;
        breadcrumbHoverColor?: T;
      };
  dropdownSection?:
    | T
    | {
        backgroundColor?: T;
        selectedItemLabel?: T;
        dropdownItems?:
          | T
          | {
              label?: T;
              url?: T;
              isActive?: T;
              id?: T;
            };
        backButton?:
          | T
          | {
              label?: T;
              url?: T;
              iconClass?: T;
            };
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        borderColor?: T;
      };
  gallerySection?:
    | T
    | {
        backgroundColor?: T;
        sectionPadding?: T;
        galleryItems?:
          | T
          | {
              image?: T;
              imageUrl?: T;
              itemUrl?: T;
              altText?: T;
              patientId?: T;
              imageNumber?: T;
              width?: T;
              height?: T;
              customCss?: T;
              id?: T;
            };
        itemBackgroundColor?: T;
        itemBorderColor?: T;
        itemHoverEffect?: T;
      };
  paginationSection?:
    | T
    | {
        enabled?: T;
        backgroundColor?: T;
        textColor?: T;
        activePageColor?: T;
        activePageBackground?: T;
        hoverColor?: T;
        currentPage?: T;
        totalPages?: T;
        baseUrl?: T;
        pages?:
          | T
          | {
              pageNumber?: T;
              url?: T;
              isCurrent?: T;
              hideOnPhone?: T;
              id?: T;
            };
        nextButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
        prevButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
      };
  globalStyling?:
    | T
    | {
        containerBackgroundColor?: T;
        containerMaxWidth?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        customCss?: T;
      };
  sectionOrder?:
    | T
    | {
        sectionType?: T;
        enabled?: T;
        customId?: T;
        customClass?: T;
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaKeywords?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LashExtensionsGallery_select".
 */
export interface LashExtensionsGallerySelect<T extends boolean = true> {
  componentName?: T;
  slug?: T;
  isActive?: T;
  heroSection?:
    | T
    | {
        title?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        breadcrumbTextColor?: T;
        breadcrumbLinkColor?: T;
        breadcrumbHoverColor?: T;
      };
  dropdownSection?:
    | T
    | {
        backgroundColor?: T;
        selectedItemLabel?: T;
        dropdownItems?:
          | T
          | {
              label?: T;
              url?: T;
              isActive?: T;
              id?: T;
            };
        backButton?:
          | T
          | {
              label?: T;
              url?: T;
              iconClass?: T;
            };
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        borderColor?: T;
      };
  gallerySection?:
    | T
    | {
        backgroundColor?: T;
        sectionPadding?: T;
        galleryItems?:
          | T
          | {
              image?: T;
              imageUrl?: T;
              itemUrl?: T;
              altText?: T;
              patientId?: T;
              imageNumber?: T;
              width?: T;
              height?: T;
              customCss?: T;
              id?: T;
            };
        itemBackgroundColor?: T;
        itemBorderColor?: T;
        itemHoverEffect?: T;
      };
  paginationSection?:
    | T
    | {
        enabled?: T;
        backgroundColor?: T;
        textColor?: T;
        activePageColor?: T;
        activePageBackground?: T;
        hoverColor?: T;
        currentPage?: T;
        totalPages?: T;
        baseUrl?: T;
        pages?:
          | T
          | {
              pageNumber?: T;
              url?: T;
              isCurrent?: T;
              hideOnPhone?: T;
              id?: T;
            };
        nextButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
        prevButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
      };
  globalStyling?:
    | T
    | {
        containerBackgroundColor?: T;
        containerMaxWidth?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        customCss?: T;
      };
  sectionOrder?:
    | T
    | {
        sectionType?: T;
        enabled?: T;
        customId?: T;
        customClass?: T;
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaKeywords?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "surgical-gallery-component_select".
 */
export interface SurgicalGalleryComponentSelect<T extends boolean = true> {
  componentName?: T;
  sections?:
    | T
    | {
        sectionType?: T;
        sectionId?: T;
        galleryHeroSection?:
          | T
          | {
              backgroundColor?: T;
              backgroundImage?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    large?: T;
                    alt?: T;
                    width?: T;
                    height?: T;
                  };
              title?: T;
              titleColor?: T;
              breadcrumbs?:
                | T
                | {
                    label?: T;
                    url?: T;
                    ariaLabel?: T;
                    id?: T;
                  };
              cssClasses?: T;
            };
        galleryIndexSection?:
          | T
          | {
              backgroundColor?: T;
              textColor?: T;
              containerWidth?: T;
              categoryGroups?:
                | T
                | {
                    categoryName?: T;
                    categorySlug?: T;
                    url?: T;
                    headingColor?: T;
                    linkColor?: T;
                    linkHoverColor?: T;
                    backgroundColor?: T;
                    borderColor?: T;
                    padding?: T;
                    margin?: T;
                    id?: T;
                  };
              cssClasses?: T;
            };
        ageRestrictionSection?:
          | T
          | {
              enabled?: T;
              isHidden?: T;
              popupBackgroundColor?: T;
              popupTextColor?: T;
              popupBorderColor?: T;
              popupBorderRadius?: T;
              popupPadding?: T;
              overlayBackgroundColor?: T;
              heading?: T;
              headingColor?: T;
              headingFontSize?: T;
              message?: T;
              messageFontSize?: T;
              buttonText?: T;
              buttonBackgroundColor?: T;
              buttonTextColor?: T;
              buttonHoverBackgroundColor?: T;
              buttonHoverTextColor?: T;
              buttonBorderColor?: T;
              buttonBorderRadius?: T;
              buttonPadding?: T;
              showCloseButton?: T;
              closeButtonColor?: T;
              closeButtonHoverColor?: T;
              closeButtonSize?: T;
              cssClasses?: T;
            };
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        headingFontSize?: T;
        bodyFontSize?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        canonicalUrl?: T;
        keywords?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tummyTuckPage_select".
 */
export interface TummyTuckPageSelect<T extends boolean = true> {
  componentName?: T;
  slug?: T;
  isActive?: T;
  heroSection?:
    | T
    | {
        title?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        breadcrumbTextColor?: T;
        breadcrumbLinkColor?: T;
        breadcrumbHoverColor?: T;
      };
  dropdownSection?:
    | T
    | {
        backgroundColor?: T;
        selectedItemLabel?: T;
        dropdownItems?:
          | T
          | {
              label?: T;
              url?: T;
              isActive?: T;
              id?: T;
            };
        backButton?:
          | T
          | {
              label?: T;
              url?: T;
              iconClass?: T;
            };
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        borderColor?: T;
      };
  gallerySection?:
    | T
    | {
        backgroundColor?: T;
        sectionPadding?: T;
        galleryItems?:
          | T
          | {
              itemUrl?: T;
              patientId?: T;
              beforeImage?:
                | T
                | {
                    image?: T;
                    imageUrl?: T;
                    altText?: T;
                    width?: T;
                    height?: T;
                  };
              afterImage?:
                | T
                | {
                    image?: T;
                    imageUrl?: T;
                    altText?: T;
                    width?: T;
                    height?: T;
                  };
              customCss?: T;
              id?: T;
            };
        itemBackgroundColor?: T;
        itemBorderColor?: T;
        itemHoverEffect?: T;
      };
  paginationSection?:
    | T
    | {
        enabled?: T;
        backgroundColor?: T;
        textColor?: T;
        activePageColor?: T;
        activePageBackground?: T;
        hoverColor?: T;
        currentPage?: T;
        totalPages?: T;
        baseUrl?: T;
        pages?:
          | T
          | {
              pageNumber?: T;
              url?: T;
              isCurrent?: T;
              hideOnPhone?: T;
              id?: T;
            };
        nextButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
        prevButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
      };
  globalStyling?:
    | T
    | {
        containerBackgroundColor?: T;
        containerMaxWidth?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        customCss?: T;
      };
  sectionOrder?:
    | T
    | {
        sectionType?: T;
        enabled?: T;
        customId?: T;
        customClass?: T;
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaKeywords?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MommyMakeoverGallery_select".
 */
export interface MommyMakeoverGallerySelect<T extends boolean = true> {
  componentName?: T;
  slug?: T;
  isActive?: T;
  heroSection?:
    | T
    | {
        title?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        breadcrumbTextColor?: T;
        breadcrumbLinkColor?: T;
        breadcrumbHoverColor?: T;
      };
  dropdownSection?:
    | T
    | {
        backgroundColor?: T;
        selectedItemLabel?: T;
        dropdownItems?:
          | T
          | {
              label?: T;
              url?: T;
              isActive?: T;
              id?: T;
            };
        backButton?:
          | T
          | {
              label?: T;
              url?: T;
              iconClass?: T;
            };
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        borderColor?: T;
      };
  gallerySection?:
    | T
    | {
        backgroundColor?: T;
        sectionPadding?: T;
        galleryItems?:
          | T
          | {
              itemUrl?: T;
              patientId?: T;
              beforeImage?:
                | T
                | {
                    image?: T;
                    imageUrl?: T;
                    altText?: T;
                    width?: T;
                    height?: T;
                  };
              afterImage?:
                | T
                | {
                    image?: T;
                    imageUrl?: T;
                    altText?: T;
                    width?: T;
                    height?: T;
                  };
              customCss?: T;
              id?: T;
            };
        itemBackgroundColor?: T;
        itemBorderColor?: T;
        itemHoverEffect?: T;
      };
  paginationSection?:
    | T
    | {
        enabled?: T;
        backgroundColor?: T;
        textColor?: T;
        activePageColor?: T;
        activePageBackground?: T;
        hoverColor?: T;
        currentPage?: T;
        totalPages?: T;
        baseUrl?: T;
        pages?:
          | T
          | {
              pageNumber?: T;
              url?: T;
              isCurrent?: T;
              hideOnPhone?: T;
              id?: T;
            };
        nextButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
        prevButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
      };
  globalStyling?:
    | T
    | {
        containerBackgroundColor?: T;
        containerMaxWidth?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        customCss?: T;
      };
  sectionOrder?:
    | T
    | {
        sectionType?: T;
        enabled?: T;
        customId?: T;
        customClass?: T;
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaKeywords?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LiposuctionGallery_select".
 */
export interface LiposuctionGallerySelect<T extends boolean = true> {
  componentName?: T;
  slug?: T;
  isActive?: T;
  heroSection?:
    | T
    | {
        title?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        breadcrumbTextColor?: T;
        breadcrumbLinkColor?: T;
        breadcrumbHoverColor?: T;
      };
  dropdownSection?:
    | T
    | {
        backgroundColor?: T;
        selectedItemLabel?: T;
        dropdownItems?:
          | T
          | {
              label?: T;
              url?: T;
              isActive?: T;
              id?: T;
            };
        backButton?:
          | T
          | {
              label?: T;
              url?: T;
              iconClass?: T;
            };
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        borderColor?: T;
      };
  gallerySection?:
    | T
    | {
        backgroundColor?: T;
        sectionPadding?: T;
        galleryItems?:
          | T
          | {
              itemUrl?: T;
              patientId?: T;
              beforeImage?:
                | T
                | {
                    image?: T;
                    imageUrl?: T;
                    altText?: T;
                    width?: T;
                    height?: T;
                  };
              afterImage?:
                | T
                | {
                    image?: T;
                    imageUrl?: T;
                    altText?: T;
                    width?: T;
                    height?: T;
                  };
              customCss?: T;
              id?: T;
            };
        itemBackgroundColor?: T;
        itemBorderColor?: T;
        itemHoverEffect?: T;
      };
  paginationSection?:
    | T
    | {
        enabled?: T;
        backgroundColor?: T;
        textColor?: T;
        activePageColor?: T;
        activePageBackground?: T;
        hoverColor?: T;
        currentPage?: T;
        totalPages?: T;
        baseUrl?: T;
        pages?:
          | T
          | {
              pageNumber?: T;
              url?: T;
              isCurrent?: T;
              hideOnPhone?: T;
              id?: T;
            };
        nextButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
        prevButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
      };
  globalStyling?:
    | T
    | {
        containerBackgroundColor?: T;
        containerMaxWidth?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        customCss?: T;
      };
  sectionOrder?:
    | T
    | {
        sectionType?: T;
        enabled?: T;
        customId?: T;
        customClass?: T;
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaKeywords?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BreastAugmentationGallery_select".
 */
export interface BreastAugmentationGallerySelect<T extends boolean = true> {
  componentName?: T;
  slug?: T;
  isActive?: T;
  heroSection?:
    | T
    | {
        title?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        breadcrumbTextColor?: T;
        breadcrumbLinkColor?: T;
        breadcrumbHoverColor?: T;
      };
  dropdownSection?:
    | T
    | {
        backgroundColor?: T;
        selectedItemLabel?: T;
        dropdownItems?:
          | T
          | {
              label?: T;
              url?: T;
              isActive?: T;
              id?: T;
            };
        backButton?:
          | T
          | {
              label?: T;
              url?: T;
              iconClass?: T;
            };
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        borderColor?: T;
      };
  gallerySection?:
    | T
    | {
        backgroundColor?: T;
        sectionPadding?: T;
        galleryItems?:
          | T
          | {
              itemUrl?: T;
              patientId?: T;
              beforeImage?:
                | T
                | {
                    image?: T;
                    imageUrl?: T;
                    altText?: T;
                    width?: T;
                    height?: T;
                  };
              afterImage?:
                | T
                | {
                    image?: T;
                    imageUrl?: T;
                    altText?: T;
                    width?: T;
                    height?: T;
                  };
              customCss?: T;
              id?: T;
            };
        itemBackgroundColor?: T;
        itemBorderColor?: T;
        itemHoverEffect?: T;
      };
  paginationSection?:
    | T
    | {
        enabled?: T;
        backgroundColor?: T;
        textColor?: T;
        activePageColor?: T;
        activePageBackground?: T;
        hoverColor?: T;
        currentPage?: T;
        totalPages?: T;
        baseUrl?: T;
        pages?:
          | T
          | {
              pageNumber?: T;
              url?: T;
              isCurrent?: T;
              hideOnPhone?: T;
              id?: T;
            };
        nextButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
        prevButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
      };
  globalStyling?:
    | T
    | {
        containerBackgroundColor?: T;
        containerMaxWidth?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        customCss?: T;
      };
  sectionOrder?:
    | T
    | {
        sectionType?: T;
        enabled?: T;
        customId?: T;
        customClass?: T;
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaKeywords?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BreastLiftGallery_select".
 */
export interface BreastLiftGallerySelect<T extends boolean = true> {
  componentName?: T;
  slug?: T;
  isActive?: T;
  heroSection?:
    | T
    | {
        title?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        breadcrumbTextColor?: T;
        breadcrumbLinkColor?: T;
        breadcrumbHoverColor?: T;
      };
  dropdownSection?:
    | T
    | {
        backgroundColor?: T;
        selectedItemLabel?: T;
        dropdownItems?:
          | T
          | {
              label?: T;
              url?: T;
              isActive?: T;
              id?: T;
            };
        backButton?:
          | T
          | {
              label?: T;
              url?: T;
              iconClass?: T;
            };
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        borderColor?: T;
      };
  gallerySection?:
    | T
    | {
        backgroundColor?: T;
        sectionPadding?: T;
        galleryItems?:
          | T
          | {
              itemUrl?: T;
              patientId?: T;
              beforeImage?:
                | T
                | {
                    image?: T;
                    imageUrl?: T;
                    altText?: T;
                    width?: T;
                    height?: T;
                  };
              afterImage?:
                | T
                | {
                    image?: T;
                    imageUrl?: T;
                    altText?: T;
                    width?: T;
                    height?: T;
                  };
              customCss?: T;
              id?: T;
            };
        itemBackgroundColor?: T;
        itemBorderColor?: T;
        itemHoverEffect?: T;
      };
  paginationSection?:
    | T
    | {
        enabled?: T;
        backgroundColor?: T;
        textColor?: T;
        activePageColor?: T;
        activePageBackground?: T;
        hoverColor?: T;
        currentPage?: T;
        totalPages?: T;
        baseUrl?: T;
        pages?:
          | T
          | {
              pageNumber?: T;
              url?: T;
              isCurrent?: T;
              hideOnPhone?: T;
              id?: T;
            };
        nextButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
        prevButton?:
          | T
          | {
              label?: T;
              url?: T;
              enabled?: T;
            };
      };
  globalStyling?:
    | T
    | {
        containerBackgroundColor?: T;
        containerMaxWidth?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        customCss?: T;
      };
  sectionOrder?:
    | T
    | {
        sectionType?: T;
        enabled?: T;
        customId?: T;
        customClass?: T;
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaKeywords?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "medical-spa-component_select".
 */
export interface MedicalSpaComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  indexListSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        hoverColor?: T;
        items?:
          | T
          | {
              label?: T;
              url?: T;
              title?: T;
              ariaLabel?: T;
              id?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        subheading?: T;
        content?: T;
        headingColor?: T;
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              title?: T;
              content?: T;
              id?: T;
            };
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        boxes?:
          | T
          | {
              heading?: T;
              linkText?: T;
              linkUrl?: T;
              content?: T;
              customBackgroundColor?: T;
              customTextColor?: T;
              id?: T;
            };
      };
  columnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        mediaPosition?: T;
        heading?: T;
        headingLink?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        subheading?: T;
        headingLink?: T;
        content?: T;
      };
  pageIndexSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        cardBackgroundColor?: T;
        cardTextColor?: T;
        cardHoverColor?: T;
        cards?:
          | T
          | {
              title?: T;
              url?: T;
              titleAttribute?: T;
              ariaLabel?: T;
              labelText?: T;
              image?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    alt?: T;
                  };
              customBackgroundColor?: T;
              customTextColor?: T;
              id?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "medical-spa-injectables-component_select".
 */
export interface MedicalSpaInjectablesComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  indexStaticSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        containerBackgroundColor?: T;
        cardBackgroundColor?: T;
        cardTextColor?: T;
        cardHoverColor?: T;
        overlayBackgroundColor?: T;
        overlayTextColor?: T;
        cards?:
          | T
          | {
              title?: T;
              url?: T;
              overlayLabel?: T;
              image?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    large?: T;
                    alt?: T;
                  };
              customBackgroundColor?: T;
              customTextColor?: T;
              customHoverColor?: T;
              customOverlayBackgroundColor?: T;
              customOverlayTextColor?: T;
              id?: T;
            };
        gridLayout?: T;
        cardSpacing?: T;
        cardBorderRadius?: T;
        cardShadow?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        cardHoverAnimation?: T;
        transitionDuration?: T;
        transitionEasing?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
      };
  accessibilitySettings?:
    | T
    | {
        ariaLabels?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "botox-page-component_select".
 */
export interface BotoxPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        description?: T;
        descriptionColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  columnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        mediaPosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              content?: T;
              id?: T;
            };
      };
  videoSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        heading?: T;
        headingColor?: T;
        videoUrl?: T;
        thumbnailImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
        linkText?: T;
        ariaLabel?: T;
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        imagePosition?: T;
        verticalAlignment?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        content?: T;
      };
  columnSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        headingAlignment?: T;
        columns?:
          | T
          | {
              content?: T;
              bulletPoints?:
                | T
                | {
                    text?: T;
                    id?: T;
                  };
              id?: T;
            };
      };
  ctaGeneralSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingLink?: T;
        headingColor?: T;
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
      };
  columnSection3?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        mediaPosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  bannerSection3?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        content?: T;
      };
  columnSection4?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        mediaPosition?: T;
        heading?: T;
        headingColor?: T;
        locations?:
          | T
          | {
              label?: T;
              url?: T;
              id?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  faqSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        sidebarBackgroundColor?: T;
        heading?: T;
        headingColor?: T;
        subheading?: T;
        questions?:
          | T
          | {
              question?: T;
              answer?: T;
              id?: T;
            };
        questionColor?: T;
        answerColor?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        headingFontSize?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "dysport-page-component_select".
 */
export interface DysportPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        customClasses?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        description?: T;
        descriptionColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              buttonClasses?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        customClasses?: T;
        paddingBottom?: T;
        logo?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  columnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        customClasses?: T;
        marginBottom?: T;
        mediaPosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundColorClass?: T;
        textColor?: T;
        customClasses?: T;
        marginTop?: T;
        marginBottom?: T;
        imagePosition?: T;
        verticalAlignment?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  twoColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        customClasses?: T;
        heading?: T;
        headingColor?: T;
        leftColumn?:
          | T
          | {
              content?: T;
              animationClass?: T;
            };
        rightColumn?:
          | T
          | {
              content?: T;
              animationClass?: T;
            };
      };
  ctaGeneralSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundColorClass?: T;
        textColor?: T;
        customClasses?: T;
        marginTop?: T;
        marginBottom?: T;
        heading?: T;
        headingLink?: T;
        headingColor?: T;
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              buttonClasses?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        customClasses?: T;
        headingBefore?: T;
        headingColor?: T;
        contentBefore?: T;
        boxes?:
          | T
          | {
              heading?: T;
              content?: T;
              animationClass?: T;
              backgroundColor?: T;
              textColor?: T;
              id?: T;
            };
        contentAfter?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        headingFontSize?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        h3FontSize?: T;
        h3Color?: T;
        h3FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "dermal-fillers-page-component_select".
 */
export interface DermalFillersPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        customClasses?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        description?: T;
        descriptionColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              buttonClasses?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        customClasses?: T;
        paddingBottom?: T;
        logo?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundColorClass?: T;
        textColor?: T;
        customClasses?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        useColumnsLayout?: T;
        leftColumn?:
          | T
          | {
              content?: T;
            };
        rightColumn?:
          | T
          | {
              content?: T;
            };
      };
  columnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        customClasses?: T;
        marginTop?: T;
        marginBottom?: T;
        useVerticalAlign?: T;
        useTwoColumns?: T;
        leftColumn?:
          | T
          | {
              content?: T;
            };
        rightColumn?:
          | T
          | {
              content?: T;
            };
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundColorClass?: T;
        textColor?: T;
        customClasses?: T;
        marginTop?: T;
        marginBottom?: T;
        imagePosition?: T;
        verticalAlignment?: T;
        copyPadded?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        treatmentAreaLinks?:
          | T
          | {
              label?: T;
              url?: T;
              id?: T;
            };
        fillersList?:
          | T
          | {
              name?: T;
              id?: T;
            };
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        customClasses?: T;
        headingBefore?: T;
        headingColor?: T;
        contentBefore?: T;
        boxes?:
          | T
          | {
              heading?: T;
              content?: T;
              animationClass?: T;
              backgroundColor?: T;
              textColor?: T;
              id?: T;
            };
        contentAfter?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  columnSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        customClasses?: T;
        marginTop?: T;
        marginBottom?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundColorClass?: T;
        textColor?: T;
        customClasses?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  faqSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        sidebarBackgroundColor?: T;
        heading?: T;
        headingColor?: T;
        questions?:
          | T
          | {
              question?: T;
              answer?: T;
              id?: T;
            };
        questionColor?: T;
        answerColor?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        headingFontSize?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        h3FontSize?: T;
        h3Color?: T;
        h3FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
      };
  listStyles?:
    | T
    | {
        useColumnsLayout?: T;
        columnCount?: T;
        bulletColor?: T;
        listItemSpacing?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "juvederm-page-component_select".
 */
export interface JuvedermPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        description?: T;
        descriptionColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  columnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        mediaPosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        subheading?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              content?: T;
              id?: T;
            };
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        contentBefore?: T;
        boxes?:
          | T
          | {
              title?: T;
              content?: T;
              backgroundColor?: T;
              titleColor?: T;
              textColor?: T;
              id?: T;
            };
        contentAfter?: T;
        gridColumns?: T;
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        imagePosition?: T;
        verticalAlignment?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              text?: T;
              id?: T;
            };
        'after content'?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  twoColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        leftColumn?: T;
        leftColumnColor?: T;
        rightColumn?: T;
        rightColumnColor?: T;
        verticalAlign?: T;
      };
  columnSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        mediaPosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              text?: T;
              id?: T;
            };
        'after content'?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              target?: T;
              backgroundColor?: T;
              textColor?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  ctaGeneralSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingLink?: T;
        headingColor?: T;
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
      };
  faqSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        sidebarBackgroundColor?: T;
        heading?: T;
        headingColor?: T;
        subheading?: T;
        questions?:
          | T
          | {
              question?: T;
              answer?: T;
              id?: T;
            };
        questionColor?: T;
        answerColor?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        headingFontSize?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        h3FontSize?: T;
        h3Color?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "juvederm-volux-page-component_select".
 */
export interface JuvedermVoluxPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        description?: T;
        descriptionColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        headingAlignment?: T;
        columnLayout?: T;
        columns?:
          | T
          | {
              content?: T;
              id?: T;
            };
      };
  columnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        headingAlignment?: T;
        introContent?: T;
        bulletPoints?:
          | T
          | {
              content?: T;
              id?: T;
            };
        closingContent?: T;
        marginTop?: T;
        marginBottom?: T;
      };
  ctaGeneralSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingLink?: T;
        headingColor?: T;
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
        marginTop?: T;
        marginBottom?: T;
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        imagePosition?: T;
        verticalAlignment?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        marginTop?: T;
        marginTopTablet?: T;
        paddingTop?: T;
      };
  columnSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        marginTop?: T;
        marginBottom?: T;
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        introContent?: T;
        columnLayout?: T;
        columns?:
          | T
          | {
              content?: T;
              id?: T;
            };
      };
  twoColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        leftColumn?: T;
        leftColumnColor?: T;
        rightColumn?: T;
        rightColumnColor?: T;
        verticalAlign?: T;
        marginTop?: T;
        marginBottom?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        headingFontSize?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "restylane-page-component_select".
 */
export interface RestylanePageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        description?: T;
        descriptionColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        imagePosition?: T;
        verticalAlignment?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingAlignment?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              content?: T;
              id?: T;
            };
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        subheading?: T;
        boxes?:
          | T
          | {
              title?: T;
              content?: T;
              bulletPoints?:
                | T
                | {
                    text?: T;
                    id?: T;
                  };
              backgroundColor?: T;
              textColor?: T;
              id?: T;
            };
        layoutStyle?: T;
      };
  columnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        mediaPosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        locationColumns?:
          | T
          | {
              locations?:
                | T
                | {
                    name?: T;
                    url?: T;
                    id?: T;
                  };
              id?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingAlignment?: T;
        contentColumns?:
          | T
          | {
              content?: T;
              bulletPoints?:
                | T
                | {
                    text?: T;
                    id?: T;
                  };
              id?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        headingFontSize?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        h3FontSize?: T;
        h3Color?: T;
        h3FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "restylane-contour-page-component_select".
 */
export interface RestylaneContourPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        description?: T;
        descriptionColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerWidth?: T;
        layout?: T;
        logo?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        theme?: T;
        hideDivider?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingAlignment?: T;
        headingColor?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              text?: T;
              id?: T;
            };
        bottomContent?: T;
        columnLayout?: T;
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerWidth?: T;
        layoutOption?: T;
        heading?: T;
        headingColor?: T;
        subheading?: T;
        boxes?:
          | T
          | {
              title?: T;
              titleColor?: T;
              content?: T;
              backgroundColor?: T;
              textColor?: T;
              borderColor?: T;
              hoverBackgroundColor?: T;
              id?: T;
            };
        layoutStyle?: T;
        backgroundStyle?: T;
      };
  ctaGeneralSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerWidth?: T;
        marginTop?: T;
        marginBottom?: T;
        heading?: T;
        headingUrl?: T;
        headingColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              style?: T;
              backgroundColor?: T;
              textColor?: T;
            };
        mediaImage?:
          | T
          | {
              show?: T;
              mobile?: T;
              desktop?: T;
              alt?: T;
            };
      };
  faqSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerWidth?: T;
        mainTitle?: T;
        subtitle?: T;
        titleColor?: T;
        questions?:
          | T
          | {
              question?: T;
              answer?: T;
              questionColor?: T;
              answerColor?: T;
              id?: T;
            };
        sidebarBackgroundColor?: T;
        questionListBackgroundColor?: T;
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerWidth?: T;
        imagePosition?: T;
        verticalAlignment?: T;
        marginTop?: T;
        marginBottom?: T;
        contentPadding?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              openInNewTab?: T;
              style?: T;
            };
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              width?: T;
              height?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        headingFontSize?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        h3FontSize?: T;
        h3Color?: T;
        h3FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
        wowEnabled?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
        mobileStackEnabled?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cheek-fillers-page-component_select".
 */
export interface CheekFillersPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        description?: T;
        descriptionColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  beforeAfterSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        description?: T;
        patients?:
          | T
          | {
              image?:
                | T
                | {
                    mobile?: T;
                    desktop?: T;
                    alt?: T;
                  };
              linkUrl?: T;
              id?: T;
            };
        galleryButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        boxes?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              content?: T;
              backgroundColor?: T;
              id?: T;
            };
        columnLayout?: T;
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        headingAlignment?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              content?: T;
              id?: T;
            };
      };
  twoColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        subheading?: T;
        subheadingColor?: T;
        leftColumn?: T;
        rightColumn?: T;
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        imagePosition?: T;
        verticalAlignment?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        headingFontSize?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        h3FontSize?: T;
        h3Color?: T;
        h3FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lines-wrinkles-page-component_select".
 */
export interface LinesWrinklesPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        description?: T;
        descriptionColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  halfImageSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        imagePosition?: T;
        verticalAlignment?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  beforeAfterSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        patients?:
          | T
          | {
              image?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    alt?: T;
                  };
              linkUrl?: T;
              id?: T;
            };
        galleryButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        subheading?: T;
        subheadingColor?: T;
        headingAlignment?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              content?: T;
              id?: T;
            };
        closingContent?: T;
      };
  boxGridSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        headingBefore?: T;
        headingBeforeColor?: T;
        contentBefore?: T;
        boxes?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              content?: T;
              backgroundColor?: T;
              id?: T;
            };
        columnLayout?: T;
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        headingAlignment?: T;
        content?: T;
        contentAlignment?: T;
        bulletPoints?:
          | T
          | {
              content?: T;
              id?: T;
            };
      };
  boxGridSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        headingBefore?: T;
        headingBeforeColor?: T;
        boxes?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              content?: T;
              backgroundColor?: T;
              id?: T;
            };
        columnLayout?: T;
        widerBoxes?: T;
      };
  columnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        mediaPosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        headingFontSize?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        h3FontSize?: T;
        h3Color?: T;
        h3FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lip-fillers-page-component_select".
 */
export interface LipFillersPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        description?: T;
        descriptionColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        hideDivider?: T;
        darkTheme?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        smallHeading?: T;
        headingAlignment?: T;
        content?: T;
        columnLayout?: T;
        bulletPoints?:
          | T
          | {
              content?: T;
              id?: T;
            };
      };
  columnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        mediaPosition?: T;
        heading?: T;
        smallHeading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  ctaGeneralSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        thinStyle?: T;
        heading?: T;
        headingLink?: T;
        headingColor?: T;
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
      };
  ctaBeforeAfterSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        title?: T;
        smallTitle?: T;
        patients?:
          | T
          | {
              url?: T;
              image?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    alt?: T;
                  };
              id?: T;
            };
        viewMoreLink?:
          | T
          | {
              text?: T;
              url?: T;
              ariaLabel?: T;
            };
        sliderItemsToShow?: T;
      };
  columnSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              content?: T;
              id?: T;
            };
        columnLayout?: T;
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        imagePosition?: T;
        verticalAlignment?: T;
        heading?: T;
        smallHeading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  faqSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        sidebarBackgroundColor?: T;
        heading?: T;
        headingColor?: T;
        subheading?: T;
        questions?:
          | T
          | {
              question?: T;
              answer?: T;
              id?: T;
            };
        questionColor?: T;
        answerColor?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        headingFontSize?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "chin-fillers-page-component_select".
 */
export interface ChinFillersPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        description?: T;
        descriptionColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        paddingBottom?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  columnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        marginTop?: T;
        marginBottom?: T;
        mediaPosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        hideDivider?: T;
        darkTheme?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        columnLayout?: T;
        columns?:
          | T
          | {
              heading?: T;
              headingBreakDesktop?: T;
              content?: T;
              bulletPoints?:
                | T
                | {
                    text?: T;
                    id?: T;
                  };
              bulletColumnLayout?: T;
              id?: T;
            };
      };
  ctaBeforeAfterSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        title?: T;
        smallTitle?: T;
        patients?:
          | T
          | {
              url?: T;
              image?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    alt?: T;
                  };
              id?: T;
            };
        viewMoreLink?:
          | T
          | {
              text?: T;
              url?: T;
              ariaLabel?: T;
            };
        sliderItemsToShow?: T;
      };
  columnSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        marginTop?: T;
        marginBottom?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              content?: T;
              id?: T;
            };
        columnLayout?: T;
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        hideDivider?: T;
        darkTheme?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingAlignment?: T;
        columnLayout?: T;
        columns?:
          | T
          | {
              content?: T;
              id?: T;
            };
      };
  columnSection3?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        marginTop?: T;
        marginBottom?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              text?: T;
              id?: T;
            };
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        imagePosition?: T;
        verticalAlignment?: T;
        contentPadded?: T;
        marginTop?: T;
        marginBottom?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  columnSection4?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        marginTop?: T;
        marginBottom?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        headingFontSize?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "hand-rejuvenation-page-component_select".
 */
export interface HandRejuvenationPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        description?: T;
        descriptionColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        content?: T;
        hideDivider?: T;
      };
  columnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              text?: T;
              id?: T;
            };
        marginTop?: T;
        marginBottom?: T;
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        imagePosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        marginTop?: T;
        marginBottom?: T;
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        introContent?: T;
        boxes?:
          | T
          | {
              title?: T;
              content?: T;
              id?: T;
            };
        gridLayout?: T;
        paddingTop?: T;
      };
  columnSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        mediaPosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
        paddingTop?: T;
        marginBottom?: T;
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              text?: T;
              id?: T;
            };
        hideDivider?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        headingFontSize?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        h3FontSize?: T;
        h3Color?: T;
        h3FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "liquid-facelift-page-component_select".
 */
export interface LiquidFaceliftPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        description?: T;
        descriptionColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        headingSmallText?: T;
        content?: T;
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        imagePosition?: T;
        verticalAlignment?: T;
        heading?: T;
        headingColor?: T;
        headingBlockText?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        marginTop?: T;
        marginBottom?: T;
      };
  columnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        introContent?: T;
        facialAreas?:
          | T
          | {
              areaNumber?: T;
              description?: T;
              id?: T;
            };
        marginTop?: T;
        paddingBottom?: T;
      };
  ctaBeforeAfterSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        patients?:
          | T
          | {
              url?: T;
              image?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    alt?: T;
                  };
              id?: T;
            };
        sliderItemsCount?: T;
        viewGalleryButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              title?: T;
              ariaLabel?: T;
              backgroundColor?: T;
              textColor?: T;
            };
        marginTop?: T;
        marginBottom?: T;
      };
  ctaGeneralSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingLink?: T;
        headingColor?: T;
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
        layoutStyle?: T;
        marginTop?: T;
        marginBottom?: T;
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        headingBlockText?: T;
        introContent?: T;
        boxes?:
          | T
          | {
              title?: T;
              content?: T;
              id?: T;
            };
        gridLayout?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        headingFontSize?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        h3FontSize?: T;
        h3Color?: T;
        h3FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
        smallTextSize?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        whiteButtonBackground?: T;
        whiteButtonTextColor?: T;
        whiteButtonHoverBackground?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        fadeInUpDuration?: T;
        fadeInLeftDuration?: T;
        fadeInRightDuration?: T;
        animationEasing?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "liquid-rhinoplasty-page-component_select".
 */
export interface LiquidRhinoplastyPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        description?: T;
        descriptionColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        smallText?: T;
        content?: T;
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        imagePosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  ctaBeforeAfterSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        subheading?: T;
        patients?:
          | T
          | {
              image?: T;
              alt?: T;
              link?: T;
              id?: T;
            };
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              ariaLabel?: T;
            };
      };
  bannerSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        theme?: T;
        hideDivider?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              content?: T;
              id?: T;
            };
      };
  ctaGeneralSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingLink?: T;
        headingColor?: T;
        smallText?: T;
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        gridLayout?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        subheading?: T;
        boxes?:
          | T
          | {
              heading?: T;
              content?: T;
              backgroundColor?: T;
              textColor?: T;
              id?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        headingFontSize?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        h3FontSize?: T;
        h3Color?: T;
        h3FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "skinvive-page-component_select".
 */
export interface SkinvivePageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        description?: T;
        descriptionColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        paddingBottom?: T;
        width?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  columnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        mediaPosition?: T;
        marginBottom?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  bannerSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        theme?: T;
        hideDivider?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              text?: T;
              id?: T;
            };
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        imagePosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        theme?: T;
        gridLayout?: T;
        hasBackground?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        subheading?: T;
        boxes?:
          | T
          | {
              heading?: T;
              content?: T;
              backgroundColor?: T;
              textColor?: T;
              id?: T;
            };
      };
  officeSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        imagePosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        headingFontSize?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        h3FontSize?: T;
        h3Color?: T;
        h3FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "spa-services-page-component_select".
 */
export interface SpaServicesPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  servicesSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        containerClass?: T;
        serviceItems?:
          | T
          | {
              title?: T;
              url?: T;
              overlayText?: T;
              image?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    large?: T;
                    alt?: T;
                  };
              imageBackgroundColor?: T;
              overlayColor?: T;
              overlayBackgroundColor?: T;
              titleColor?: T;
              titleHoverColor?: T;
              id?: T;
            };
        itemsPerRow?: T;
        itemSpacing?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        headingFontSize?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        hoverTransitionDuration?: T;
        animationEasing?: T;
      };
  layoutSettings?:
    | T
    | {
        heroAlignment?: T;
        servicesGridGap?: T;
        serviceItemBorderRadius?: T;
        serviceItemShadow?: T;
        serviceItemHoverShadow?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileItemsPerRow?: T;
        tabletItemsPerRow?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
      };
  hoverEffects?:
    | T
    | {
        enableHoverEffects?: T;
        imageHoverScale?: T;
        imageHoverOpacity?: T;
        overlayHoverOpacity?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lash-extensions-page-component_select".
 */
export interface LashExtensionsPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        description?: T;
        descriptionColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              width?: T;
              height?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerWidth?: T;
        layout?: T;
        showViewport?: T;
        animationType?: T;
        logo?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        theme?: T;
        hideDivider?: T;
        backgroundStyle?: T;
        showViewport?: T;
        animationType?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingAlignment?: T;
        headingColor?: T;
        content?: T;
        columnLayout?: T;
        bottomContent?: T;
      };
  benefitsSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerWidth?: T;
        showViewport?: T;
        marginTop?: T;
        marginBottom?: T;
        heading?: T;
        headingColor?: T;
        introText?: T;
        benefits?:
          | T
          | {
              title?: T;
              description?: T;
              titleColor?: T;
              descriptionColor?: T;
              id?: T;
            };
        useColumnLayout?: T;
      };
  halfImageSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerWidth?: T;
        imagePosition?: T;
        verticalAlignment?: T;
        showViewport?: T;
        animationType?: T;
        backgroundStyle?: T;
        marginTop?: T;
        marginBottom?: T;
        contentPadding?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              style?: T;
            };
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              width?: T;
              height?: T;
            };
      };
  tailoredStylesSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerWidth?: T;
        showViewport?: T;
        marginTop?: T;
        marginBottom?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  ctaGeneralSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerWidth?: T;
        backgroundStyle?: T;
        showViewport?: T;
        animationType?: T;
        marginTop?: T;
        marginBottom?: T;
        heading?: T;
        headingUrl?: T;
        headingColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              style?: T;
              backgroundColor?: T;
              textColor?: T;
            };
        mediaImage?:
          | T
          | {
              show?: T;
              mobile?: T;
              desktop?: T;
              alt?: T;
            };
      };
  finalSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerWidth?: T;
        showViewport?: T;
        marginTop?: T;
        marginBottom?: T;
        heading?: T;
        headingColor?: T;
        introText?: T;
        reasons?:
          | T
          | {
              text?: T;
              textColor?: T;
              id?: T;
            };
        useColumnLayout?: T;
        closingText?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        h3FontSize?: T;
        h3Color?: T;
        h3FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
        wowEnabled?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
        mobileStackEnabled?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mens-services-page-component_select".
 */
export interface MensServicesPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        description?: T;
        descriptionColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        isDark?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              text?: T;
              id?: T;
            };
      };
  columnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        paddingTop?: T;
        paddingBottom?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        isDark?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        useColumnLayout?: T;
        bulletPoints?:
          | T
          | {
              text?: T;
              id?: T;
            };
      };
  columnSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        mediaPosition?: T;
        paddingTop?: T;
        paddingBottom?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              text?: T;
              id?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        imagePosition?: T;
        verticalAlignment?: T;
        paddingTop?: T;
        paddingBottom?: T;
        smallHeading?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        contentPadded?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        headingFontSize?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        whiteBackgroundColor?: T;
        whiteTextColor?: T;
        whiteHoverBackground?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
      };
  listStyles?:
    | T
    | {
        bulletColor?: T;
        bulletStyle?: T;
        useColumnsForBullets?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
        viewportAnimations?:
          | T
          | {
              section?: T;
              animationType?: T;
              id?: T;
            };
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
        mobileStackBehavior?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "micro-channeling-page-component_select".
 */
export interface MicroChannelingPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        description?: T;
        descriptionColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              width?: T;
              height?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerWidth?: T;
        layout?: T;
        showViewport?: T;
        animationType?: T;
        logo?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        theme?: T;
        hideDivider?: T;
        backgroundStyle?: T;
        showViewport?: T;
        animationType?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingAlignment?: T;
        headingColor?: T;
        columnLayout?: T;
        columns?:
          | T
          | {
              content?: T;
              listItems?:
                | T
                | {
                    item?: T;
                    id?: T;
                  };
              listStyle?: T;
              id?: T;
            };
      };
  columnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerWidth?: T;
        showViewport?: T;
        marginTop?: T;
        marginBottom?: T;
        heading?: T;
        headingColor?: T;
        headingAlignment?: T;
        columnLayout?: T;
        columns?:
          | T
          | {
              content?: T;
              id?: T;
            };
      };
  ctaGeneralSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerWidth?: T;
        backgroundStyle?: T;
        showViewport?: T;
        animationType?: T;
        marginTop?: T;
        marginBottom?: T;
        heading?: T;
        headingUrl?: T;
        headingColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              style?: T;
              backgroundColor?: T;
              textColor?: T;
            };
        mediaImage?:
          | T
          | {
              show?: T;
              mobile?: T;
              desktop?: T;
              alt?: T;
            };
      };
  columnMediaSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerWidth?: T;
        showViewport?: T;
        marginTop?: T;
        marginBottom?: T;
        imagePosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
              width?: T;
              height?: T;
            };
      };
  halfImageSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerWidth?: T;
        imagePosition?: T;
        verticalAlignment?: T;
        showViewport?: T;
        animationType?: T;
        backgroundStyle?: T;
        marginTop?: T;
        marginBottom?: T;
        contentPadding?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        listItems?:
          | T
          | {
              item?: T;
              id?: T;
            };
        listStyle?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              width?: T;
              height?: T;
            };
      };
  columnSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerWidth?: T;
        showViewport?: T;
        marginTop?: T;
        marginBottom?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        theme?: T;
        hideDivider?: T;
        backgroundStyle?: T;
        showViewport?: T;
        animationType?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingAlignment?: T;
        headingColor?: T;
        columnLayout?: T;
        columns?:
          | T
          | {
              content?: T;
              id?: T;
            };
      };
  columnMediaSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerWidth?: T;
        showViewport?: T;
        marginTop?: T;
        marginBottom?: T;
        imagePosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
              width?: T;
              height?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        h3FontSize?: T;
        h3Color?: T;
        h3FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
        wowEnabled?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
        mobileStackEnabled?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "permanent-makeup-page-component_select".
 */
export interface PermanentMakeupPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        description?: T;
        descriptionColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  columnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        mediaPosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  columnSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        layout?: T;
        heading?: T;
        headingColor?: T;
        smallText?: T;
        content?: T;
      };
  ctaGeneralSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingLink?: T;
        headingColor?: T;
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
      };
  columnSection3?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        boxes?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              content?: T;
              id?: T;
            };
      };
  columnSection4?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        imagePosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  columnSection5?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        mediaPosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              text?: T;
              id?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        headingFontSize?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "diamondglow-page-component_select".
 */
export interface DiamondglowPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        description?: T;
        descriptionColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  twoColumnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        leftColumnContent?: T;
        rightColumnContent?: T;
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        introText?: T;
        leftColumn?:
          | T
          | {
              heading?: T;
              bulletPoints?:
                | T
                | {
                    text?: T;
                    id?: T;
                  };
            };
        rightColumn?:
          | T
          | {
              heading?: T;
              bulletPoints?:
                | T
                | {
                    text?: T;
                    id?: T;
                  };
            };
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        imagePosition?: T;
        verticalAlignment?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  columnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        introContent?: T;
        layoutType?: T;
        leftColumnContent?: T;
        rightColumnContent?: T;
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        leftColumn?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              content?: T;
            };
        rightColumn?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              content?: T;
            };
      };
  columnSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        headingFontSize?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "skinMedicaPage_select".
 */
export interface SkinMedicaPageSelect<T extends boolean = true> {
  componentName?: T;
  slug?: T;
  isActive?: T;
  heroModule?:
    | T
    | {
        enabled?: T;
        className?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundTexture?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        breadcrumbLinkColor?: T;
        breadcrumbHoverColor?: T;
        title?: T;
        titleColor?: T;
        description?: T;
        descriptionColor?: T;
        ctaButton?:
          | T
          | {
              enabled?: T;
              label?: T;
              url?: T;
              className?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
        mediaImage?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
      };
  introModule?:
    | T
    | {
        enabled?: T;
        className?: T;
        backgroundColor?: T;
        textColor?: T;
        logo?: T;
        logoAltText?: T;
        title?: T;
        titleColor?: T;
        content?: T;
        contentColor?: T;
      };
  boxGridModule1?:
    | T
    | {
        enabled?: T;
        className?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
        boxes?:
          | T
          | {
              title?: T;
              titleColor?: T;
              content?: T;
              contentColor?: T;
              backgroundColor?: T;
              borderColor?: T;
              customClass?: T;
              id?: T;
            };
        boxBackgroundColor?: T;
        boxBorderColor?: T;
        boxHoverEffect?: T;
      };
  halfImageModule?:
    | T
    | {
        enabled?: T;
        className?: T;
        backgroundColor?: T;
        textColor?: T;
        imagePosition?: T;
        image?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
        title?: T;
        titleColor?: T;
        subtitle?: T;
        subtitleColor?: T;
        content?: T;
        contentColor?: T;
        listItems?:
          | T
          | {
              text?: T;
              textColor?: T;
              id?: T;
            };
        listStyle?: T;
      };
  bannerModule?:
    | T
    | {
        enabled?: T;
        className?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
        title?: T;
        titleColor?: T;
        content?: T;
        contentColor?: T;
        enableTwoColumns?: T;
        columnOneContent?: T;
        columnTwoContent?: T;
        listItems?:
          | T
          | {
              text?: T;
              textColor?: T;
              id?: T;
            };
        listColumns?: T;
        bottomContent?: T;
      };
  boxGridModule2?:
    | T
    | {
        enabled?: T;
        className?: T;
        backgroundColor?: T;
        textColor?: T;
        contentBefore?: T;
        contentBeforeColor?: T;
        boxes?:
          | T
          | {
              title?: T;
              titleColor?: T;
              content?: T;
              contentColor?: T;
              backgroundColor?: T;
              borderColor?: T;
              customClass?: T;
              id?: T;
            };
        contentAfter?: T;
        contentAfterColor?: T;
        boxBackgroundColor?: T;
        boxBorderColor?: T;
        boxHoverEffect?: T;
      };
  sectionOrder?:
    | T
    | {
        sectionType?: T;
        enabled?: T;
        customId?: T;
        customClass?: T;
        id?: T;
      };
  globalStyling?:
    | T
    | {
        containerBackgroundColor?: T;
        containerMaxWidth?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        accentColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        customCss?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaKeywords?: T;
        ogImage?: T;
        canonicalUrl?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "skincareServicesPage_select".
 */
export interface SkincareServicesPageSelect<T extends boolean = true> {
  componentName?: T;
  slug?: T;
  isActive?: T;
  heroModule?:
    | T
    | {
        enabled?: T;
        className?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundTexture?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        breadcrumbLinkColor?: T;
        breadcrumbHoverColor?: T;
        title?: T;
        titleColor?: T;
        description?: T;
        descriptionColor?: T;
        ctaButton?:
          | T
          | {
              enabled?: T;
              label?: T;
              url?: T;
              className?: T;
            };
        mediaImage?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
            };
      };
  introModule?:
    | T
    | {
        enabled?: T;
        className?: T;
        backgroundColor?: T;
        textColor?: T;
        logo?: T;
        logoAltText?: T;
        title?: T;
        titleColor?: T;
        content?: T;
        contentColor?: T;
      };
  doubleBannerModules?:
    | T
    | {
        enabled?: T;
        className?: T;
        rowClassName?: T;
        backgroundColor?: T;
        leftBanner?:
          | T
          | {
              title?: T;
              titleColor?: T;
              content?: T;
              contentColor?: T;
              image?:
                | T
                | {
                    desktop?: T;
                    tablet?: T;
                    mobile?: T;
                    smallMobile?: T;
                    altText?: T;
                  };
            };
        rightBanner?:
          | T
          | {
              title?: T;
              titleColor?: T;
              content?: T;
              contentColor?: T;
              image?:
                | T
                | {
                    desktop?: T;
                    tablet?: T;
                    mobile?: T;
                    smallMobile?: T;
                    altText?: T;
                  };
            };
        id?: T;
      };
  ctaGeneralModule?:
    | T
    | {
        enabled?: T;
        className?: T;
        backgroundColor?: T;
        textColor?: T;
        title?: T;
        titleUrl?: T;
        titleColor?: T;
        button?:
          | T
          | {
              label?: T;
              url?: T;
              className?: T;
            };
      };
  columnModules?:
    | T
    | {
        enabled?: T;
        className?: T;
        rowClassName?: T;
        backgroundColor?: T;
        textColor?: T;
        hasMedia?: T;
        mediaPosition?: T;
        title?: T;
        titleTag?: T;
        titleColor?: T;
        content?: T;
        contentColor?: T;
        listItems?:
          | T
          | {
              text?: T;
              textColor?: T;
              id?: T;
            };
        listColumns?: T;
        mediaImage?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
              smallMobile?: T;
              altText?: T;
              width?: T;
              height?: T;
            };
        id?: T;
      };
  sectionOrder?:
    | T
    | {
        sectionType?: T;
        enabled?: T;
        customId?: T;
        customClass?: T;
        id?: T;
      };
  globalStyling?:
    | T
    | {
        containerBackgroundColor?: T;
        containerMaxWidth?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        accentColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        customCss?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaKeywords?: T;
        ogImage?: T;
        canonicalUrl?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "weightloss-page-component_select".
 */
export interface WeightlossPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        description?: T;
        descriptionColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
              buttonClass?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  twoColumnImageSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        logo?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        leftColumnImage?: T;
        leftColumnImageAlt?: T;
        rightColumnImage?: T;
        rightColumnImageAlt?: T;
        animationClass?: T;
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        theme?: T;
        hideDivider?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        headingAlignment?: T;
        content?: T;
        contentLayout?: T;
      };
  videoSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        heading?: T;
        headingColor?: T;
        videoUrl?: T;
        videoThumbnail?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
        ariaLabel?: T;
        animationClass?: T;
      };
  halfImageSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        imagePosition?: T;
        verticalAlignment?: T;
        marginBottom?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              text?: T;
              id?: T;
            };
        bulletPointsLayout?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        animationClass?: T;
      };
  twoColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        paddingTop?: T;
        verticalAlign?: T;
        leftColumnContent?: T;
        rightColumnContent?: T;
        bulletPoints?:
          | T
          | {
              text?: T;
              id?: T;
            };
        bulletPointsLayout?: T;
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        theme?: T;
        hideDivider?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        headingAlignment?: T;
        bulletPoints?:
          | T
          | {
              text?: T;
              id?: T;
            };
        bulletPointsLayout?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        h3FontSize?: T;
        h3Color?: T;
        h3FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
        paragraphSpacing?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        whiteButtonBackground?: T;
        whiteButtonTextColor?: T;
        whiteButtonHoverBackground?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
        letterSpacing?: T;
        textTransform?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        fadeInUpDuration?: T;
        fadeInLeftDuration?: T;
        fadeInRightDuration?: T;
        animationEasing?: T;
        animationDelay?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
        structuredData?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        highContrastMode?: T;
        keyboardNavigationEnabled?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
        mobileStackSections?: T;
        hideElementsOnMobile?:
          | T
          | {
              section?: T;
              id?: T;
            };
      };
  performanceSettings?:
    | T
    | {
        lazyLoadImages?: T;
        optimizeImages?: T;
        imageQuality?: T;
        preloadCriticalAssets?: T;
        minifyCSS?: T;
        minifyJS?: T;
      };
  videoSettings?:
    | T
    | {
        autoplay?: T;
        showControls?: T;
        muted?: T;
        loop?: T;
        videoPlayerTheme?: T;
      };
  layoutSettings?:
    | T
    | {
        containerWidth?: T;
        sectionPadding?: T;
        contentAlignment?: T;
        gridGap?: T;
      };
  customCSS?:
    | T
    | {
        enabled?: T;
        css?: T;
      };
  customJS?:
    | T
    | {
        enabled?: T;
        js?: T;
        loadPosition?: T;
      };
  advancedSettings?:
    | T
    | {
        customClasses?: T;
        customAttributes?:
          | T
          | {
              attribute?: T;
              value?: T;
              id?: T;
            };
        dataAttributes?:
          | T
          | {
              name?: T;
              value?: T;
              id?: T;
            };
      };
  trackingSettings?:
    | T
    | {
        enableTracking?: T;
        googleAnalyticsId?: T;
        facebookPixelId?: T;
        customTrackingCode?: T;
      };
  isActive?: T;
  version?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "semaglutide-injections-page-component_select".
 */
export interface SemaglutideInjectionsPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        description?: T;
        descriptionColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
              buttonClass?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        paddingBottom?: T;
        width?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        theme?: T;
        hideDivider?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              text?: T;
              id?: T;
            };
        bulletPointsLayout?: T;
      };
  videoSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        heading?: T;
        headingColor?: T;
        videoUrl?: T;
        videoThumbnail?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
        ariaLabel?: T;
        animationClass?: T;
      };
  halfImageSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        imagePosition?: T;
        marginBottom?: T;
        copyPadded?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              text?: T;
              id?: T;
            };
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        animationClass?: T;
      };
  columnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        marginBottom?: T;
        heading?: T;
        headingColor?: T;
        bulletPoints?:
          | T
          | {
              text?: T;
              id?: T;
            };
        bulletPointsLayout?: T;
      };
  ctaBeforeAfterSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        title?: T;
        titleColor?: T;
        patients?:
          | T
          | {
              url?: T;
              image?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    alt?: T;
                  };
              id?: T;
            };
        viewGalleryButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              ariaLabel?: T;
            };
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        theme?: T;
        gridLayout?: T;
        hasBackground?: T;
        heading?: T;
        headingColor?: T;
        subheading?: T;
        boxes?:
          | T
          | {
              heading?: T;
              content?: T;
              backgroundColor?: T;
              textColor?: T;
              id?: T;
            };
      };
  columnSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        hasMedia?: T;
        mediaPosition?: T;
        marginTop?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        h3FontSize?: T;
        h3Color?: T;
        h3FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
        paragraphSpacing?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        whiteButtonBackground?: T;
        whiteButtonTextColor?: T;
        whiteButtonHoverBackground?: T;
        viewMoreButtonBackground?: T;
        viewMoreButtonTextColor?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
        letterSpacing?: T;
        textTransform?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        fadeInUpDuration?: T;
        fadeInLeftDuration?: T;
        fadeInRightDuration?: T;
        animationEasing?: T;
        animationDelay?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
        structuredData?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        highContrastMode?: T;
        keyboardNavigationEnabled?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
        mobileStackSections?: T;
        hideElementsOnMobile?:
          | T
          | {
              section?: T;
              id?: T;
            };
      };
  performanceSettings?:
    | T
    | {
        lazyLoadImages?: T;
        optimizeImages?: T;
        imageQuality?: T;
        preloadCriticalAssets?: T;
        minifyCSS?: T;
        minifyJS?: T;
      };
  videoSettings?:
    | T
    | {
        autoplay?: T;
        showControls?: T;
        muted?: T;
        loop?: T;
        videoPlayerTheme?: T;
      };
  layoutSettings?:
    | T
    | {
        containerWidth?: T;
        sectionPadding?: T;
        contentAlignment?: T;
        gridGap?: T;
      };
  customCSS?:
    | T
    | {
        enabled?: T;
        css?: T;
      };
  customJS?:
    | T
    | {
        enabled?: T;
        js?: T;
        loadPosition?: T;
      };
  advancedSettings?:
    | T
    | {
        customClasses?: T;
        customAttributes?:
          | T
          | {
              attribute?: T;
              value?: T;
              id?: T;
            };
        dataAttributes?:
          | T
          | {
              name?: T;
              value?: T;
              id?: T;
            };
      };
  trackingSettings?:
    | T
    | {
        enableTracking?: T;
        googleAnalyticsId?: T;
        facebookPixelId?: T;
        customTrackingCode?: T;
      };
  isActive?: T;
  version?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "specials-rewards-page-component_select".
 */
export interface SpecialsRewardsPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  indexListSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        hoverBackgroundColor?: T;
        hoverTextColor?: T;
        navigationItems?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
      };
  indexCardsSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        cardBackgroundColor?: T;
        cardHoverBackgroundColor?: T;
        titleColor?: T;
        overlayTextColor?: T;
        overlayBackgroundColor?: T;
        cards?:
          | T
          | {
              title?: T;
              url?: T;
              ariaLabel?: T;
              overlayText?: T;
              image?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    alt?: T;
                  };
              id?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
      };
  cardStyles?:
    | T
    | {
        borderRadius?: T;
        boxShadow?: T;
        hoverBoxShadow?: T;
        padding?: T;
        imageAspectRatio?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        hoverTransitionDuration?: T;
        animationEasing?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
        mobileCardColumns?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "specials-page-component_select".
 */
export interface SpecialsPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        className?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        className?: T;
        backgroundColor?: T;
        textColor?: T;
        paddingBottom?: T;
        logo?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        className?: T;
        backgroundColor?: T;
        textColor?: T;
        textAlign?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  columnSection1?:
    | T
    | {
        show?: T;
        className?: T;
        backgroundColor?: T;
        textAlign?: T;
        columns?:
          | T
          | {
              columnWidth?: T;
              content?: T;
              image?:
                | T
                | {
                    url?: T;
                    width?: T;
                    height?: T;
                    alt?: T;
                  };
              id?: T;
            };
      };
  columnSection2?:
    | T
    | {
        show?: T;
        className?: T;
        backgroundColor?: T;
        textAlign?: T;
        columns?:
          | T
          | {
              columnWidth?: T;
              content?: T;
              image?:
                | T
                | {
                    url?: T;
                    width?: T;
                    height?: T;
                    alt?: T;
                  };
              id?: T;
            };
      };
  contactFormSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        formSettings?:
          | T
          | {
              formId?: T;
              formAction?: T;
              redirectUrl?: T;
              emailSubject?: T;
            };
        formFields?:
          | T
          | {
              fieldType?: T;
              fieldName?: T;
              fieldId?: T;
              label?: T;
              placeholder?: T;
              required?: T;
              defaultValue?: T;
              columnClass?: T;
              additionalClasses?: T;
              selectOptions?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              validationMessage?: T;
              id?: T;
            };
        buttonText?: T;
        buttonBackgroundColor?: T;
        buttonTextColor?: T;
        buttonHoverBackgroundColor?: T;
        privacyNotice?: T;
        enableRecaptcha?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
        paragraphSpacing?: T;
      };
  formStyles?:
    | T
    | {
        inputBackgroundColor?: T;
        inputTextColor?: T;
        inputBorderColor?: T;
        inputBorderRadius?: T;
        inputPadding?: T;
        labelColor?: T;
        labelFontSize?: T;
        labelFontWeight?: T;
        errorColor?: T;
        focusBorderColor?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
        disabledBackgroundColor?: T;
        disabledTextColor?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
        enableWowAnimations?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
        structuredData?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
        keyboardNavigationEnabled?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
        mobileStackSections?: T;
        mobileHideElements?: T;
      };
  advancedSettings?:
    | T
    | {
        customCSS?: T;
        customJS?: T;
        dataAttributes?:
          | T
          | {
              attribute?: T;
              value?: T;
              targetSection?: T;
              id?: T;
            };
        lazyLoadImages?: T;
        enableCaching?: T;
      };
  integrationSettings?:
    | T
    | {
        googleAnalyticsId?: T;
        facebookPixelId?: T;
        recaptchaSiteKey?: T;
        recaptchaSecretKey?: T;
        marketingAutomationTags?:
          | T
          | {
              platform?: T;
              tagCode?: T;
              id?: T;
            };
      };
  performanceSettings?:
    | T
    | {
        imageOptimization?: T;
        imageQuality?: T;
        imageFormat?: T;
        minifyCSS?: T;
        minifyJS?: T;
        deferNonCriticalCSS?: T;
        preloadCriticalAssets?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "alle-rewards-page-component_select".
 */
export interface AlleRewardsPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        className?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        className?: T;
        backgroundColor?: T;
        textColor?: T;
        paddingBottom?: T;
        logo?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        content?: T;
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        className?: T;
        backgroundColor?: T;
        textColor?: T;
        imagePosition?: T;
        verticalAlignment?: T;
        marginBottom?: T;
        copyPadding?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  columnSection1?:
    | T
    | {
        show?: T;
        className?: T;
        backgroundColor?: T;
        textColor?: T;
        mediaPosition?: T;
        marginBottom?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              desktop?: T;
              alt?: T;
              width?: T;
              height?: T;
            };
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        className?: T;
        backgroundColor?: T;
        textColor?: T;
        textAlign?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        content?: T;
        contentImage?:
          | T
          | {
              url?: T;
              alt?: T;
              width?: T;
              height?: T;
            };
      };
  columnSection2?:
    | T
    | {
        show?: T;
        className?: T;
        backgroundColor?: T;
        textColor?: T;
        mediaPosition?: T;
        marginTop?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              desktop?: T;
              alt?: T;
              width?: T;
              height?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        h3FontSize?: T;
        h3Color?: T;
        h3FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
        paragraphSpacing?: T;
        listStyleType?: T;
        listMarginLeft?: T;
      };
  layoutSettings?:
    | T
    | {
        halfImageContentWidth?: T;
        columnGap?: T;
        rowGap?: T;
        imageObjectFit?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        fadeInDelay?: T;
        slideInDuration?: T;
        animationEasing?: T;
        enableWowAnimations?: T;
        wowOffset?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
        structuredData?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
        keyboardNavigationEnabled?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
        mobileStackSections?: T;
        mobileImageHeight?: T;
        mobileHideElements?: T;
      };
  advancedSettings?:
    | T
    | {
        customCSS?: T;
        customJS?: T;
        dataAttributes?:
          | T
          | {
              attribute?: T;
              value?: T;
              targetSection?: T;
              id?: T;
            };
        lazyLoadImages?: T;
        enableCaching?: T;
        preloadImages?: T;
      };
  integrationSettings?:
    | T
    | {
        googleAnalyticsId?: T;
        facebookPixelId?: T;
        alleTrackingEnabled?: T;
        alleTrackingCode?: T;
        marketingAutomationTags?:
          | T
          | {
              platform?: T;
              tagCode?: T;
              id?: T;
            };
        conversionTrackingEnabled?: T;
      };
  performanceSettings?:
    | T
    | {
        imageOptimization?: T;
        imageQuality?: T;
        imageFormat?: T;
        responsiveImageSizes?: T;
        minifyCSS?: T;
        minifyJS?: T;
        deferNonCriticalCSS?: T;
        preloadCriticalAssets?: T;
        enableCDN?: T;
        cdnUrl?: T;
      };
  contentSettings?:
    | T
    | {
        showRegisteredTrademarks?: T;
        trademarkedTerms?:
          | T
          | {
              term?: T;
              id?: T;
            };
        phoneNumberFormat?: T;
        defaultPhoneNumber?: T;
        externalLinksOpenNewTab?: T;
      };
  brandSettings?:
    | T
    | {
        alleLogoDisplay?: T;
        alleLogo?: T;
        alleLogoAlt?: T;
        brandColors?:
          | T
          | {
              allePrimary?: T;
              alleSecondary?: T;
              alleAccent?: T;
            };
      };
  ctaSettings?:
    | T
    | {
        enableGlobalCTA?: T;
        globalCTAText?: T;
        globalCTAUrl?: T;
        globalCTAPosition?: T;
        ctaBackgroundColor?: T;
        ctaTextColor?: T;
        ctaHoverBackgroundColor?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "aspire-rewards-page-component_select".
 */
export interface AspireRewardsPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        className?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        className?: T;
        backgroundColor?: T;
        textColor?: T;
        paddingBottom?: T;
        logo?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        className?: T;
        backgroundColor?: T;
        textColor?: T;
        imagePosition?: T;
        verticalAlignment?: T;
        marginBottom?: T;
        copyPadding?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        productLinks?:
          | T
          | {
              name?: T;
              url?: T;
              openInNewTab?: T;
              id?: T;
            };
        listStyle?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        className?: T;
        backgroundColor?: T;
        textColor?: T;
        boxBackgroundColor?: T;
        boxTextColor?: T;
        boxHoverBackgroundColor?: T;
        numberOfColumns?: T;
        enableStacking?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        boxes?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              content?: T;
              icon?: T;
              iconAlt?: T;
              link?:
                | T
                | {
                    url?: T;
                    text?: T;
                    openInNewTab?: T;
                  };
              customBackgroundColor?: T;
              id?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
        paragraphSpacing?: T;
        listStyleType?: T;
        listMarginLeft?: T;
      };
  boxGridStyles?:
    | T
    | {
        boxPadding?: T;
        boxBorderRadius?: T;
        boxBorder?: T;
        boxShadow?: T;
        boxHoverShadow?: T;
        boxGap?: T;
        boxMinHeight?: T;
        boxTextAlign?: T;
      };
  layoutSettings?:
    | T
    | {
        halfImageContentWidth?: T;
        columnGap?: T;
        rowGap?: T;
        imageObjectFit?: T;
        widerLayout?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        fadeInDelay?: T;
        fadeLeftDuration?: T;
        animationEasing?: T;
        enableWowAnimations?: T;
        wowOffset?: T;
        staggerBoxAnimations?: T;
        boxAnimationDelay?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
        structuredData?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
        keyboardNavigationEnabled?: T;
        linkIndicators?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
        mobileStackSections?: T;
        mobileBoxColumns?: T;
        tabletBoxColumns?: T;
        mobileImageHeight?: T;
        mobileHideElements?: T;
      };
  advancedSettings?:
    | T
    | {
        customCSS?: T;
        customJS?: T;
        dataAttributes?:
          | T
          | {
              attribute?: T;
              value?: T;
              targetSection?: T;
              id?: T;
            };
        lazyLoadImages?: T;
        enableCaching?: T;
        preloadImages?: T;
        responsiveMargins?:
          | T
          | {
              desktopMargin?: T;
              tabletMargin?: T;
              mobileMargin?: T;
            };
      };
  integrationSettings?:
    | T
    | {
        googleAnalyticsId?: T;
        facebookPixelId?: T;
        aspireTrackingEnabled?: T;
        aspireTrackingCode?: T;
        galdermaTrackingEnabled?: T;
        marketingAutomationTags?:
          | T
          | {
              platform?: T;
              tagCode?: T;
              id?: T;
            };
        conversionTrackingEnabled?: T;
        conversionGoals?:
          | T
          | {
              goalName?: T;
              goalTrigger?: T;
              goalValue?: T;
              id?: T;
            };
      };
  performanceSettings?:
    | T
    | {
        imageOptimization?: T;
        imageQuality?: T;
        imageFormat?: T;
        responsiveImageSizes?: T;
        minifyCSS?: T;
        minifyJS?: T;
        deferNonCriticalCSS?: T;
        preloadCriticalAssets?: T;
        enableCDN?: T;
        cdnUrl?: T;
        enableBrotliCompression?: T;
      };
  contentSettings?:
    | T
    | {
        showRegisteredTrademarks?: T;
        trademarkedTerms?:
          | T
          | {
              term?: T;
              id?: T;
            };
        externalLinksOpenNewTab?: T;
        addNoOpenerToExternalLinks?: T;
        enableRichSnippets?: T;
      };
  brandSettings?:
    | T
    | {
        aspireLogoDisplay?: T;
        aspireLogo?: T;
        aspireLogoAlt?: T;
        galdermaLogoDisplay?: T;
        galdermaLogo?: T;
        galdermaLogoAlt?: T;
        brandColors?:
          | T
          | {
              aspirePrimary?: T;
              aspireSecondary?: T;
              galdermaBlue?: T;
            };
      };
  ctaSettings?:
    | T
    | {
        enableGlobalCTA?: T;
        globalCTAText?: T;
        globalCTAUrl?: T;
        globalCTAPosition?: T;
        ctaBackgroundColor?: T;
        ctaTextColor?: T;
        ctaHoverBackgroundColor?: T;
        ctaIcon?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gift-cards-page-component_select".
 */
export interface GiftCardsPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        breadcrumbTextColor?: T;
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        layoutStyle?: T;
      };
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        paddingTop?: T;
        paddingBottom?: T;
        containerWidth?: T;
        logo?: T;
        logoWidth?: T;
        logoHeight?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        headingFontSize?: T;
        content?: T;
        textAlign?: T;
        animationClass?: T;
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        imagePosition?: T;
        verticalAlignment?: T;
        animationClass?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              imageWidth?: T;
              imageHeight?: T;
            };
        heading?: T;
        headingColor?: T;
        headingFontSize?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              text?: T;
              textColor?: T;
              id?: T;
            };
        bulletPointColor?: T;
        copyAlignment?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        headingFontSize?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h1LineHeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        h2LineHeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
        bodyFontWeight?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        enableViewportAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
        animationDelay?: T;
      };
  lazyLoadingSettings?:
    | T
    | {
        enableLazyLoading?: T;
        lazyLoadingStrategy?: T;
        placeholderImage?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
        structuredData?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
        headingHierarchy?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        desktopBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
        mobileStackBehavior?: T;
      };
  imageOptimizationSettings?:
    | T
    | {
        enableAutoFormat?: T;
        enableCompression?: T;
        compressionQuality?: T;
        enableResponsiveImages?: T;
        retinaSupport?: T;
      };
  performanceSettings?:
    | T
    | {
        enablePreload?: T;
        preloadHeroImage?: T;
        deferNonCritical?: T;
        enableCaching?: T;
      };
  layoutSettings?:
    | T
    | {
        pageLayout?: T;
        contentMaxWidth?: T;
        rowSpacing?: T;
        columnGap?: T;
      };
  customCSS?:
    | T
    | {
        enableCustomCSS?: T;
        heroSectionCSS?: T;
        introSectionCSS?: T;
        halfImageSectionCSS?: T;
        globalCustomCSS?: T;
      };
  customJavaScript?:
    | T
    | {
        enableCustomJS?: T;
        headerScript?: T;
        footerScript?: T;
        onLoadScript?: T;
      };
  moduleClasses?:
    | T
    | {
        heroModuleClass?: T;
        introModuleClass?: T;
        halfImageModuleClass?: T;
      };
  dataAttributes?:
    | T
    | {
        heroDataAttributes?:
          | T
          | {
              attribute?: T;
              value?: T;
              id?: T;
            };
        introDataAttributes?:
          | T
          | {
              attribute?: T;
              value?: T;
              id?: T;
            };
        halfImageDataAttributes?:
          | T
          | {
              attribute?: T;
              value?: T;
              id?: T;
            };
      };
  apiConfiguration?:
    | T
    | {
        enableAPIKeys?: T;
        contentAPIKey?: T;
        analyticsTrackingID?: T;
        cdnBaseURL?: T;
      };
  responsiveBehavior?:
    | T
    | {
        mobileMenuStyle?: T;
        tabletLayout?: T;
        imageScaling?: T;
        mobileTextSize?: T;
      };
  pageMetadata?:
    | T
    | {
        pageID?: T;
        pageVersion?: T;
        author?: T;
        lastModifiedBy?: T;
        notes?: T;
      };
  schemaMarkup?:
    | T
    | {
        enableSchema?: T;
        schemaType?: T;
        businessName?: T;
        businessDescription?: T;
        customSchema?: T;
      };
  contentVariations?:
    | T
    | {
        enableVariations?: T;
        variationName?: T;
        variationPercentage?: T;
      };
  advancedSettings?:
    | T
    | {
        enableDebugMode?: T;
        customMainID?: T;
        enableSmoothScroll?: T;
        loadingStrategy?: T;
        cacheControl?: T;
      };
  isActive?: T;
  isDraft?: T;
  publishDate?: T;
  unpublishDate?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "medical-financing-page-component_select".
 */
export interface MedicalFinancingPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        breadcrumbTextColor?: T;
        titleFirstLine?: T;
        titleSecondLine?: T;
        titleBreakOnDesktop?: T;
        titleClass?: T;
        titleColor?: T;
        titleFontSize?: T;
        titleFontWeight?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              width?: T;
              height?: T;
            };
        layoutStyle?: T;
        moduleClass?: T;
      };
  twoColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        paddingTop?: T;
        paddingBottom?: T;
        containerWidth?: T;
        verticalAlign?: T;
        columnGap?: T;
        moduleClass?: T;
        leftColumn?:
          | T
          | {
              contentType?: T;
              image?: T;
              imageUrl?: T;
              imageAlt?: T;
              imageWidth?: T;
              imageHeight?: T;
              content?: T;
              htmlContent?: T;
              backgroundColor?: T;
              textColor?: T;
              textAlign?: T;
              animationClass?: T;
              customClass?: T;
            };
        rightColumn?:
          | T
          | {
              contentType?: T;
              heading?: T;
              headingColor?: T;
              headingFontSize?: T;
              headingFontWeight?: T;
              content?: T;
              image?: T;
              imageAlt?: T;
              htmlContent?: T;
              ctaButton?:
                | T
                | {
                    show?: T;
                    text?: T;
                    url?: T;
                    openInNewTab?: T;
                    rel?: T;
                    backgroundColor?: T;
                    textColor?: T;
                    hoverBackgroundColor?: T;
                    hoverTextColor?: T;
                    borderRadius?: T;
                    padding?: T;
                    fontSize?: T;
                    fontWeight?: T;
                    customClass?: T;
                  };
              backgroundColor?: T;
              textColor?: T;
              textAlign?: T;
              animationClass?: T;
              customClass?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        enableViewportAnimations?: T;
        fadeInDuration?: T;
        animationEasing?: T;
      };
  lazyLoadingSettings?:
    | T
    | {
        enableLazyLoading?: T;
        placeholderImage?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        canonicalUrl?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        desktopBreakpoint?: T;
      };
  dataAttributes?:
    | T
    | {
        heroDataAttributes?:
          | T
          | {
              attribute?: T;
              value?: T;
              id?: T;
            };
        twoColumnDataAttributes?:
          | T
          | {
              attribute?: T;
              value?: T;
              id?: T;
            };
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "training-page-component_select".
 */
export interface TrainingPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  introModule?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        animationClass?: T;
        logo?: T;
        logoWidth?: T;
        logoHeight?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        headingFontSize?: T;
        subheading?: T;
        subheadingColor?: T;
        content?: T;
        contentColor?: T;
      };
  boxGridModule?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        containerClass?: T;
        heading?: T;
        headingColor?: T;
        headingAlignment?: T;
        boxes?:
          | T
          | {
              title?: T;
              titleColor?: T;
              content?: T;
              contentColor?: T;
              backgroundColor?: T;
              borderColor?: T;
              animationClass?: T;
              animationDelay?: T;
              id?: T;
            };
        boxesPerRow?: T;
        boxSpacing?: T;
      };
  twoColumnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        columnLayout?: T;
        verticalAlignment?: T;
        leftColumn?:
          | T
          | {
              animationClass?: T;
              heading?: T;
              headingColor?: T;
              content?: T;
              contentColor?: T;
              ctaButton?:
                | T
                | {
                    show?: T;
                    text?: T;
                    url?: T;
                    openInNewTab?: T;
                    backgroundColor?: T;
                    textColor?: T;
                    hoverBackgroundColor?: T;
                    borderRadius?: T;
                  };
              image?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    alt?: T;
                  };
            };
        rightColumn?:
          | T
          | {
              animationClass?: T;
              heading?: T;
              headingColor?: T;
              content?: T;
              contentColor?: T;
              ctaButton?:
                | T
                | {
                    show?: T;
                    text?: T;
                    url?: T;
                    openInNewTab?: T;
                    backgroundColor?: T;
                    textColor?: T;
                    hoverBackgroundColor?: T;
                  };
              image?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    alt?: T;
                  };
            };
      };
  twoColumnSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        columnLayout?: T;
        verticalAlignment?: T;
        leftColumn?:
          | T
          | {
              animationClass?: T;
              heading?: T;
              headingColor?: T;
              content?: T;
              contentColor?: T;
              image?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    alt?: T;
                  };
            };
        rightColumn?:
          | T
          | {
              animationClass?: T;
              heading?: T;
              headingColor?: T;
              content?: T;
              contentColor?: T;
              image?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    alt?: T;
                  };
            };
      };
  singleColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        contentAlignment?: T;
        heading?: T;
        headingColor?: T;
        headingFontSize?: T;
        content?: T;
        contentColor?: T;
        quote?:
          | T
          | {
              show?: T;
              text?: T;
              textColor?: T;
              fontSize?: T;
              fontWeight?: T;
              attribution?: T;
              attributionColor?: T;
            };
        maxWidth?: T;
      };
  twoColumnSection3?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        columnLayout?: T;
        verticalAlignment?: T;
        leftColumn?:
          | T
          | {
              animationClass?: T;
              heading?: T;
              headingColor?: T;
              content?: T;
              contentColor?: T;
              ctaButton?:
                | T
                | {
                    show?: T;
                    text?: T;
                    url?: T;
                    openInNewTab?: T;
                    backgroundColor?: T;
                    textColor?: T;
                    hoverBackgroundColor?: T;
                  };
              image?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    alt?: T;
                  };
            };
        rightColumn?:
          | T
          | {
              animationClass?: T;
              heading?: T;
              headingColor?: T;
              content?: T;
              contentColor?: T;
              image?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    alt?: T;
                  };
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        headingFontSize?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h1LineHeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        h2LineHeight?: T;
        h3FontSize?: T;
        h3Color?: T;
        h3FontWeight?: T;
        h4FontSize?: T;
        h4Color?: T;
        h4FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
        bodyFontWeight?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        defaultHoverTextColor?: T;
        borderRadius?: T;
        borderWidth?: T;
        borderColor?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
        textTransform?: T;
        letterSpacing?: T;
        transition?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
        animationDelay?: T;
        customAnimationCSS?: T;
      };
  responsiveSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        desktopBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        tabletFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
        tabletSpacingAdjustment?: T;
        mobileContainerPadding?: T;
        tabletContainerPadding?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogTitle?: T;
        ogDescription?: T;
        ogImage?: T;
        twitterCard?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
        structuredData?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        skipToContentText?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        focusVisibleWidth?: T;
        focusVisibleStyle?: T;
        contrastMode?: T;
        reducedMotion?: T;
      };
  customCSS?:
    | T
    | {
        globalCSS?: T;
        mobileCSS?: T;
        tabletCSS?: T;
        desktopCSS?: T;
      };
  performanceSettings?:
    | T
    | {
        lazyLoadImages?: T;
        imageLoadingPriority?: T;
        preloadCriticalAssets?: T;
        enableImageOptimization?: T;
        enableCSSMinification?: T;
      };
  isActive?: T;
  version?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "program-details-component_select".
 */
export interface ProgramDetailsComponentSelect<T extends boolean = true> {
  componentName?: T;
  introModule?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        animationClass?: T;
        logo?: T;
        logoWidth?: T;
        logoHeight?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        headingFontSize?: T;
      };
  columnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        contentAlignment?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
        subheading?: T;
        subheadingColor?: T;
      };
  dividerModule?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        containerClass?: T;
        logo?: T;
        logoWidth?: T;
        logoHeight?: T;
        logoAlt?: T;
      };
  columnSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        contentAlignment?: T;
        heading?: T;
        headingColor?: T;
        description?: T;
        descriptionColor?: T;
        table?:
          | T
          | {
              borderColor?: T;
              headerBackgroundColor?: T;
              headerTextColor?: T;
              rowBackgroundColor?: T;
              rowTextColor?: T;
              alternateRowColor?: T;
              headers?:
                | T
                | {
                    label?: T;
                    width?: T;
                    id?: T;
                  };
              rows?:
                | T
                | {
                    programName?: T;
                    duration?: T;
                    tuition?: T;
                    included?: T;
                    id?: T;
                  };
            };
      };
  columnSection3?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        contentAlignment?: T;
        content?: T;
        contentColor?: T;
        fontSize?: T;
        fontWeight?: T;
      };
  twoColumnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        columnLayout?: T;
        verticalAlignment?: T;
        leftColumn?:
          | T
          | {
              animationClass?: T;
              heading?: T;
              headingColor?: T;
              highlights?:
                | T
                | {
                    title?: T;
                    titleColor?: T;
                    description?: T;
                    descriptionColor?: T;
                    id?: T;
                  };
              listStyle?: T;
            };
        rightColumn?:
          | T
          | {
              animationClass?: T;
              image?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    alt?: T;
                  };
            };
      };
  twoColumnSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        columnLayout?: T;
        verticalAlignment?: T;
        leftColumn?:
          | T
          | {
              animationClass?: T;
              image?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    alt?: T;
                  };
            };
        rightColumn?:
          | T
          | {
              animationClass?: T;
              heading?: T;
              headingColor?: T;
              programs?:
                | T
                | {
                    programTitle?: T;
                    programTitleColor?: T;
                    details?:
                      | T
                      | {
                          text?: T;
                          textColor?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              additionalInfo?: T;
              additionalInfoColor?: T;
            };
      };
  columnSection4?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        contentAlignment?: T;
        headings?:
          | T
          | {
              text?: T;
              textColor?: T;
              fontSize?: T;
              fontWeight?: T;
              isItalic?: T;
              id?: T;
            };
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              openInNewTab?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
              borderRadius?: T;
              padding?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h1LineHeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        h3FontSize?: T;
        h3Color?: T;
        h3FontWeight?: T;
        h4FontSize?: T;
        h4Color?: T;
        h4FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
        bodyFontWeight?: T;
      };
  tableStyles?:
    | T
    | {
        borderWidth?: T;
        borderColor?: T;
        borderStyle?: T;
        borderCollapse?: T;
        cellPadding?: T;
        headerFontWeight?: T;
        headerFontSize?: T;
        headerTextAlign?: T;
        cellTextAlign?: T;
        rowHoverColor?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        defaultHoverTextColor?: T;
        borderRadius?: T;
        borderWidth?: T;
        borderColor?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
        textTransform?: T;
        letterSpacing?: T;
        transition?: T;
        boxShadow?: T;
        hoverBoxShadow?: T;
      };
  listStyles?:
    | T
    | {
        bulletStyle?: T;
        bulletColor?: T;
        listItemSpacing?: T;
        listIndent?: T;
        nestedListIndent?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
        animationDelay?: T;
        customAnimationCSS?: T;
      };
  responsiveSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        desktopBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        tabletFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
        tabletSpacingAdjustment?: T;
        mobileContainerPadding?: T;
        tabletContainerPadding?: T;
        mobileTableDisplay?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogTitle?: T;
        ogDescription?: T;
        ogImage?: T;
        twitterCard?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
        structuredData?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        skipToContentText?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        focusVisibleWidth?: T;
        focusVisibleStyle?: T;
        contrastMode?: T;
        reducedMotion?: T;
        tableAccessibility?:
          | T
          | {
              includeTableCaption?: T;
              tableCaption?: T;
              tableSummary?: T;
            };
      };
  customCSS?:
    | T
    | {
        globalCSS?: T;
        mobileCSS?: T;
        tabletCSS?: T;
        desktopCSS?: T;
        tableCSS?: T;
      };
  performanceSettings?:
    | T
    | {
        lazyLoadImages?: T;
        imageLoadingPriority?: T;
        preloadCriticalAssets?: T;
        enableImageOptimization?: T;
        enableCSSMinification?: T;
      };
  dividerSettings?:
    | T
    | {
        dividerHeight?: T;
        dividerMargin?: T;
        showDividerLine?: T;
        dividerLineColor?: T;
        dividerLineWidth?: T;
        dividerLineStyle?: T;
      };
  isActive?: T;
  version?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "comprehensive-program-component_select".
 */
export interface ComprehensiveProgramComponentSelect<T extends boolean = true> {
  componentName?: T;
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        logo?: T;
        logoWidth?: T;
        logoHeight?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
      };
  durationSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        durationLabel?: T;
        durationValue?: T;
        destinationsLabel?: T;
        destinations?:
          | T
          | {
              location?: T;
              id?: T;
            };
        labelColor?: T;
        valueColor?: T;
      };
  twoColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        verticalAlign?: T;
        leftContent?: T;
        leftContentColor?: T;
        leftAnimation?: T;
        rightImage?:
          | T
          | {
              image?: T;
              alt?: T;
            };
        rightAnimation?: T;
      };
  threeColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        columns?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              bulletPoints?:
                | T
                | {
                    text?: T;
                    subBullets?:
                      | T
                      | {
                          text?: T;
                          nestedBullets?:
                            | T
                            | {
                                text?: T;
                                id?: T;
                              };
                          id?: T;
                        };
                    id?: T;
                  };
              animation?: T;
              id?: T;
            };
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        mainHeading?: T;
        mainHeadingColor?: T;
        boxes?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              content?: T;
              bulletPoints?:
                | T
                | {
                    text?: T;
                    subBullets?:
                      | T
                      | {
                          text?: T;
                          nestedBullets?:
                            | T
                            | {
                                text?: T;
                                id?: T;
                              };
                          id?: T;
                        };
                    id?: T;
                  };
              backgroundColor?: T;
              textColor?: T;
              animation?: T;
              id?: T;
            };
      };
  tuitionSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        heading?: T;
        headingColor?: T;
        priceText?: T;
        priceColor?: T;
        description?: T;
        descriptionColor?: T;
        additionalNotes?:
          | T
          | {
              text?: T;
              textColor?: T;
              id?: T;
            };
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              openInNewTab?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
              hoverTextColor?: T;
              className?: T;
            };
        centerAlign?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        defaultTextColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        h3FontSize?: T;
        h3Color?: T;
        h3FontWeight?: T;
        h4FontSize?: T;
        h4Color?: T;
        h4FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        defaultHoverTextColor?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
      };
  listStyles?:
    | T
    | {
        bulletColor?: T;
        bulletStyle?: T;
        listMarginLeft?: T;
        listItemSpacing?: T;
        nestedListIndent?: T;
      };
  imageSettings?:
    | T
    | {
        lazyLoading?: T;
        imageQuality?: T;
        autoFormat?: T;
        autoCompress?: T;
        responsiveImages?: T;
      };
  customCSS?:
    | T
    | {
        additionalCSS?: T;
        cssClasses?:
          | T
          | {
              section?: T;
              className?: T;
              id?: T;
            };
      };
  linkSettings?:
    | T
    | {
        defaultLinkTarget?: T;
        linkUnderline?: T;
        linkTransition?: T;
      };
  spacingSettings?:
    | T
    | {
        introSectionSpacing?: T;
        durationSectionSpacing?: T;
        twoColumnSectionSpacing?: T;
        threeColumnSectionSpacing?: T;
        boxGridSectionSpacing?: T;
        tuitionSectionSpacing?: T;
        elementSpacing?: T;
      };
  borderShadowSettings?:
    | T
    | {
        boxBorderRadius?: T;
        boxShadow?: T;
        boxHoverShadow?: T;
        imageBorderRadius?: T;
        imageShadow?: T;
        sectionBorder?: T;
      };
  columnWidthSettings?:
    | T
    | {
        twoColumnLeftWidth?: T;
        twoColumnRightWidth?: T;
        threeColumnWidth?: T;
        columnGap?: T;
      };
  headerSettings?:
    | T
    | {
        headingTextTransform?: T;
        headingLetterSpacing?: T;
        headingMarginBottom?: T;
        subheadingFontSize?: T;
        subheadingColor?: T;
      };
  hoverEffects?:
    | T
    | {
        enableBoxHover?: T;
        boxHoverTransform?: T;
        boxHoverTransition?: T;
        imageHoverEffect?: T;
        imageHoverOpacity?: T;
      };
  gridSettings?:
    | T
    | {
        boxGridColumns?: T;
        boxGridColumnsTablet?: T;
        boxGridColumnsMobile?: T;
        boxGridGap?: T;
      };
  contentAlignment?:
    | T
    | {
        introContentAlign?: T;
        durationContentAlign?: T;
        twoColumnTextAlign?: T;
        threeColumnTextAlign?: T;
      };
  backgroundSettings?:
    | T
    | {
        backgroundImageSize?: T;
        backgroundImagePosition?: T;
        backgroundImageRepeat?: T;
        backgroundOverlay?: T;
        backgroundOverlayColor?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "foundational-program-component_select".
 */
export interface FoundationalProgramComponentSelect<T extends boolean = true> {
  componentName?: T;
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        logo?: T;
        logoWidth?: T;
        logoHeight?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
      };
  durationSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        durationLabel?: T;
        durationValue?: T;
        destinationsLabel?: T;
        destinations?:
          | T
          | {
              location?: T;
              id?: T;
            };
        labelColor?: T;
        valueColor?: T;
        centerAlign?: T;
      };
  twoColumnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        verticalAlign?: T;
        leftContent?: T;
        leftContentColor?: T;
        leftAnimation?: T;
        rightImage?:
          | T
          | {
              image?: T;
              alt?: T;
            };
        rightAnimation?: T;
      };
  threeColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        columns?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              content?: T;
              contentColor?: T;
              animation?: T;
              id?: T;
            };
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        mainHeading?: T;
        mainHeadingColor?: T;
        boxes?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              content?: T;
              bulletPoints?:
                | T
                | {
                    text?: T;
                    id?: T;
                  };
              backgroundColor?: T;
              textColor?: T;
              animation?: T;
              id?: T;
            };
      };
  learnEnrollSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        heading?: T;
        headingColor?: T;
        destinations?:
          | T
          | {
              location?: T;
              id?: T;
            };
        destinationsColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              openInNewTab?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
              hoverTextColor?: T;
              className?: T;
            };
        centerAlign?: T;
      };
  twoColumnSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        hasBackground?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        mainHeading?: T;
        mainHeadingColor?: T;
        leftColumn?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              bulletPoints?:
                | T
                | {
                    text?: T;
                    isBold?: T;
                    id?: T;
                  };
              animation?: T;
            };
        rightColumn?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              bulletPoints?:
                | T
                | {
                    text?: T;
                    isBold?: T;
                    id?: T;
                  };
              animation?: T;
            };
        centerAlign?: T;
      };
  enrollmentDetailsSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        heading?: T;
        headingColor?: T;
        details?:
          | T
          | {
              text?: T;
              textColor?: T;
              id?: T;
            };
        additionalNote?: T;
        additionalNoteColor?: T;
        finalText?: T;
        finalTextColor?: T;
        centerAlign?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        defaultTextColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        h3FontSize?: T;
        h3Color?: T;
        h3FontWeight?: T;
        h4FontSize?: T;
        h4Color?: T;
        h4FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
        emFontStyle?: T;
        strongFontWeight?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        defaultHoverTextColor?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
        border?: T;
        transition?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
        animationDelay?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
      };
  listStyles?:
    | T
    | {
        bulletColor?: T;
        bulletStyle?: T;
        listMarginLeft?: T;
        listItemSpacing?: T;
      };
  imageSettings?:
    | T
    | {
        lazyLoading?: T;
        imageQuality?: T;
        autoFormat?: T;
        autoCompress?: T;
        responsiveImages?: T;
        imageBorderRadius?: T;
        imageShadow?: T;
      };
  customCSS?:
    | T
    | {
        additionalCSS?: T;
        cssClasses?:
          | T
          | {
              section?: T;
              className?: T;
              id?: T;
            };
      };
  linkSettings?:
    | T
    | {
        defaultLinkTarget?: T;
        linkUnderline?: T;
        linkTransition?: T;
      };
  spacingSettings?:
    | T
    | {
        introSectionSpacing?: T;
        durationSectionSpacing?: T;
        twoColumnSection1Spacing?: T;
        threeColumnSectionSpacing?: T;
        boxGridSectionSpacing?: T;
        learnEnrollSectionSpacing?: T;
        twoColumnSection2Spacing?: T;
        enrollmentDetailsSectionSpacing?: T;
        elementSpacing?: T;
      };
  borderShadowSettings?:
    | T
    | {
        boxBorderRadius?: T;
        boxShadow?: T;
        boxHoverShadow?: T;
        sectionBorder?: T;
        sectionBorderRadius?: T;
      };
  columnWidthSettings?:
    | T
    | {
        twoColumnLeftWidth?: T;
        twoColumnRightWidth?: T;
        threeColumnWidth?: T;
        columnGap?: T;
      };
  headerSettings?:
    | T
    | {
        headingTextTransform?: T;
        headingLetterSpacing?: T;
        headingMarginBottom?: T;
        subheadingFontSize?: T;
        subheadingColor?: T;
      };
  hoverEffects?:
    | T
    | {
        enableBoxHover?: T;
        boxHoverTransform?: T;
        boxHoverTransition?: T;
        imageHoverEffect?: T;
        imageHoverOpacity?: T;
      };
  gridSettings?:
    | T
    | {
        boxGridColumns?: T;
        boxGridColumnsTablet?: T;
        boxGridColumnsMobile?: T;
        boxGridGap?: T;
      };
  contentAlignment?:
    | T
    | {
        introContentAlign?: T;
        durationContentAlign?: T;
        twoColumnTextAlign?: T;
        threeColumnTextAlign?: T;
      };
  backgroundSettings?:
    | T
    | {
        backgroundImageSize?: T;
        backgroundImagePosition?: T;
        backgroundImageRepeat?: T;
        backgroundOverlay?: T;
        backgroundOverlayColor?: T;
      };
  centerAlignmentSettings?:
    | T
    | {
        centerTag?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "training-application-simple-component_select".
 */
export interface TrainingApplicationSimpleComponentSelect<T extends boolean = true> {
  componentName?: T;
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        logo?:
          | T
          | {
              show?: T;
              image?: T;
              width?: T;
              height?: T;
              alt?: T;
              loading?: T;
            };
        heading?: T;
        headingColor?: T;
        headingTag?: T;
        centerHeading?: T;
        bulletPoints?:
          | T
          | {
              content?: T;
              textColor?: T;
              centerAlign?: T;
              fontWeight?: T;
              id?: T;
            };
        animation?: T;
      };
  formSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        containerClass?: T;
        heading?: T;
        headingColor?: T;
        headingTag?: T;
        backgroundImage?:
          | T
          | {
              show?: T;
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              width?: T;
              height?: T;
              alt?: T;
              loading?: T;
            };
        formSettings?:
          | T
          | {
              formId?: T;
              formClass?: T;
              method?: T;
              action?: T;
              encType?: T;
              subject?: T;
              redirectUrl?: T;
            };
        formFields?:
          | T
          | {
              fieldType?: T;
              columnClass?: T;
              fieldName?: T;
              fieldId?: T;
              label?: T;
              placeholder?: T;
              defaultValue?: T;
              required?: T;
              requiredMessage?: T;
              size?: T;
              rows?: T;
              cols?: T;
              selectOptions?:
                | T
                | {
                    label?: T;
                    value?: T;
                    selected?: T;
                    disabled?: T;
                    id?: T;
                  };
              checkboxValue?: T;
              checkboxLabel?: T;
              additionalClasses?: T;
              hiddenRow?: T;
              id?: T;
            };
        disclaimerSection?:
          | T
          | {
              show?: T;
              content?: T;
              textColor?: T;
              className?: T;
            };
        recaptchaSettings?:
          | T
          | {
              enableV3?: T;
              v3FieldId?: T;
              enableV2?: T;
              v2ContainerId?: T;
              errorContainerId?: T;
              errorMessage?: T;
            };
        submitButton?:
          | T
          | {
              validateButton?:
                | T
                | {
                    text?: T;
                    id?: T;
                    className?: T;
                  };
              submitButton?:
                | T
                | {
                    text?: T;
                    id?: T;
                    name?: T;
                    value?: T;
                    className?: T;
                  };
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
              hoverTextColor?: T;
              disabledBackgroundColor?: T;
              disabledTextColor?: T;
            };
        hiddenFields?:
          | T
          | {
              fieldName?: T;
              fieldId?: T;
              value?: T;
              id?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        defaultTextColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        h3FontSize?: T;
        h3Color?: T;
        h3FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
        labelFontSize?: T;
        labelFontWeight?: T;
        smallFontSize?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        defaultHoverTextColor?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
        border?: T;
        transition?: T;
      };
  formStyles?:
    | T
    | {
        inputBackgroundColor?: T;
        inputTextColor?: T;
        inputBorderColor?: T;
        inputBorderWidth?: T;
        inputBorderRadius?: T;
        inputPadding?: T;
        inputFocusBorderColor?: T;
        inputFocusShadow?: T;
        labelColor?: T;
        placeholderColor?: T;
        errorColor?: T;
        fieldSpacing?: T;
        textareaMinHeight?: T;
        selectArrowColor?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        animationEasing?: T;
        animationDelay?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        contrastMode?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
        mobilePaddingAdjustment?: T;
      };
  imageSettings?:
    | T
    | {
        enableLazyLoading?: T;
        imageQuality?: T;
        autoFormat?: T;
        autoCompress?: T;
        responsiveImages?: T;
        usePicture?: T;
        imageBorderRadius?: T;
        imageShadow?: T;
        draggableImages?: T;
      };
  linkSettings?:
    | T
    | {
        defaultLinkTarget?: T;
        linkUnderline?: T;
        linkTransition?: T;
      };
  spacingSettings?:
    | T
    | {
        introSectionSpacing?: T;
        formSectionSpacing?: T;
        elementSpacing?: T;
        logoSpacing?: T;
        headingSpacing?: T;
      };
  borderShadowSettings?:
    | T
    | {
        sectionBorder?: T;
        sectionBorderRadius?: T;
        sectionShadow?: T;
        formWrapperShadow?: T;
        formWrapperBorder?: T;
        formWrapperBorderRadius?: T;
      };
  contentAlignment?:
    | T
    | {
        introContentAlign?: T;
        formContentAlign?: T;
        logoAlign?: T;
      };
  backgroundSettings?:
    | T
    | {
        backgroundImageSize?: T;
        backgroundImagePosition?: T;
        backgroundImageRepeat?: T;
        backgroundImageAttachment?: T;
        backgroundOverlay?: T;
        backgroundOverlayColor?: T;
      };
  centerAlignmentSettings?:
    | T
    | {
        useCenterTag?: T;
        centerTagReplacement?: T;
      };
  viewportSettings?:
    | T
    | {
        enableViewportClass?: T;
        viewportThreshold?: T;
      };
  checkboxRadioStyles?:
    | T
    | {
        checkboxSize?: T;
        checkboxBorderColor?: T;
        checkboxBackgroundColor?: T;
        checkboxCheckedColor?: T;
        checkboxBorderRadius?: T;
        checkboxLabelSpacing?: T;
      };
  validationStyles?:
    | T
    | {
        errorBorderColor?: T;
        errorBackgroundColor?: T;
        errorTextColor?: T;
        successBorderColor?: T;
        successTextColor?: T;
        validationMessageFontSize?: T;
      };
  hoverEffects?:
    | T
    | {
        enableInputHover?: T;
        inputHoverBorderColor?: T;
        inputHoverShadow?: T;
        linkHoverTransform?: T;
        imageHoverEffect?: T;
      };
  customCSS?:
    | T
    | {
        additionalCSS?: T;
        cssClasses?:
          | T
          | {
              section?: T;
              className?: T;
              id?: T;
            };
      };
  formWrapperStyles?:
    | T
    | {
        wrapperBackgroundColor?: T;
        wrapperPadding?: T;
        wrapperMaxWidth?: T;
        wrapperMargin?: T;
      };
  pictureSettings?:
    | T
    | {
        enableLazyLoadPlaceholder?: T;
        placeholderImage?: T;
        retinaSupport?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "plastic-surgery-page-component_select".
 */
export interface PlasticSurgeryPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        description?: T;
        descriptionColor?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  pageIndexListSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        option?: T;
        links?:
          | T
          | {
              label?: T;
              url?: T;
              title?: T;
              ariaLabel?: T;
              id?: T;
            };
      };
  columnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        paddingBottom?: T;
        logo?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        maxWidth?: T;
        heading?: T;
        headingAlignment?: T;
        headingColor?: T;
        content?: T;
      };
  pageIndexSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        items?:
          | T
          | {
              title?: T;
              url?: T;
              linkTitle?: T;
              ariaLabel?: T;
              image?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    alt?: T;
                  };
              id?: T;
            };
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        theme?: T;
        gridLayout?: T;
        hasBackground?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        boxes?:
          | T
          | {
              heading?: T;
              content?: T;
              bulletPoints?:
                | T
                | {
                    text?: T;
                    id?: T;
                  };
              bulletPointsLayout?: T;
              backgroundColor?: T;
              textColor?: T;
              id?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        h3FontSize?: T;
        h3Color?: T;
        h3FontWeight?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
        paragraphSpacing?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        fadeInUpDuration?: T;
        animationEasing?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
      };
  performanceSettings?:
    | T
    | {
        lazyLoadImages?: T;
        optimizeImages?: T;
        imageQuality?: T;
      };
  customCSS?:
    | T
    | {
        enabled?: T;
        css?: T;
      };
  customJS?:
    | T
    | {
        enabled?: T;
        js?: T;
        loadPosition?: T;
      };
  advancedSettings?:
    | T
    | {
        customClasses?: T;
        customAttributes?:
          | T
          | {
              attribute?: T;
              value?: T;
              id?: T;
            };
        dataAttributes?:
          | T
          | {
              name?: T;
              value?: T;
              id?: T;
            };
      };
  trackingSettings?:
    | T
    | {
        enableTracking?: T;
        googleAnalyticsId?: T;
        facebookPixelId?: T;
        customTrackingCode?: T;
      };
  isActive?: T;
  version?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "breast-page-component_select".
 */
export interface BreastPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  indexStaticSection?:
    | T
    | {
        show?: T;
        items?:
          | T
          | {
              title?: T;
              url?: T;
              ariaLabel?: T;
              image?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    large?: T;
                    alt?: T;
                  };
              overlayText?: T;
              id?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
      };
  performanceSettings?:
    | T
    | {
        lazyLoadImages?: T;
        optimizeImages?: T;
        imageQuality?: T;
      };
  advancedSettings?:
    | T
    | {
        customClasses?: T;
        dataAttributes?:
          | T
          | {
              name?: T;
              value?: T;
              id?: T;
            };
      };
  isActive?: T;
  version?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "breast-augmentation-page-component_select".
 */
export interface BreastAugmentationPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        description?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              className?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        className?: T;
        logo?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        heading?: T;
        content?: T;
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        headingSmall?: T;
        content?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  ctaBeforeAfterSection?:
    | T
    | {
        show?: T;
        className?: T;
        title?: T;
        titleSmall?: T;
        patients?:
          | T
          | {
              url?: T;
              beforeImage?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    alt?: T;
                  };
              afterImage?:
                | T
                | {
                    mobile?: T;
                    desktop?: T;
                    alt?: T;
                  };
              id?: T;
            };
        ageRestricted?:
          | T
          | {
              enabled?: T;
              heading?: T;
              message?: T;
              buttonText?: T;
            };
        viewGalleryButton?:
          | T
          | {
              text?: T;
              url?: T;
              title?: T;
              ariaLabel?: T;
            };
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        introContent?: T;
        boxes?:
          | T
          | {
              heading?: T;
              content?: T;
              id?: T;
            };
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  columnMediaSection?:
    | T
    | {
        show?: T;
        className?: T;
        rowClassName?: T;
        heading?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        content?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
      };
  performanceSettings?:
    | T
    | {
        lazyLoadImages?: T;
        optimizeImages?: T;
        imageQuality?: T;
      };
  advancedSettings?:
    | T
    | {
        customClasses?: T;
        dataAttributes?:
          | T
          | {
              name?: T;
              value?: T;
              id?: T;
            };
      };
  isActive?: T;
  version?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "breast-lift-page-component_select".
 */
export interface BreastLiftPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        description?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              className?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        className?: T;
        logo?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        heading?: T;
        content?: T;
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        leftContent?: T;
        rightContent?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        className?: T;
        leftHeading?: T;
        leftContent?: T;
        rightHeading?: T;
        rightContent?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        introContent?: T;
        boxes?:
          | T
          | {
              heading?: T;
              content?: T;
              id?: T;
            };
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  twoColumnSection?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        leftContent?: T;
        rightContent?: T;
      };
  bannerSection3?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        content?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
      };
  performanceSettings?:
    | T
    | {
        lazyLoadImages?: T;
        optimizeImages?: T;
        imageQuality?: T;
      };
  advancedSettings?:
    | T
    | {
        customClasses?: T;
        dataAttributes?:
          | T
          | {
              name?: T;
              value?: T;
              id?: T;
            };
      };
  isActive?: T;
  version?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "breast-reduction-page-component_select".
 */
export interface BreastReductionPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        description?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              className?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        className?: T;
        logo?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        heading?: T;
        content?: T;
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  ctaGeneralSection?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        headingUrl?: T;
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              className?: T;
            };
      };
  columnSection1?:
    | T
    | {
        show?: T;
        className?: T;
        rowClassName?: T;
        heading?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        introContent?: T;
        boxes?:
          | T
          | {
              heading?: T;
              subheading?: T;
              content?: T;
              id?: T;
            };
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  columnSection2?:
    | T
    | {
        show?: T;
        className?: T;
        rowClassName?: T;
        heading?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  bannerSection?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        content?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
      };
  performanceSettings?:
    | T
    | {
        lazyLoadImages?: T;
        optimizeImages?: T;
        imageQuality?: T;
      };
  advancedSettings?:
    | T
    | {
        customClasses?: T;
        dataAttributes?:
          | T
          | {
              name?: T;
              value?: T;
              id?: T;
            };
      };
  isActive?: T;
  version?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "breast-revision-page-component_select".
 */
export interface BreastRevisionPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        description?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              className?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        className?: T;
        logo?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        heading?: T;
        content?: T;
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        subheading?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        introContent?: T;
        leftColumn?:
          | T
          | {
              title?: T;
              description?: T;
              id?: T;
            };
        rightColumn?:
          | T
          | {
              title?: T;
              description?: T;
              id?: T;
            };
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  columnSection1?:
    | T
    | {
        show?: T;
        className?: T;
        rowClassName?: T;
        heading?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  boxGridSection1?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        introContent?: T;
        boxes?:
          | T
          | {
              heading?: T;
              content?: T;
              id?: T;
            };
        afterContent?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  columnSection2?:
    | T
    | {
        show?: T;
        className?: T;
        rowClassName?: T;
        heading?: T;
        mainIntro?: T;
        leftColumn?: T;
        rightColumn?: T;
      };
  boxGridSection2?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        introContent?: T;
        boxes?:
          | T
          | {
              heading?: T;
              content?: T;
              id?: T;
            };
        afterContent?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
      };
  performanceSettings?:
    | T
    | {
        lazyLoadImages?: T;
        optimizeImages?: T;
        imageQuality?: T;
      };
  advancedSettings?:
    | T
    | {
        customClasses?: T;
        dataAttributes?:
          | T
          | {
              name?: T;
              value?: T;
              id?: T;
            };
      };
  isActive?: T;
  version?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "body-page-component_select".
 */
export interface BodyPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  indexStaticSection?:
    | T
    | {
        show?: T;
        items?:
          | T
          | {
              title?: T;
              url?: T;
              overlayText?: T;
              image?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    large?: T;
                    alt?: T;
                  };
              id?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
      };
  performanceSettings?:
    | T
    | {
        lazyLoadImages?: T;
        optimizeImages?: T;
        imageQuality?: T;
      };
  advancedSettings?:
    | T
    | {
        customClasses?: T;
        dataAttributes?:
          | T
          | {
              name?: T;
              value?: T;
              id?: T;
            };
      };
  isActive?: T;
  version?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "liposuction-page-component_select".
 */
export interface LiposuctionPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        subtitle?: T;
        description?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              className?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        className?: T;
        logo?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        heading?: T;
        content?: T;
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        subheading?: T;
        content?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  ctaBeforeAfterSection?:
    | T
    | {
        show?: T;
        className?: T;
        title?: T;
        subtitle?: T;
        galleryUrl?: T;
        ageRestrictionWarning?:
          | T
          | {
              show?: T;
              heading?: T;
              message?: T;
              buttonText?: T;
            };
        beforeAfterItems?:
          | T
          | {
              url?: T;
              beforeImage?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    large?: T;
                    alt?: T;
                  };
              afterImage?:
                | T
                | {
                    mobile?: T;
                    large?: T;
                    alt?: T;
                  };
              id?: T;
            };
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        subheading?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        content?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  threeColumnSection?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        leftColumn?: T;
        centerColumn?: T;
        rightColumn?: T;
      };
  columnSection1?:
    | T
    | {
        show?: T;
        className?: T;
        rowClassName?: T;
        heading?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        subheading?: T;
        introContent?: T;
        boxes?:
          | T
          | {
              heading?: T;
              content?: T;
              id?: T;
            };
        afterContent?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  columnSection2?:
    | T
    | {
        show?: T;
        className?: T;
        rowClassName?: T;
        heading?: T;
        content?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
      };
  performanceSettings?:
    | T
    | {
        lazyLoadImages?: T;
        optimizeImages?: T;
        imageQuality?: T;
      };
  advancedSettings?:
    | T
    | {
        customClasses?: T;
        dataAttributes?:
          | T
          | {
              name?: T;
              value?: T;
              id?: T;
            };
      };
  isActive?: T;
  version?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mommy-makeover-page-component_select".
 */
export interface MommyMakeoverPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleSmall?: T;
        description?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              className?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        className?: T;
        logo?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        heading?: T;
        content?: T;
      };
  boxGridSection1?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        introContent?: T;
        boxes?:
          | T
          | {
              heading?: T;
              content?: T;
              id?: T;
            };
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        className?: T;
        rowClassName?: T;
        copyClassName?: T;
        heading?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  columnMediaSection?:
    | T
    | {
        show?: T;
        className?: T;
        rowClassName?: T;
        heading?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  boxGridSection2?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        boxes?:
          | T
          | {
              heading?: T;
              content?: T;
              id?: T;
            };
        contentAfter?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  ctaBeforeAfterSection?:
    | T
    | {
        show?: T;
        className?: T;
        title?: T;
        titleSmall?: T;
        patients?:
          | T
          | {
              url?: T;
              beforeImage?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    alt?: T;
                  };
              afterImage?:
                | T
                | {
                    mobile?: T;
                    desktop?: T;
                    alt?: T;
                  };
              id?: T;
            };
        ageRestricted?:
          | T
          | {
              enabled?: T;
              heading?: T;
              message?: T;
              buttonText?: T;
            };
        viewGalleryButton?:
          | T
          | {
              text?: T;
              url?: T;
              title?: T;
              ariaLabel?: T;
            };
      };
  twoColumnSection?:
    | T
    | {
        show?: T;
        className?: T;
        rowClassName?: T;
        heading?: T;
        leftColumn?: T;
        rightColumn?: T;
      };
  bannerSection?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        headingSmall?: T;
        headingAlignment?: T;
        content?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  isActive?: T;
  version?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tummy-tuck-page-component_select".
 */
export interface TummyTuckPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        description?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              className?: T;
            };
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        className?: T;
        logo?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        heading?: T;
        content?: T;
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        className?: T;
        rowClassName?: T;
        copyClassName?: T;
        heading?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  boxGridSection1?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        introContent?: T;
        boxes?:
          | T
          | {
              heading?: T;
              content?: T;
              id?: T;
            };
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  boxGridSection2?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        introContent?: T;
        boxes?:
          | T
          | {
              heading?: T;
              content?: T;
              id?: T;
            };
      };
  ctaBeforeAfterSection?:
    | T
    | {
        show?: T;
        className?: T;
        title?: T;
        titleSmall?: T;
        patients?:
          | T
          | {
              url?: T;
              beforeImage?:
                | T
                | {
                    mobile?: T;
                    tablet?: T;
                    desktop?: T;
                    alt?: T;
                  };
              afterImage?:
                | T
                | {
                    mobile?: T;
                    desktop?: T;
                    alt?: T;
                  };
              id?: T;
            };
        ageRestricted?:
          | T
          | {
              enabled?: T;
              heading?: T;
              message?: T;
              buttonText?: T;
            };
        viewGalleryButton?:
          | T
          | {
              text?: T;
              url?: T;
              title?: T;
              ariaLabel?: T;
            };
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        content?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  columnMediaSection?:
    | T
    | {
        show?: T;
        className?: T;
        rowClassName?: T;
        heading?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        className?: T;
        heading?: T;
        headingAlignment?: T;
        content?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
      };
  isActive?: T;
  version?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog_select".
 */
export interface BlogSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  excerpt?: T;
  featuredImage?:
    | T
    | {
        image?: T;
        mobile?: T;
        tablet?: T;
        desktop?: T;
        alt?: T;
      };
  content?: T;
  publishedDate?: T;
  status?: T;
  featured?: T;
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        keywords?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locations_select".
 */
export interface LocationsSelect<T extends boolean = true> {
  name?: T;
  image?: T;
  alt?: T;
  address?: T;
  phone?: T;
  coordinates?:
    | T
    | {
        lat?: T;
        lng?: T;
      };
  reviews?:
    | T
    | {
        rating?: T;
        count?: T;
      };
  businessHours?:
    | T
    | {
        day?: T;
        openTime?: T;
        closeTime?: T;
        isClosed?: T;
        id?: T;
      };
  providers?: T;
  slug?: T;
  isActive?: T;
  featured?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "providers_select".
 */
export interface ProvidersSelect<T extends boolean = true> {
  name?: T;
  title?: T;
  image?: T;
  backgroundImage?: T;
  latitude?: T;
  longitude?: T;
  zoom?: T;
  primaryLocation?: T;
  additionalLocations?: T;
  reviews?:
    | T
    | {
        rating?: T;
        count?: T;
      };
  bio?: T;
  specialties?:
    | T
    | {
        specialty?: T;
        id?: T;
      };
  experience?:
    | T
    | {
        experience?: T;
        id?: T;
      };
  awards?:
    | T
    | {
        Awards?: T;
        id?: T;
      };
  memberships?:
    | T
    | {
        Memberships?: T;
        id?: T;
      };
  personal?:
    | T
    | {
        Personal?: T;
        id?: T;
      };
  education?:
    | T
    | {
        degree?: T;
        institution?: T;
        year?: T;
        id?: T;
      };
  certifications?:
    | T
    | {
        certification?: T;
        id?: T;
      };
  languages?:
    | T
    | {
        language?: T;
        id?: T;
      };
  acceptingNewPatients?: T;
  slug?: T;
  isActive?: T;
  featured?: T;
  sortOrder?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "clermont-page-component_select".
 */
export interface ClermontPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        description?: T;
        descriptionColor?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  experienceSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        paddingTop?: T;
        paddingBottom?: T;
        logo?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        contentAlignment?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              className?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
      };
  pathToBannerSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        className?: T;
        animationClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        columns?:
          | T
          | {
              heading?: T;
              content?: T;
              bulletPoints?:
                | T
                | {
                    text?: T;
                    id?: T;
                  };
              id?: T;
            };
      };
  personalizedCareSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        paddingTop?: T;
        paddingBottom?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  goldfingersWayBannerSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        className?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        description?: T;
        servicesList?:
          | T
          | {
              serviceName?: T;
              serviceUrl?: T;
              description?: T;
              id?: T;
            };
        closingContent?: T;
      };
  nonSurgicalEnhancementsSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        paddingTop?: T;
        paddingBottom?: T;
        mediaPosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  goldfingersStoryBannerSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        className?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  refreshRenewRestoreSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        imagePosition?: T;
        animationClass?: T;
        paddingClass?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  plasticSurgeryServicesSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        paddingBottom?: T;
        mediaPosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  experienceGoldfingersBannerSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        className?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        columns?:
          | T
          | {
              heading?: T;
              content?: T;
              id?: T;
            };
      };
  whyChooseUsSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        columns?:
          | T
          | {
              content?: T;
              animationClass?: T;
              id?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        h3FontSize?: T;
        h3Color?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
        smallFontSize?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
        transition?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        slideInDuration?: T;
        animationEasing?: T;
        animationDelay?: T;
      };
  layoutSettings?:
    | T
    | {
        columnGap?: T;
        rowGap?: T;
        maxContentWidth?: T;
        verticalAlignmentDefault?: T;
      };
  imageSettings?:
    | T
    | {
        lazyLoading?: T;
        imageQuality?: T;
        imageSharpness?: T;
        objectFit?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        ogTitle?: T;
        ogDescription?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
        structuredData?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        focusVisibleWidth?: T;
        contrastMode?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        desktopBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
        mobileStackSections?: T;
        hideMobileElements?:
          | T
          | {
              elementId?: T;
              id?: T;
            };
      };
  performanceSettings?:
    | T
    | {
        enableCaching?: T;
        preloadImages?: T;
        deferNonCriticalCSS?: T;
        minimizeHTTP?: T;
      };
  customCSS?:
    | T
    | {
        globalCSS?: T;
        heroSectionCSS?: T;
        bannerSectionCSS?: T;
        columnSectionCSS?: T;
      };
  customJS?:
    | T
    | {
        headerScripts?: T;
        footerScripts?: T;
        analyticsCode?: T;
      };
  moduleClasses?:
    | T
    | {
        heroModuleClass?: T;
        columnModuleClass?: T;
        bannerModuleClass?: T;
        halfImageModuleClass?: T;
        twoColumnModuleClass?: T;
      };
  versionControl?:
    | T
    | {
        version?: T;
        lastModifiedBy?: T;
        changeLog?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "clearwater-page-component_select".
 */
export interface ClearwaterPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        moduleClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        titleFontSize?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        moduleClass?: T;
        logo?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        contentAlignment?: T;
        maxWidth?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              className?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
      };
  halfImageSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        moduleClass?: T;
        imagePosition?: T;
        marginTop?: T;
        paddingClass?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              text?: T;
              id?: T;
            };
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  boxGridSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        moduleClass?: T;
        animationClass?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  goldfingersWaySection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        moduleClass?: T;
        marginTop?: T;
        paddingBottom?: T;
        heading?: T;
        headingColor?: T;
        headingAlignment?: T;
        introContent?: T;
        servicesList?:
          | T
          | {
              serviceName?: T;
              serviceUrl?: T;
              description?: T;
              id?: T;
            };
        closingContent?: T;
      };
  nonSurgicalSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        moduleClass?: T;
        marginBottom?: T;
        mediaPosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  goldfingersStoryBanner?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        moduleClass?: T;
        animationClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        headingAlignment?: T;
        columns?:
          | T
          | {
              content?: T;
              id?: T;
            };
        columnLayout?: T;
      };
  twoColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        moduleClass?: T;
        verticalAlign?: T;
        columns?:
          | T
          | {
              content?: T;
              animationClass?: T;
              id?: T;
            };
      };
  ctaGeneralSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        moduleClass?: T;
        heading?: T;
        headingLink?: T;
        headingColor?: T;
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              className?: T;
              backgroundColor?: T;
              textColor?: T;
              hoverBackgroundColor?: T;
            };
      };
  plasticSurgerySection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        moduleClass?: T;
        marginTop?: T;
        marginBottom?: T;
        heading?: T;
        headingColor?: T;
        headingAlignment?: T;
        introContent?: T;
        servicesList?:
          | T
          | {
              serviceName?: T;
              serviceUrl?: T;
              description?: T;
              id?: T;
            };
      };
  boxGridSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        moduleClass?: T;
        animationClass?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        containerMaxWidth?: T;
        containerPadding?: T;
        sectionSpacing?: T;
        fontFamily?: T;
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
      };
  typographySettings?:
    | T
    | {
        h1FontSize?: T;
        h1Color?: T;
        h1FontWeight?: T;
        h2FontSize?: T;
        h2Color?: T;
        h2FontWeight?: T;
        h3FontSize?: T;
        h3Color?: T;
        bodyFontSize?: T;
        bodyLineHeight?: T;
        smallFontSize?: T;
      };
  buttonStyles?:
    | T
    | {
        defaultBackgroundColor?: T;
        defaultTextColor?: T;
        defaultHoverBackground?: T;
        whiteButtonBackground?: T;
        whiteButtonTextColor?: T;
        whiteButtonHoverBackground?: T;
        borderRadius?: T;
        padding?: T;
        fontSize?: T;
        fontWeight?: T;
        transition?: T;
      };
  animationSettings?:
    | T
    | {
        enableAnimations?: T;
        fadeInDuration?: T;
        fadeInUpDuration?: T;
        fadeInLeftDuration?: T;
        fadeInRightDuration?: T;
        animationEasing?: T;
        animationDelay?: T;
      };
  layoutSettings?:
    | T
    | {
        columnGap?: T;
        rowGap?: T;
        maxContentWidth?: T;
        verticalAlignmentDefault?: T;
      };
  imageSettings?:
    | T
    | {
        lazyLoading?: T;
        imageQuality?: T;
        imageSharpness?: T;
        objectFit?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
        ogTitle?: T;
        ogDescription?: T;
        keywords?: T;
        canonicalUrl?: T;
        robots?: T;
        structuredData?: T;
      };
  accessibilitySettings?:
    | T
    | {
        skipToContent?: T;
        ariaLabelsEnabled?: T;
        altTextRequired?: T;
        focusVisibleColor?: T;
        focusVisibleWidth?: T;
        contrastMode?: T;
      };
  mobileSettings?:
    | T
    | {
        mobileBreakpoint?: T;
        tabletBreakpoint?: T;
        desktopBreakpoint?: T;
        mobileFontSizeAdjustment?: T;
        mobileSpacingAdjustment?: T;
        mobileStackSections?: T;
        hideMobileElements?:
          | T
          | {
              elementId?: T;
              id?: T;
            };
      };
  performanceSettings?:
    | T
    | {
        enableCaching?: T;
        preloadImages?: T;
        deferNonCriticalCSS?: T;
        minimizeHTTP?: T;
      };
  customCSS?:
    | T
    | {
        globalCSS?: T;
        heroSectionCSS?: T;
        columnSectionCSS?: T;
        bannerSectionCSS?: T;
        boxGridSectionCSS?: T;
        halfImageSectionCSS?: T;
      };
  customJS?:
    | T
    | {
        headerScripts?: T;
        footerScripts?: T;
        analyticsCode?: T;
      };
  moduleClasses?:
    | T
    | {
        heroModuleClass?: T;
        columnModuleClass?: T;
        bannerModuleClass?: T;
        halfImageModuleClass?: T;
        twoColumnModuleClass?: T;
        boxGridModuleClass?: T;
        ctaGeneralModuleClass?: T;
      };
  spacingClasses?:
    | T
    | {
        mt0?: T;
        mt30?: T;
        mb0?: T;
        mb30?: T;
        pb20?: T;
      };
  versionControl?:
    | T
    | {
        version?: T;
        lastModifiedBy?: T;
        changeLog?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "downtown-orlando-page-component_select".
 */
export interface DowntownOrlandoPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        moduleClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        contentBeforeHeading?: T;
        contentBeforeText?: T;
        boxes?:
          | T
          | {
              heading?: T;
              content?: T;
              id?: T;
            };
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  dividerSection1?:
    | T
    | {
        show?: T;
        image?: T;
        imageAlt?: T;
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        columns?:
          | T
          | {
              content?: T;
              id?: T;
            };
      };
  servicesSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        introContent?: T;
        servicesList?:
          | T
          | {
              serviceName?: T;
              serviceUrl?: T;
              description?: T;
              id?: T;
            };
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        flipped?: T;
        heading?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  storySection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        content?: T;
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        columns?:
          | T
          | {
              content?: T;
              id?: T;
            };
      };
  twoColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        columns?:
          | T
          | {
              content?: T;
              animationClass?: T;
              id?: T;
            };
      };
  ctaSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        heading?: T;
        headingLink?: T;
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              className?: T;
            };
      };
  dividerSection2?:
    | T
    | {
        show?: T;
        image?: T;
        imageAlt?: T;
      };
  plasticSurgeryBanner?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        content?: T;
        servicesList?:
          | T
          | {
              serviceName?: T;
              serviceUrl?: T;
              description?: T;
              id?: T;
            };
      };
  finalColumnMedia?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        mediaPosition?: T;
        heading?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "downtown-tampa-page-component_select".
 */
export interface DowntownTampaPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  introColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        contentBeforeHeading?: T;
        contentBeforeText?: T;
        boxes?:
          | T
          | {
              heading?: T;
              content?: T;
              id?: T;
            };
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  dividerSection1?:
    | T
    | {
        show?: T;
        image?: T;
        imageAlt?: T;
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        columns?:
          | T
          | {
              content?: T;
              id?: T;
            };
      };
  servicesSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        introContent?: T;
        servicesList?:
          | T
          | {
              serviceName?: T;
              serviceUrl?: T;
              description?: T;
              id?: T;
            };
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        flipped?: T;
        heading?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  storySection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        content?: T;
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        columns?:
          | T
          | {
              content?: T;
              id?: T;
            };
      };
  twoColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        columns?:
          | T
          | {
              content?: T;
              animationClass?: T;
              id?: T;
            };
      };
  ctaSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        heading?: T;
        headingLink?: T;
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              className?: T;
            };
      };
  finalColumnMedia?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        mediaPosition?: T;
        heading?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lake-mary-page-component_select".
 */
export interface LakeMaryPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?:
          | T
          | {
              smallText?: T;
              mainText?: T;
              color?: T;
            };
        description?: T;
        descriptionColor?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        paddingBottom?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              className?: T;
            };
        maxWidth?: T;
        textAlign?: T;
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        layoutOption?: T;
        noBg?: T;
        wider?: T;
        boxes?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              content?: T;
              contentColor?: T;
              animationClass?: T;
              id?: T;
            };
      };
  columnMediaSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        mediaPosition?: T;
        paddingTop?: T;
        marginBottom?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        darkMode?: T;
        hideDivider?: T;
        backgroundClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        content?: T;
        animationClass?: T;
      };
  twoColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        paddingBottom?: T;
        verticalAlign?: T;
        columns?:
          | T
          | {
              content?: T;
              animationClass?: T;
              id?: T;
            };
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        flipped?: T;
        marginTop?: T;
        marginBottom?: T;
        animationClass?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        paddedContent?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  storyColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        marginBottom?: T;
        twoColumns?: T;
        verticalAlign?: T;
        heading?: T;
        content?: T;
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        darkMode?: T;
        hideDivider?: T;
        backgroundClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        content?: T;
        servicesList?:
          | T
          | {
              serviceName?: T;
              serviceUrl?: T;
              description?: T;
              isBold?: T;
              id?: T;
            };
        listColumns?: T;
        animationClass?: T;
      };
  columnMediaSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        mediaPosition?: T;
        marginTop?: T;
        marginBottom?: T;
        heading?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  ctaSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundClass?: T;
        thin?: T;
        marginTop?: T;
        marginBottom?: T;
        animationClass?: T;
        heading?: T;
        headingLink?: T;
        headingColor?: T;
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              className?: T;
            };
      };
  storyColumnSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        marginTop?: T;
        marginBottom?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  bannerSection3?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        darkMode?: T;
        hideDivider?: T;
        backgroundClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        content?: T;
        servicesList?:
          | T
          | {
              serviceName?: T;
              serviceUrl?: T;
              description?: T;
              isBold?: T;
              id?: T;
            };
        listColumns?: T;
        animationClass?: T;
      };
  finalStorySection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        marginTop?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        headingColor?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogImage?: T;
      };
  advancedSettings?:
    | T
    | {
        customCSS?: T;
        customClasses?: T;
        scripts?:
          | T
          | {
              scriptContent?: T;
              position?: T;
              id?: T;
            };
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lake-nona-page-component_select".
 */
export interface LakeNonaPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  introColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        contentBeforeHeading?: T;
        contentBeforeText?: T;
        boxes?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              content?: T;
              textColor?: T;
              id?: T;
            };
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  dividerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        image?: T;
        imageAlt?: T;
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        columns?:
          | T
          | {
              content?: T;
              textColor?: T;
              id?: T;
            };
      };
  servicesSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        introContent?: T;
        servicesList?:
          | T
          | {
              serviceName?: T;
              serviceNameBold?: T;
              serviceUrl?: T;
              description?: T;
              textColor?: T;
              id?: T;
            };
        columnsLayout?: T;
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        flipped?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  storySection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        columns?:
          | T
          | {
              content?: T;
              textColor?: T;
              id?: T;
            };
      };
  twoColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        columns?:
          | T
          | {
              content?: T;
              animationClass?: T;
              textColor?: T;
              id?: T;
            };
      };
  ctaSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        headingLink?: T;
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              className?: T;
              backgroundColor?: T;
              textColor?: T;
            };
      };
  dividerSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        image?: T;
        imageAlt?: T;
      };
  bannerSection3?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        content?: T;
        servicesList?:
          | T
          | {
              serviceName?: T;
              serviceNameBold?: T;
              serviceUrl?: T;
              description?: T;
              textColor?: T;
              id?: T;
            };
        columnsLayout?: T;
      };
  finalColumnMedia?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        mediaPosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogImage?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "longwood-page-component_select".
 */
export interface LongwoodPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        description?: T;
        descriptionColor?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              className?: T;
              backgroundColor?: T;
              textColor?: T;
            };
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        boxes?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              content?: T;
              textColor?: T;
              id?: T;
            };
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  twoColumnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        columns?:
          | T
          | {
              content?: T;
              animationClass?: T;
              textColor?: T;
              id?: T;
            };
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        flipped?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  twoColumnSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        title?: T;
        titleColor?: T;
        columns?:
          | T
          | {
              content?: T;
              animationClass?: T;
              textColor?: T;
              id?: T;
            };
      };
  bannerSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        introContent?: T;
        servicesList?:
          | T
          | {
              serviceName?: T;
              serviceNameBold?: T;
              serviceUrl?: T;
              description?: T;
              textColor?: T;
              id?: T;
            };
        columnsLayout?: T;
      };
  plasticSurgerySection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        servicesList?:
          | T
          | {
              serviceName?: T;
              serviceNameBold?: T;
              serviceUrl?: T;
              description?: T;
              textColor?: T;
              id?: T;
            };
        columnsLayout?: T;
      };
  finalColumnMedia?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        mediaPosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogImage?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mount-dora-page-component_select".
 */
export interface MountDoraPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        description?: T;
        descriptionColor?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  columnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        marginBottom?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              className?: T;
              backgroundColor?: T;
              textColor?: T;
            };
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        className?: T;
        boxes?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              content?: T;
              textColor?: T;
              animationClass?: T;
              id?: T;
            };
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  columnMediaSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        marginTop?: T;
        paddingBottom?: T;
        mediaPosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  twoColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        columns?:
          | T
          | {
              content?: T;
              animationClass?: T;
              textColor?: T;
              id?: T;
            };
      };
  ctaGeneralSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        className?: T;
        marginTop?: T;
        marginBottom?: T;
        animationClass?: T;
        heading?: T;
        headingLink?: T;
        headingColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              className?: T;
              backgroundColor?: T;
              textColor?: T;
            };
      };
  halfImageSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        flipped?: T;
        animationClass?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  dividerSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        logo?: T;
        logoAlt?: T;
      };
  halfImageSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        flipped?: T;
        marginTop?: T;
        marginBottom?: T;
        animationClass?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  columnSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        marginTop?: T;
        marginBottom?: T;
        heading?: T;
        headingColor?: T;
        introContent?: T;
        servicesList?:
          | T
          | {
              serviceName?: T;
              serviceNameBold?: T;
              serviceUrl?: T;
              description?: T;
              textColor?: T;
              id?: T;
            };
        columnsLayout?: T;
      };
  bannerSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        isDark?: T;
        hideDivider?: T;
        animationClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        introContent?: T;
        servicesList?:
          | T
          | {
              serviceName?: T;
              serviceNameBold?: T;
              serviceUrl?: T;
              description?: T;
              textColor?: T;
              id?: T;
            };
      };
  finalColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        marginTop?: T;
        layout?: T;
        columns?:
          | T
          | {
              content?: T;
              textColor?: T;
              id?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        headingColor?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogImage?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "new-smyrna-page-component_select".
 */
export interface NewSmyrnaPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        className?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        description?: T;
        descriptionColor?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  columnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        marginBottom?: T;
        logo?: T;
        logoWidth?: T;
        logoHeight?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        maxWidth?: T;
        textAlign?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              className?: T;
              backgroundColor?: T;
              textColor?: T;
            };
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        isDark?: T;
        hideDivider?: T;
        animationClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  columnMediaSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        marginTop?: T;
        marginBottom?: T;
        mediaPosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  ctaGeneralSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        className?: T;
        marginTop?: T;
        marginBottom?: T;
        animationClass?: T;
        heading?: T;
        headingLink?: T;
        headingColor?: T;
        ctaButton?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              className?: T;
              backgroundColor?: T;
              textColor?: T;
            };
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        flipped?: T;
        marginTop?: T;
        marginBottom?: T;
        animationClass?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  columnSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        marginTop?: T;
        marginBottom?: T;
        heading?: T;
        headingColor?: T;
        introContent?: T;
        servicesList?:
          | T
          | {
              serviceName?: T;
              serviceNameBold?: T;
              serviceUrl?: T;
              description?: T;
              textColor?: T;
              id?: T;
            };
        columnsLayout?: T;
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        className?: T;
        contentBefore?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              content?: T;
              textColor?: T;
            };
        boxes?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              headingTag?: T;
              content?: T;
              textColor?: T;
              animationClass?: T;
              ctaButton?:
                | T
                | {
                    show?: T;
                    text?: T;
                    url?: T;
                    className?: T;
                    backgroundColor?: T;
                    textColor?: T;
                  };
              id?: T;
            };
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  columnSection3?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        marginTop?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        linkHoverColor?: T;
        headingColor?: T;
        backgroundColor?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogImage?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ocala-location-page-component_select".
 */
export interface OcalaLocationPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  introColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              className?: T;
            };
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        animationClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        content?: T;
      };
  halfImageSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        flipped?: T;
        heading?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  ctaSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        heading?: T;
        headingLink?: T;
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              className?: T;
            };
      };
  columnMediaSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        mediaPosition?: T;
        heading?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  halfImageSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        flipped?: T;
        heading?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  dividerSection?:
    | T
    | {
        show?: T;
        image?: T;
        imageAlt?: T;
      };
  halfImageSection3?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        flipped?: T;
        heading?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  columnMediaSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        mediaPosition?: T;
        heading?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        animationClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingAlignment?: T;
        introContent?: T;
        servicesList?:
          | T
          | {
              serviceName?: T;
              serviceUrl?: T;
              description?: T;
              id?: T;
            };
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        contentBeforeHeading?: T;
        contentBeforeText?: T;
        boxes?:
          | T
          | {
              heading?: T;
              content?: T;
              ctaButton?:
                | T
                | {
                    text?: T;
                    url?: T;
                    className?: T;
                  };
              animationClass?: T;
              id?: T;
            };
      };
  bannerSection3?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        animationClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        content?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        backgroundColor?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogImage?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orlando-location-page-component_select".
 */
export interface OrlandoLocationPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        description?: T;
        descriptionColor?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              className?: T;
            };
      };
  boxGridSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        boxes?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              content?: T;
              animationClass?: T;
              id?: T;
            };
      };
  columnMediaSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        mediaPosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  ctaSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        heading?: T;
        headingLink?: T;
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              className?: T;
            };
      };
  simpleColumnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        animationClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        columns?:
          | T
          | {
              content?: T;
              id?: T;
            };
      };
  servicesSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        heading?: T;
        headingColor?: T;
        introContent?: T;
        servicesList?:
          | T
          | {
              serviceName?: T;
              serviceUrl?: T;
              description?: T;
              id?: T;
            };
      };
  halfImageSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        flipped?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  storySection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  boxGridSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        boxes?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              content?: T;
              animationClass?: T;
              id?: T;
            };
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  plasticSurgerySection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        heading?: T;
        headingColor?: T;
        introContent?: T;
        servicesList?:
          | T
          | {
              serviceName?: T;
              serviceUrl?: T;
              description?: T;
              id?: T;
            };
      };
  finalColumnMedia?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        mediaPosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        backgroundColor?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogImage?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "port-orange-location-page-component_select".
 */
export interface PortOrangeLocationPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        cssClasses?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleSmall?: T;
        titleColor?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        logo?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        heading?: T;
        headingSpan?: T;
        headingColor?: T;
        content?: T;
        maxWidth?: T;
        textAlign?: T;
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              className?: T;
            };
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        animationClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  halfImageSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        flipped?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              text?: T;
              id?: T;
            };
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  ctaSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        heading?: T;
        headingLink?: T;
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              className?: T;
            };
      };
  columnMediaSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        mediaPosition?: T;
        heading?: T;
        headingSmall?: T;
        headingSpan?: T;
        headingBlockDesktop?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  columnMediaSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        mediaPosition?: T;
        heading?: T;
        headingBlockDesktop?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        animationClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        headingAlign?: T;
        intro?: T;
        introAlign?: T;
        services?:
          | T
          | {
              name?: T;
              url?: T;
              description?: T;
              id?: T;
            };
        columnsLayout?: T;
      };
  boxGridSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        heading?: T;
        headingColor?: T;
        intro?: T;
        boxes?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              content?: T;
              ctaText?: T;
              ctaUrl?: T;
              ctaClassName?: T;
              animationClass?: T;
              id?: T;
            };
      };
  bannerSection3?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        animationClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingSpan?: T;
        headingColor?: T;
        content?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        backgroundColor?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogImage?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sarasota-location-page-component_select".
 */
export interface SarasotaLocationPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        cssClasses?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        logo?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        maxWidth?: T;
        textAlign?: T;
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              className?: T;
            };
      };
  boxGridSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        heading?: T;
        headingSpan?: T;
        headingColor?: T;
        intro?: T;
        boxes?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              content?: T;
              animationClass?: T;
              id?: T;
            };
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  dividerSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        cssClasses?: T;
        logo?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        animationClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        layoutType?: T;
        verticalAlign?: T;
        columns?:
          | T
          | {
              content?: T;
              id?: T;
            };
      };
  servicesColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        heading?: T;
        headingColor?: T;
        headingAlign?: T;
        intro?: T;
        introAlign?: T;
        services?:
          | T
          | {
              name?: T;
              description?: T;
              id?: T;
            };
        columnsLayout?: T;
      };
  halfImageSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        flipped?: T;
        padded?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  simpleColumnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        animationClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        layoutType?: T;
        verticalAlign?: T;
        columns?:
          | T
          | {
              content?: T;
              id?: T;
            };
      };
  twoColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        verticalAlign?: T;
        leftColumn?:
          | T
          | {
              heading?: T;
              headingSmall?: T;
              headingColor?: T;
              content?: T;
              animationClass?: T;
            };
        rightColumn?:
          | T
          | {
              content?: T;
              animationClass?: T;
            };
      };
  ctaSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        heading?: T;
        headingLink?: T;
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              className?: T;
            };
      };
  plasticSurgerySection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        heading?: T;
        headingColor?: T;
        headingAlign?: T;
        intro?: T;
        procedures?:
          | T
          | {
              name?: T;
              description?: T;
              id?: T;
            };
        columnsLayout?: T;
      };
  bannerSection3?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        animationClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        content?: T;
        procedures?:
          | T
          | {
              name?: T;
              url?: T;
              description?: T;
              id?: T;
            };
        columnsLayout?: T;
      };
  finalColumnMedia?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        mediaPosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        backgroundColor?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogImage?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "st-petersburg-location-page-component_select".
 */
export interface StPetersburgLocationPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        cssClasses?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleCssClass?: T;
        titleColor?: T;
        showDescription?: T;
        description?: T;
        descriptionColor?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  introSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        animationClass?: T;
        logo?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        heading?: T;
        headingSpan?: T;
        headingColor?: T;
        content?: T;
      };
  halfImageSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        flipped?: T;
        copyPadding?: T;
        heading?: T;
        headingSmall?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  servicesColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        heading?: T;
        headingColor?: T;
        headingAlign?: T;
        intro?: T;
        introAlign?: T;
        services?:
          | T
          | {
              name?: T;
              description?: T;
              id?: T;
            };
        columnsLayout?: T;
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        animationClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  dividerSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        cssClasses?: T;
        logo?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        animationClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        heading?: T;
        headingColor?: T;
        content?: T;
        procedures?:
          | T
          | {
              name?: T;
              url?: T;
              description?: T;
              id?: T;
            };
        columnsLayout?: T;
      };
  finalColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        backgroundColor?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogImage?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tampa-location-page-component_select".
 */
export interface TampaLocationPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        cssClasses?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        logo?: T;
        logoAlt?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              className?: T;
            };
      };
  boxGridSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        heading?: T;
        headingColor?: T;
        introContent?: T;
        boxes?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              content?: T;
              animationClass?: T;
              id?: T;
            };
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  dividerSection?:
    | T
    | {
        show?: T;
        cssClasses?: T;
        logo?: T;
        logoAlt?: T;
      };
  simpleColumnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        animationClass?: T;
        heading?: T;
        headingColor?: T;
        introContent?: T;
        servicesList?:
          | T
          | {
              serviceName?: T;
              serviceUrl?: T;
              description?: T;
              id?: T;
            };
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  columnMediaSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        mediaPosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  boxGridSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        heading?: T;
        headingColor?: T;
        introContent?: T;
        boxes?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              content?: T;
              ctaButton?:
                | T
                | {
                    text?: T;
                    url?: T;
                    className?: T;
                  };
              animationClass?: T;
              id?: T;
            };
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  finalColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        backgroundColor?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogImage?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "villages-location-page-component_select".
 */
export interface VillagesLocationPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        cssClasses?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleSmall?: T;
        titleColor?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  introColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        logo?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              className?: T;
            };
      };
  boxGridSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        boxes?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              content?: T;
              animationClass?: T;
              id?: T;
            };
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  halfImageSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        flipped?: T;
        copyPadding?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  ctaSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        heading?: T;
        headingLink?: T;
        headingColor?: T;
        ctaButton?:
          | T
          | {
              text?: T;
              url?: T;
              className?: T;
            };
      };
  columnMediaSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        mediaPosition?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
            };
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        animationClass?: T;
        heading?: T;
        headingColor?: T;
        introContent?: T;
        servicesList?:
          | T
          | {
              serviceName?: T;
              serviceUrl?: T;
              description?: T;
              id?: T;
            };
        columnsLayout?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  boxGridSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        heading?: T;
        headingColor?: T;
        introContent?: T;
        boxes?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              content?: T;
              ctaButton?:
                | T
                | {
                    text?: T;
                    url?: T;
                    className?: T;
                  };
              animationClass?: T;
              id?: T;
            };
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        animationClass?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        backgroundColor?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogImage?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wesley-chapel-location-page-component_select".
 */
export interface WesleyChapelLocationPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        cssClasses?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              url?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              url?: T;
            };
      };
  introColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        logo?: T;
        logoUrl?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        heading?: T;
        headingSpan?: T;
        headingColor?: T;
        content?: T;
        contentText?: T;
        maxWidth?: T;
        textAlign?: T;
      };
  halfImageSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        flipped?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        contentText?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              url?: T;
            };
      };
  boxGridSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        heading?: T;
        headingSmall?: T;
        headingColor?: T;
        content?: T;
        contentText?: T;
      };
  columnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        heading?: T;
        headingSmall?: T;
        headingColor?: T;
        headingAlign?: T;
        content?: T;
        contentText?: T;
        bulletPoints?:
          | T
          | {
              title?: T;
              description?: T;
              id?: T;
            };
        useColumns?: T;
      };
  columnMediaSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        mediaPosition?: T;
        heading?: T;
        headingSmall?: T;
        headingColor?: T;
        content?: T;
        contentText?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              alt?: T;
              url?: T;
            };
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        animationClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              url?: T;
            };
        heading?: T;
        headingColor?: T;
        headingAlign?: T;
        content?: T;
        contentText?: T;
      };
  twoColumnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        verticalAlign?: T;
        leftColumn?:
          | T
          | {
              animationClass?: T;
              heading?: T;
              headingColor?: T;
              content?: T;
            };
        rightColumn?:
          | T
          | {
              animationClass?: T;
              content?: T;
              contentText?: T;
            };
      };
  columnSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        heading?: T;
        headingColor?: T;
        headingAlign?: T;
        content?: T;
        contentText?: T;
        bulletPoints?:
          | T
          | {
              title?: T;
              description?: T;
              id?: T;
            };
        useColumns?: T;
      };
  boxGridSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        contentText?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              url?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        backgroundColor?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogImage?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "winter-garden-location-page-component_select".
 */
export interface WinterGardenLocationPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        cssClasses?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              url?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              url?: T;
            };
      };
  introColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        logo?: T;
        logoUrl?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        contentText?: T;
        maxWidth?: T;
        textAlign?: T;
      };
  halfImageSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        flipped?: T;
        heading?: T;
        headingColor?: T;
        content?: T;
        contentText?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              url?: T;
            };
      };
  columnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        heading?: T;
        headingColor?: T;
        headingAlign?: T;
        introText?: T;
        introAlign?: T;
        content?: T;
        bulletPoints?:
          | T
          | {
              title?: T;
              description?: T;
              id?: T;
            };
        useColumns?: T;
      };
  dividerSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        cssClasses?: T;
        logo?: T;
        logoUrl?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
      };
  threeColumnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        leftColumn?:
          | T
          | {
              animationClass?: T;
              heading?: T;
              headingSpan?: T;
              headingColor?: T;
              content?: T;
              contentText?: T;
            };
        centerColumn?:
          | T
          | {
              animationClass?: T;
              heading?: T;
              headingColor?: T;
              content?: T;
              contentText?: T;
            };
        rightColumn?:
          | T
          | {
              animationClass?: T;
              heading?: T;
              headingColor?: T;
              content?: T;
              contentText?: T;
            };
      };
  twoColumnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        verticalAlign?: T;
        leftColumn?:
          | T
          | {
              animationClass?: T;
              heading?: T;
              headingColor?: T;
              content?: T;
              contentText?: T;
            };
        rightColumn?:
          | T
          | {
              animationClass?: T;
              content?: T;
              image?:
                | T
                | {
                    upload?: T;
                    url?: T;
                    alt?: T;
                    width?: T;
                    height?: T;
                  };
            };
      };
  twoColumnSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        verticalAlign?: T;
        leftColumn?:
          | T
          | {
              animationClass?: T;
              content?: T;
              image?:
                | T
                | {
                    upload?: T;
                    url?: T;
                    alt?: T;
                    width?: T;
                    height?: T;
                  };
            };
        rightColumn?:
          | T
          | {
              animationClass?: T;
              heading?: T;
              headingColor?: T;
              content?: T;
              contentText?: T;
            };
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        animationClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              url?: T;
            };
        useTwoColumns?: T;
        verticalAlign?: T;
        leftContent?:
          | T
          | {
              heading?: T;
              headingSpan?: T;
              headingColor?: T;
            };
        rightContent?:
          | T
          | {
              content?: T;
              contentText?: T;
            };
      };
  twoColumnSection3?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        verticalAlign?: T;
        leftColumn?:
          | T
          | {
              animationClass?: T;
              heading?: T;
              headingSmall?: T;
              headingColor?: T;
              content?: T;
              contentText?: T;
              useSmallText?: T;
            };
        rightColumn?:
          | T
          | {
              animationClass?: T;
              content?: T;
              image?:
                | T
                | {
                    upload?: T;
                    url?: T;
                    alt?: T;
                    width?: T;
                    height?: T;
                  };
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        backgroundColor?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogImage?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "winter-park-location-page-component_select".
 */
export interface WinterParkLocationPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        cssClasses?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              url?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleSmall?: T;
        titleColor?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              url?: T;
            };
      };
  introColumnSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        logo?: T;
        logoUrl?: T;
        logoAlt?: T;
        logoWidth?: T;
        logoHeight?: T;
        heading?: T;
        headingSpan?: T;
        headingColor?: T;
        content?: T;
        contentText?: T;
        button?:
          | T
          | {
              show?: T;
              text?: T;
              url?: T;
              cssClass?: T;
            };
        maxWidth?: T;
        textAlign?: T;
      };
  halfImageSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        flipped?: T;
        heading?: T;
        headingSmall?: T;
        headingSpan?: T;
        subheading?: T;
        headingColor?: T;
        content?: T;
        contentText?: T;
        bulletPoints?:
          | T
          | {
              text?: T;
              id?: T;
            };
        textAlign?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              url?: T;
            };
      };
  bannerSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        animationClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              url?: T;
            };
        heading?: T;
        headingColor?: T;
        content?: T;
        contentText?: T;
        maxWidth?: T;
      };
  columnSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        mediaPosition?: T;
        heading?: T;
        headingSmall?: T;
        headingMain?: T;
        headingSpan?: T;
        headingColor?: T;
        content?: T;
        contentText?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              url?: T;
              width?: T;
              height?: T;
            };
      };
  boxGridSection1?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              url?: T;
            };
        heading?: T;
        headingColor?: T;
        introText?: T;
        boxes?:
          | T
          | {
              heading?: T;
              content?: T;
              button?:
                | T
                | {
                    show?: T;
                    text?: T;
                    url?: T;
                    cssClass?: T;
                  };
              animationClass?: T;
              id?: T;
            };
      };
  boxGridSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        boxes?:
          | T
          | {
              heading?: T;
              content?: T;
              button?:
                | T
                | {
                    show?: T;
                    text?: T;
                    url?: T;
                    cssClass?: T;
                  };
              animationClass?: T;
              id?: T;
            };
      };
  bannerSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        animationClass?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              url?: T;
            };
        heading?: T;
        headingColor?: T;
        content?: T;
        contentParagraphs?:
          | T
          | {
              text?: T;
              id?: T;
            };
      };
  columnSection2?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        mediaPosition?: T;
        heading?: T;
        headingSpan?: T;
        headingColor?: T;
        content?: T;
        contentText?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              url?: T;
              width?: T;
              height?: T;
            };
      };
  boxGridSection3?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              url?: T;
            };
        heading?: T;
        headingColor?: T;
        introText?: T;
        boxes?:
          | T
          | {
              heading?: T;
              content?: T;
              button?:
                | T
                | {
                    show?: T;
                    text?: T;
                    url?: T;
                    cssClass?: T;
                  };
              animationClass?: T;
              id?: T;
            };
      };
  columnSection3?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        mediaPosition?: T;
        heading?: T;
        headingSmall?: T;
        headingSpan?: T;
        headingColor?: T;
        content?: T;
        contentText?: T;
        image?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              url?: T;
              width?: T;
              height?: T;
            };
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        backgroundColor?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogImage?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "satellite-locations-page-component_select".
 */
export interface SatelliteLocationsPageComponentSelect<T extends boolean = true> {
  componentName?: T;
  heroSection?:
    | T
    | {
        show?: T;
        backgroundColor?: T;
        cssClasses?: T;
        backgroundImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              url?: T;
            };
        breadcrumbs?:
          | T
          | {
              label?: T;
              url?: T;
              ariaLabel?: T;
              id?: T;
            };
        title?: T;
        titleColor?: T;
        subtitle?: T;
        subtitleColor?: T;
        mediaImage?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              large?: T;
              alt?: T;
              url?: T;
            };
      };
  locationSections?:
    | T
    | {
        sectionName?: T;
        show?: T;
        backgroundColor?: T;
        textColor?: T;
        cssClasses?: T;
        rowCssClasses?: T;
        paddingBottom?: T;
        locations?:
          | T
          | {
              locationName?: T;
              animationClass?: T;
              mapSettings?:
                | T
                | {
                    embedUrl?: T;
                    width?: T;
                    height?: T;
                    grayscale?: T;
                  };
              contactInfo?:
                | T
                | {
                    headingPaddingTop?: T;
                    phone?: T;
                    phoneDisplay?: T;
                    address?: T;
                    googleMapsUrl?: T;
                    email?: T;
                    additionalInfo?: T;
                  };
              id?: T;
            };
        id?: T;
      };
  sectionOrder?:
    | T
    | {
        section?: T;
        id?: T;
      };
  globalStyles?:
    | T
    | {
        primaryColor?: T;
        secondaryColor?: T;
        textColor?: T;
        linkColor?: T;
        backgroundColor?: T;
        headingColor?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogImage?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contact-component_select".
 */
export interface ContactComponentSelect<T extends boolean = true> {
  title?: T;
  contactSection?:
    | T
    | {
        backgroundColor?: T;
        infoSection?:
          | T
          | {
              heading?: T;
              headingColor?: T;
              phoneNumber?: T;
              phoneColor?: T;
              specialsButton?:
                | T
                | {
                    text?: T;
                    url?: T;
                    backgroundColor?: T;
                    textColor?: T;
                  };
            };
        formSection?:
          | T
          | {
              backgroundColor?: T;
              subject?: T;
              redirectUrl?: T;
              fields?:
                | T
                | {
                    fieldType?: T;
                    name?: T;
                    label?: T;
                    placeholder?: T;
                    required?: T;
                    options?:
                      | T
                      | {
                          label?: T;
                          value?: T;
                          id?: T;
                        };
                    defaultValue?: T;
                    rows?: T;
                    cols?: T;
                    id?: T;
                  };
              submitButton?:
                | T
                | {
                    text?: T;
                    backgroundColor?: T;
                    textColor?: T;
                  };
              privacyText?: T;
              privacyLinks?:
                | T
                | {
                    text?: T;
                    url?: T;
                    id?: T;
                  };
            };
        backgroundImages?:
          | T
          | {
              desktopImage?: T;
              mobileImage?: T;
            };
      };
  locationsBanner?:
    | T
    | {
        backgroundColor?: T;
        heading?:
          | T
          | {
              smallText?: T;
              mainText?: T;
              color?: T;
            };
        locations?:
          | T
          | {
              name?: T;
              address?: T;
              phone?: T;
              slug?: T;
              mapPosition?:
                | T
                | {
                    left?: T;
                    top?: T;
                  };
              id?: T;
            };
        mapImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  formType?: T;
  first_name?: T;
  last_name?: T;
  email?: T;
  phone?: T;
  location_id?: T;
  location_name?: T;
  what_service_are_you_interested_in?: T;
  commentsquestions?: T;
  optin_for_sms_texting?: T;
  by_completing_this_form_you_are_giving_us_permission_to_followup_by_phone_email_or_text?: T;
  status?: T;
  notes?: T;
  ipAddress?: T;
  userAgent?: T;
  referrer?: T;
  submittedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "training-form-submissions_select".
 */
export interface TrainingFormSubmissionsSelect<T extends boolean = true> {
  formType?: T;
  first_name?: T;
  last_name?: T;
  email?: T;
  phone?: T;
  preferred_training_month?: T;
  preferred_training_program?: T;
  questions_or_comments?: T;
  optin_for_sms_texting?: T;
  by_completing_this_form_you_are_giving_us_permission_to_followup_by_phone_email_or_text?: T;
  ipAddress?: T;
  userAgent?: T;
  referrer?: T;
  submittedAt?: T;
  status?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "training-application_select".
 */
export interface TrainingApplicationSelect<T extends boolean = true> {
  title?: T;
  isActive?: T;
  introModule?:
    | T
    | {
        logo?: T;
        heading?: T;
        description?: T;
      };
  formSection?:
    | T
    | {
        formTitle?: T;
        backgroundColor?: T;
        formId?: T;
        redirectUrl?: T;
        subjectLine?: T;
        formFields?:
          | T
          | {
              fieldType?: T;
              name?: T;
              label?: T;
              placeholder?: T;
              required?: T;
              order?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              rows?: T;
              cols?: T;
              defaultValue?: T;
              id?: T;
            };
        trainingProgramOptions?:
          | T
          | {
              label?: T;
              value?: T;
              order?: T;
              id?: T;
            };
        privacySection?:
          | T
          | {
              privacyText?: T;
              privacyLinks?:
                | T
                | {
                    text?: T;
                    url?: T;
                    order?: T;
                    id?: T;
                  };
            };
        submitButton?:
          | T
          | {
              text?: T;
              backgroundColor?: T;
              textColor?: T;
            };
        backgroundImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "special-contact-form-submissions_select".
 */
export interface SpecialContactFormSubmissionsSelect<T extends boolean = true> {
  firstName?: T;
  lastName?: T;
  phone?: T;
  email?: T;
  location?: T;
  locationName?: T;
  service?: T;
  comments?: T;
  optInSMS?: T;
  consentFollowUp?: T;
  status?: T;
  assignedTo?: T;
  notes?: T;
  ipAddress?: T;
  userAgent?: T;
  referrer?: T;
  source?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * Global navbar configuration for the entire site
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navbar".
 */
export interface Navbar {
  id: string;
  /**
   * Turn the navbar on/off globally
   */
  enabled?: boolean | null;
  upperNav?: {
    enabled?: boolean | null;
    styling?: {
      backgroundColor?: string | null;
      textColor?: string | null;
      linkHoverColor?: string | null;
      /**
       * CSS padding value
       */
      padding?: string | null;
    };
    /**
     * Drag and drop to reorder
     */
    items?:
      | {
          type: 'link' | 'phone' | 'social' | 'search';
          label?: string | null;
          href?: string | null;
          ariaLabel?: string | null;
          customClasses?: string | null;
          phoneNumber?: string | null;
          phoneLink?: string | null;
          socialLinks?:
            | {
                platform: 'instagram' | 'facebook' | 'youtube' | 'twitter' | 'linkedin' | 'tiktok';
                url: string;
                title?: string | null;
                ariaLabel?: string | null;
                iconClass?: string | null;
                id?: string | null;
              }[]
            | null;
          searchConfig?: {
            buttonText?: string | null;
            buttonAriaLabel?: string | null;
            buttonTitle?: string | null;
          };
          visibility?: {
            desktop?: boolean | null;
            tablet?: boolean | null;
            mobile?: boolean | null;
          };
          id?: string | null;
        }[]
      | null;
  };
  mainNav?: {
    enabled?: boolean | null;
    styling?: {
      headerClass?: string | null;
      backgroundColor?: string | null;
      textColor?: string | null;
      linkHoverColor?: string | null;
      activeItemColor?: string | null;
      padding?: string | null;
    };
    logo?: {
      /**
       * Upload your logo image
       */
      imageUrl: string | Media;
      width?: number | null;
      height?: number | null;
      altText?: string | null;
      linkUrl?: string | null;
    };
    navigationSettings?: {
      desktopType?: ('horizontal' | 'vertical' | 'hamburger') | null;
      tabletType?: ('horizontal' | 'vertical' | 'hamburger') | null;
      mobileType?: ('horizontal' | 'vertical' | 'hamburger') | null;
      breakpointMobile?: number | null;
      breakpointTablet?: number | null;
      hamburgerColor?: string | null;
      hamburgerColorExpanded?: string | null;
    };
    /**
     * Drag and drop to reorder menu items
     */
    menuItems?:
      | {
          label: string;
          href: string;
          isActive?: boolean | null;
          rel?: string | null;
          customClasses?: string | null;
          /**
           * Dropdown menu items (drag to reorder)
           */
          subMenu?:
            | {
                label: string;
                href: string;
                rel?: string | null;
                customClasses?: string | null;
                /**
                 * Third level menu items
                 */
                subMenu?:
                  | {
                      label: string;
                      href: string;
                      rel?: string | null;
                      customClasses?: string | null;
                      id?: string | null;
                    }[]
                  | null;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
  };
  stickyNav?: {
    /**
     * Makes navbar stick to top when scrolling
     */
    enabled?: boolean | null;
    /**
     * Distance from top before becoming sticky
     */
    offset?: number | null;
  };
  animations?: {
    enableTransitions?: boolean | null;
    /**
     * CSS duration value (e.g., 0.3s, 300ms)
     */
    transitionDuration?: string | null;
    dropdownAnimation?: ('fade' | 'slide' | 'none') | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Manage the home page content and sections
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "home".
 */
export interface Home {
  id: string;
  accessibilityMenu?: {
    enabled?: boolean | null;
    items?:
      | {
          text?: string | null;
          href?: string | null;
          ariaLabel?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Drag and drop to reorder sections
   */
  sections: {
    sectionType:
      | 'hero_banner'
      | 'anchor_links'
      | 'intro_section'
      | 'two_column'
      | 'three_column_stats'
      | 'home_grid'
      | 'home_banner'
      | 'half_image'
      | 'reviews_slider'
      | 'double_banner'
      | 'locations_banner'
      | 'cta_gallery'
      | 'tabs_module'
      | 'founders_section'
      | 'quote_banner'
      | 'procedures_banner';
    visibility?: boolean | null;
    /**
     * Space-separated class names (e.g., "dark center-placement wow fadeInUp")
     */
    customClasses?: string | null;
    /**
     * CSS color value (e.g., #ffffff, transparent, rgb(255,255,255))
     */
    backgroundColor?: string | null;
    /**
     * CSS color value (e.g., #000000, #333333)
     */
    textColor?: string | null;
    heroBanner?: {
      /**
       * Upload your logo image
       */
      logo?: (string | null) | Media;
      logoWidth?: number | null;
      logoHeight?: number | null;
      logoAlt?: string | null;
      mainHeading?: string | null;
      subHeadingLine1?: string | null;
      subHeadingLine2?: string | null;
      backgroundVideo?: {
        enabled?: boolean | null;
        desktopUrl?: string | null;
        tabletUrl?: string | null;
        mobileUrl?: string | null;
        videoTitle?: string | null;
      };
      slides?:
        | {
            /**
             * Upload your logo image
             */
            image?: (string | null) | Media;
            imageAlt?: string | null;
            id?: string | null;
          }[]
        | null;
    };
    anchorLinks?: {
      links?:
        | {
            text: string;
            url: string;
            ariaLabel?: string | null;
            id?: string | null;
          }[]
        | null;
    };
    introSection?: {
      heading?: string | null;
      subheadings?:
        | {
            text?: string | null;
            id?: string | null;
          }[]
        | null;
    };
    twoColumn?: {
      mediaPosition?: ('media-left' | 'media-right') | null;
      smallHeading?: string | null;
      mainHeadingLine1?: string | null;
      mainHeadingLine2?: string | null;
      content?: string | null;
      /**
       * Upload your logo image
       */
      media?: (string | null) | Media;
      mediaAlt?: string | null;
      mediaWidth?: number | null;
      mediaHeight?: number | null;
    };
    threeColumnStats?: {
      columns?:
        | {
            number: string;
            titleSmall?: string | null;
            titleLine1?: string | null;
            titleLine2?: string | null;
            id?: string | null;
          }[]
        | null;
    };
    homeGrid?: {
      gridOption?: ('option-1' | 'option-2' | 'option-3') | null;
      items?:
        | {
            title?: string | null;
            content?: string | null;
            /**
             * Upload your logo image
             */
            image?: (string | null) | Media;
            imageAlt?: string | null;
            linkText?: string | null;
            linkUrl?: string | null;
            id?: string | null;
          }[]
        | null;
    };
    homeBanner?: {
      option?: ('option-1' | 'option-2') | null;
      /**
       * Upload your logo image
       */
      backgroundImage?: (string | null) | Media;
      /**
       * Upload your logo image
       */
      logo?: (string | null) | Media;
      logoAlt?: string | null;
      logoWidth?: number | null;
      logoHeight?: number | null;
      smallHeading?: string | null;
      mainHeadingLine1?: string | null;
      mainHeadingLine2?: string | null;
      quoteText?: string | null;
      columns?:
        | {
            title?: string | null;
            content?: string | null;
            id?: string | null;
          }[]
        | null;
    };
    halfImage?: {
      flipped?: boolean | null;
      /**
       * Upload your logo image
       */
      image?: (string | null) | Media;
      imageAlt?: string | null;
      heading?: string | null;
      contentBold?: string | null;
      content?: string | null;
      buttons?:
        | {
            text?: string | null;
            url?: string | null;
            /**
             * e.g., "btn white outline"
             */
            classes?: string | null;
            id?: string | null;
          }[]
        | null;
    };
    reviewsSlider?: {
      /**
       * Upload your logo image
       */
      logo?: (string | null) | Media;
      logoAlt?: string | null;
      logoWidth?: number | null;
      logoHeight?: number | null;
      title?: string | null;
      itemsToShow?: number | null;
      reviews?:
        | {
            description?: string | null;
            author?: string | null;
            rating?: number | null;
            id?: string | null;
          }[]
        | null;
      ctaText?: string | null;
      ctaUrl?: string | null;
    };
    doubleBanner?: {
      mainTitleSmall?: string | null;
      mainTitle?: string | null;
      leftBanner?: {
        title?: string | null;
        contentBold?: string | null;
        content?: string | null;
        linkText?: string | null;
        linkUrl?: string | null;
        /**
         * Upload your logo image
         */
        image?: (string | null) | Media;
        imageAlt?: string | null;
      };
      rightBanner?: {
        title?: string | null;
        contentBold?: string | null;
        content?: string | null;
        linkText?: string | null;
        linkUrl?: string | null;
        /**
         * Upload your logo image
         */
        image?: (string | null) | Media;
        imageAlt?: string | null;
      };
    };
    locationsBanner?: {
      smallHeading?: string | null;
      mainHeading?: string | null;
      description?: string | null;
      /**
       * Upload your logo image
       */
      mapImage?: (string | null) | Media;
      ctaText?: string | null;
      ctaUrl?: string | null;
      locations?:
        | {
            name: string;
            addressLine1?: string | null;
            addressLine2?: string | null;
            phone?: string | null;
            phoneLink?: string | null;
            url?: string | null;
            ariaLabel?: string | null;
            /**
             * e.g., "53" for 53%
             */
            leftPosition?: string | null;
            /**
             * e.g., "45" for 45%
             */
            topPosition?: string | null;
            id?: string | null;
          }[]
        | null;
    };
    ctaGallery?: {
      smallHeading?: string | null;
      mainHeading?: string | null;
      testimonial?: string | null;
      /**
       * Upload your logo image
       */
      image?: (string | null) | Media;
      imageAlt?: string | null;
      buttonText?: string | null;
      buttonUrl?: string | null;
      buttonTitle?: string | null;
      buttonAriaLabel?: string | null;
    };
    tabsModule?: {
      tabs?:
        | {
            tabLabel: string;
            smallHeading?: string | null;
            mainHeading?: string | null;
            description?: string | null;
            links?:
              | {
                  text?: string | null;
                  url?: string | null;
                  id?: string | null;
                }[]
              | null;
            buttonText?: string | null;
            buttonUrl?: string | null;
            buttonClasses?: string | null;
            /**
             * Upload your logo image
             */
            media?: (string | null) | Media;
            mediaAlt?: string | null;
            id?: string | null;
          }[]
        | null;
    };
    foundersSection?: {
      flipped?: boolean | null;
      hasWatermark?: boolean | null;
      /**
       * Upload the founders image
       */
      image?: (string | null) | Media;
      imageAlt?: string | null;
      imageWidth?: number | null;
      imageHeight?: number | null;
      smallHeading?: string | null;
      mainHeading?: string | null;
      content?: string | null;
      buttonText?: string | null;
      buttonUrl?: string | null;
    };
    quoteBanner?: {
      isDark?: boolean | null;
      hasLinks?: boolean | null;
      /**
       * Upload the logo (typically white for dark theme)
       */
      logo?: (string | null) | Media;
      logoAlt?: string | null;
      logoWidth?: number | null;
      logoHeight?: number | null;
      quoteText: string;
      /**
       * Upload the background image
       */
      backgroundImage?: (string | null) | Media;
      backgroundImageAlt?: string | null;
      backgroundImageWidth?: number | null;
      backgroundImageHeight?: number | null;
    };
    proceduresBanner?: {
      mainTitleSmall?: string | null;
      mainTitle?: string | null;
      leftBanner?: {
        title?: string | null;
        contentBold?: string | null;
        content?: string | null;
        linkText?: string | null;
        linkUrl?: string | null;
        /**
         * Upload background image for body procedures
         */
        image?: (string | null) | Media;
        imageAlt?: string | null;
        imageWidth?: number | null;
        imageHeight?: number | null;
      };
      rightBanner?: {
        title?: string | null;
        contentBold?: string | null;
        content?: string | null;
        linkText?: string | null;
        linkUrl?: string | null;
        /**
         * Upload background image for breast procedures
         */
        image?: (string | null) | Media;
        imageAlt?: string | null;
        imageWidth?: number | null;
        imageHeight?: number | null;
      };
    };
    id?: string | null;
  }[];
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    /**
     * Upload your logo image
     */
    ogImage?: (string | null) | Media;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "provider-locator-component".
 */
export interface ProviderLocatorComponent {
  id: string;
  componentName?: string | null;
  /**
   * Drag to reorder sections
   */
  sections?:
    | {
        sectionType:
          | 'header'
          | 'search'
          | 'providerList'
          | 'locationList'
          | 'detailView'
          | 'map'
          | 'carousel'
          | 'mobileFooter';
        isActive?: boolean | null;
        /**
         * CSS color value (e.g., #ffffff, rgb(255,255,255))
         */
        backgroundColor?: string | null;
        textColor?: string | null;
        /**
         * Lower numbers appear first
         */
        order?: number | null;
        id?: string | null;
      }[]
    | null;
  header?: {
    /**
     * Drag to reorder menu items
     */
    menuItems?:
      | {
          label: string;
          id: string;
          isActive?: boolean | null;
          textColor?: string | null;
          activeTextColor?: string | null;
          backgroundColor?: string | null;
          order?: number | null;
        }[]
      | null;
    searchIcon?: (string | null) | Media;
    backgroundColor?: string | null;
    useMyLocation?: {
      enabled?: boolean | null;
      text?: string | null;
      icon?: (string | null) | Media;
      textColor?: string | null;
    };
  };
  searchBar?: {
    locationSearchPlaceholder?: string | null;
    providerSearchPlaceholder?: string | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    borderColor?: string | null;
    backButtonText?: string | null;
    /**
     * Use {count} as placeholder for number
     */
    resultsSnippetText?: string | null;
  };
  providerCard?: {
    quickViewText?: string | null;
    viewProviderText?: string | null;
    scheduleButtonText?: string | null;
    backgroundImage?: (string | null) | Media;
    cardBackgroundColor?: string | null;
    textColor?: string | null;
    buttonBackgroundColor?: string | null;
    buttonTextColor?: string | null;
    hoverBackgroundColor?: string | null;
  };
  locationCard?: {
    quickViewText?: string | null;
    viewLocationText?: string | null;
    scheduleButtonText?: string | null;
    cardBackgroundColor?: string | null;
    textColor?: string | null;
    buttonBackgroundColor?: string | null;
    buttonTextColor?: string | null;
    locationIcon?: (string | null) | Media;
  };
  detailView?: {
    viewProviderButtonText?: string | null;
    getDirectionsText?: string | null;
    businessHoursText?: string | null;
    viewLocationText?: string | null;
    reviewsText?: string | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    buttonBackgroundColor?: string | null;
    buttonTextColor?: string | null;
    starColor?: string | null;
    starActiveColor?: string | null;
  };
  map?: {
    /**
     * Your Google Maps JavaScript API key
     */
    apiKey?: string | null;
    defaultCenter?: {
      latitude?: number | null;
      longitude?: number | null;
    };
    defaultZoom?: number | null;
    markerIcon?: (string | null) | Media;
    /**
     * Google Maps styling JSON
     */
    mapStyles?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
  carousel?: {
    enabled?: boolean | null;
    heading?: string | null;
    backgroundColor?: string | null;
    textColor?: string | null;
    arrowColor?: string | null;
    itemsToShow?: number | null;
  };
  mobileFooter?: {
    /**
     * Drag to reorder tabs
     */
    tabs?:
      | {
          label: string;
          action: string;
          isActive?: boolean | null;
          backgroundColor?: string | null;
          textColor?: string | null;
          activeBackgroundColor?: string | null;
          activeTextColor?: string | null;
          order?: number | null;
          id?: string | null;
        }[]
      | null;
    backgroundColor?: string | null;
  };
  icons?: {
    searchIcon?: (string | null) | Media;
    locationIcon?: (string | null) | Media;
    crosshairIcon?: (string | null) | Media;
    webIcon?: (string | null) | Media;
    providerBackgroundImage?: (string | null) | Media;
  };
  globalStyles?: {
    primaryColor?: string | null;
    secondaryColor?: string | null;
    accentColor?: string | null;
    fontFamily?: string | null;
    headingFontFamily?: string | null;
    borderRadius?: string | null;
    /**
     * Add any custom CSS here
     */
    customCSS?: string | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navbar_select".
 */
export interface NavbarSelect<T extends boolean = true> {
  enabled?: T;
  upperNav?:
    | T
    | {
        enabled?: T;
        styling?:
          | T
          | {
              backgroundColor?: T;
              textColor?: T;
              linkHoverColor?: T;
              padding?: T;
            };
        items?:
          | T
          | {
              type?: T;
              label?: T;
              href?: T;
              ariaLabel?: T;
              customClasses?: T;
              phoneNumber?: T;
              phoneLink?: T;
              socialLinks?:
                | T
                | {
                    platform?: T;
                    url?: T;
                    title?: T;
                    ariaLabel?: T;
                    iconClass?: T;
                    id?: T;
                  };
              searchConfig?:
                | T
                | {
                    buttonText?: T;
                    buttonAriaLabel?: T;
                    buttonTitle?: T;
                  };
              visibility?:
                | T
                | {
                    desktop?: T;
                    tablet?: T;
                    mobile?: T;
                  };
              id?: T;
            };
      };
  mainNav?:
    | T
    | {
        enabled?: T;
        styling?:
          | T
          | {
              headerClass?: T;
              backgroundColor?: T;
              textColor?: T;
              linkHoverColor?: T;
              activeItemColor?: T;
              padding?: T;
            };
        logo?:
          | T
          | {
              imageUrl?: T;
              width?: T;
              height?: T;
              altText?: T;
              linkUrl?: T;
            };
        navigationSettings?:
          | T
          | {
              desktopType?: T;
              tabletType?: T;
              mobileType?: T;
              breakpointMobile?: T;
              breakpointTablet?: T;
              hamburgerColor?: T;
              hamburgerColorExpanded?: T;
            };
        menuItems?:
          | T
          | {
              label?: T;
              href?: T;
              isActive?: T;
              rel?: T;
              customClasses?: T;
              subMenu?:
                | T
                | {
                    label?: T;
                    href?: T;
                    rel?: T;
                    customClasses?: T;
                    subMenu?:
                      | T
                      | {
                          label?: T;
                          href?: T;
                          rel?: T;
                          customClasses?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              id?: T;
            };
      };
  stickyNav?:
    | T
    | {
        enabled?: T;
        offset?: T;
      };
  animations?:
    | T
    | {
        enableTransitions?: T;
        transitionDuration?: T;
        dropdownAnimation?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "home_select".
 */
export interface HomeSelect<T extends boolean = true> {
  accessibilityMenu?:
    | T
    | {
        enabled?: T;
        items?:
          | T
          | {
              text?: T;
              href?: T;
              ariaLabel?: T;
              id?: T;
            };
      };
  sections?:
    | T
    | {
        sectionType?: T;
        visibility?: T;
        customClasses?: T;
        backgroundColor?: T;
        textColor?: T;
        heroBanner?:
          | T
          | {
              logo?: T;
              logoWidth?: T;
              logoHeight?: T;
              logoAlt?: T;
              mainHeading?: T;
              subHeadingLine1?: T;
              subHeadingLine2?: T;
              backgroundVideo?:
                | T
                | {
                    enabled?: T;
                    desktopUrl?: T;
                    tabletUrl?: T;
                    mobileUrl?: T;
                    videoTitle?: T;
                  };
              slides?:
                | T
                | {
                    image?: T;
                    imageAlt?: T;
                    id?: T;
                  };
            };
        anchorLinks?:
          | T
          | {
              links?:
                | T
                | {
                    text?: T;
                    url?: T;
                    ariaLabel?: T;
                    id?: T;
                  };
            };
        introSection?:
          | T
          | {
              heading?: T;
              subheadings?:
                | T
                | {
                    text?: T;
                    id?: T;
                  };
            };
        twoColumn?:
          | T
          | {
              mediaPosition?: T;
              smallHeading?: T;
              mainHeadingLine1?: T;
              mainHeadingLine2?: T;
              content?: T;
              media?: T;
              mediaAlt?: T;
              mediaWidth?: T;
              mediaHeight?: T;
            };
        threeColumnStats?:
          | T
          | {
              columns?:
                | T
                | {
                    number?: T;
                    titleSmall?: T;
                    titleLine1?: T;
                    titleLine2?: T;
                    id?: T;
                  };
            };
        homeGrid?:
          | T
          | {
              gridOption?: T;
              items?:
                | T
                | {
                    title?: T;
                    content?: T;
                    image?: T;
                    imageAlt?: T;
                    linkText?: T;
                    linkUrl?: T;
                    id?: T;
                  };
            };
        homeBanner?:
          | T
          | {
              option?: T;
              backgroundImage?: T;
              logo?: T;
              logoAlt?: T;
              logoWidth?: T;
              logoHeight?: T;
              smallHeading?: T;
              mainHeadingLine1?: T;
              mainHeadingLine2?: T;
              quoteText?: T;
              columns?:
                | T
                | {
                    title?: T;
                    content?: T;
                    id?: T;
                  };
            };
        halfImage?:
          | T
          | {
              flipped?: T;
              image?: T;
              imageAlt?: T;
              heading?: T;
              contentBold?: T;
              content?: T;
              buttons?:
                | T
                | {
                    text?: T;
                    url?: T;
                    classes?: T;
                    id?: T;
                  };
            };
        reviewsSlider?:
          | T
          | {
              logo?: T;
              logoAlt?: T;
              logoWidth?: T;
              logoHeight?: T;
              title?: T;
              itemsToShow?: T;
              reviews?:
                | T
                | {
                    description?: T;
                    author?: T;
                    rating?: T;
                    id?: T;
                  };
              ctaText?: T;
              ctaUrl?: T;
            };
        doubleBanner?:
          | T
          | {
              mainTitleSmall?: T;
              mainTitle?: T;
              leftBanner?:
                | T
                | {
                    title?: T;
                    contentBold?: T;
                    content?: T;
                    linkText?: T;
                    linkUrl?: T;
                    image?: T;
                    imageAlt?: T;
                  };
              rightBanner?:
                | T
                | {
                    title?: T;
                    contentBold?: T;
                    content?: T;
                    linkText?: T;
                    linkUrl?: T;
                    image?: T;
                    imageAlt?: T;
                  };
            };
        locationsBanner?:
          | T
          | {
              smallHeading?: T;
              mainHeading?: T;
              description?: T;
              mapImage?: T;
              ctaText?: T;
              ctaUrl?: T;
              locations?:
                | T
                | {
                    name?: T;
                    addressLine1?: T;
                    addressLine2?: T;
                    phone?: T;
                    phoneLink?: T;
                    url?: T;
                    ariaLabel?: T;
                    leftPosition?: T;
                    topPosition?: T;
                    id?: T;
                  };
            };
        ctaGallery?:
          | T
          | {
              smallHeading?: T;
              mainHeading?: T;
              testimonial?: T;
              image?: T;
              imageAlt?: T;
              buttonText?: T;
              buttonUrl?: T;
              buttonTitle?: T;
              buttonAriaLabel?: T;
            };
        tabsModule?:
          | T
          | {
              tabs?:
                | T
                | {
                    tabLabel?: T;
                    smallHeading?: T;
                    mainHeading?: T;
                    description?: T;
                    links?:
                      | T
                      | {
                          text?: T;
                          url?: T;
                          id?: T;
                        };
                    buttonText?: T;
                    buttonUrl?: T;
                    buttonClasses?: T;
                    media?: T;
                    mediaAlt?: T;
                    id?: T;
                  };
            };
        foundersSection?:
          | T
          | {
              flipped?: T;
              hasWatermark?: T;
              image?: T;
              imageAlt?: T;
              imageWidth?: T;
              imageHeight?: T;
              smallHeading?: T;
              mainHeading?: T;
              content?: T;
              buttonText?: T;
              buttonUrl?: T;
            };
        quoteBanner?:
          | T
          | {
              isDark?: T;
              hasLinks?: T;
              logo?: T;
              logoAlt?: T;
              logoWidth?: T;
              logoHeight?: T;
              quoteText?: T;
              backgroundImage?: T;
              backgroundImageAlt?: T;
              backgroundImageWidth?: T;
              backgroundImageHeight?: T;
            };
        proceduresBanner?:
          | T
          | {
              mainTitleSmall?: T;
              mainTitle?: T;
              leftBanner?:
                | T
                | {
                    title?: T;
                    contentBold?: T;
                    content?: T;
                    linkText?: T;
                    linkUrl?: T;
                    image?: T;
                    imageAlt?: T;
                    imageWidth?: T;
                    imageHeight?: T;
                  };
              rightBanner?:
                | T
                | {
                    title?: T;
                    contentBold?: T;
                    content?: T;
                    linkText?: T;
                    linkUrl?: T;
                    image?: T;
                    imageAlt?: T;
                    imageWidth?: T;
                    imageHeight?: T;
                  };
            };
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "provider-locator-component_select".
 */
export interface ProviderLocatorComponentSelect<T extends boolean = true> {
  componentName?: T;
  sections?:
    | T
    | {
        sectionType?: T;
        isActive?: T;
        backgroundColor?: T;
        textColor?: T;
        order?: T;
        id?: T;
      };
  header?:
    | T
    | {
        menuItems?:
          | T
          | {
              label?: T;
              id?: T;
              isActive?: T;
              textColor?: T;
              activeTextColor?: T;
              backgroundColor?: T;
              order?: T;
            };
        searchIcon?: T;
        backgroundColor?: T;
        useMyLocation?:
          | T
          | {
              enabled?: T;
              text?: T;
              icon?: T;
              textColor?: T;
            };
      };
  searchBar?:
    | T
    | {
        locationSearchPlaceholder?: T;
        providerSearchPlaceholder?: T;
        backgroundColor?: T;
        textColor?: T;
        borderColor?: T;
        backButtonText?: T;
        resultsSnippetText?: T;
      };
  providerCard?:
    | T
    | {
        quickViewText?: T;
        viewProviderText?: T;
        scheduleButtonText?: T;
        backgroundImage?: T;
        cardBackgroundColor?: T;
        textColor?: T;
        buttonBackgroundColor?: T;
        buttonTextColor?: T;
        hoverBackgroundColor?: T;
      };
  locationCard?:
    | T
    | {
        quickViewText?: T;
        viewLocationText?: T;
        scheduleButtonText?: T;
        cardBackgroundColor?: T;
        textColor?: T;
        buttonBackgroundColor?: T;
        buttonTextColor?: T;
        locationIcon?: T;
      };
  detailView?:
    | T
    | {
        viewProviderButtonText?: T;
        getDirectionsText?: T;
        businessHoursText?: T;
        viewLocationText?: T;
        reviewsText?: T;
        backgroundColor?: T;
        textColor?: T;
        buttonBackgroundColor?: T;
        buttonTextColor?: T;
        starColor?: T;
        starActiveColor?: T;
      };
  map?:
    | T
    | {
        apiKey?: T;
        defaultCenter?:
          | T
          | {
              latitude?: T;
              longitude?: T;
            };
        defaultZoom?: T;
        markerIcon?: T;
        mapStyles?: T;
      };
  carousel?:
    | T
    | {
        enabled?: T;
        heading?: T;
        backgroundColor?: T;
        textColor?: T;
        arrowColor?: T;
        itemsToShow?: T;
      };
  mobileFooter?:
    | T
    | {
        tabs?:
          | T
          | {
              label?: T;
              action?: T;
              isActive?: T;
              backgroundColor?: T;
              textColor?: T;
              activeBackgroundColor?: T;
              activeTextColor?: T;
              order?: T;
              id?: T;
            };
        backgroundColor?: T;
      };
  icons?:
    | T
    | {
        searchIcon?: T;
        locationIcon?: T;
        crosshairIcon?: T;
        webIcon?: T;
        providerBackgroundImage?: T;
      };
  globalStyles?:
    | T
    | {
        primaryColor?: T;
        secondaryColor?: T;
        accentColor?: T;
        fontFamily?: T;
        headingFontFamily?: T;
        borderRadius?: T;
        customCSS?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}